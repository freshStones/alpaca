/* soapC.cpp
   Generated by gSOAP 2.8.17r from temp.h

Copyright(C) 2000-2013, Robert van Engelen, Genivia Inc. All Rights Reserved.
The generated code is released under one of the following licenses:
GPL or Genivia's license for commercial use.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
*/

#if defined(__BORLANDC__)
#pragma option push -w-8060
#pragma option push -w-8004
#endif

#include "soapH.h"

SOAP_SOURCE_STAMP("@(#) soapC.cpp ver 2.8.17r 2014-04-16 06:34:12 GMT")


#ifndef WITH_NOGLOBAL

SOAP_FMAC3 int SOAP_FMAC4 soap_getheader(struct soap *soap)
{
	soap->part = SOAP_IN_HEADER;
	soap->header = soap_in_SOAP_ENV__Header(soap, "SOAP-ENV:Header", soap->header, NULL);
	soap->part = SOAP_END_HEADER;
	return soap->header == NULL;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_putheader(struct soap *soap)
{
	if (soap->version && soap->header)
	{	soap->part = SOAP_IN_HEADER;
		if (soap_out_SOAP_ENV__Header(soap, "SOAP-ENV:Header", 0, soap->header, NULL))
			return soap->error;
		soap->part = SOAP_END_HEADER;
	}
	return SOAP_OK;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serializeheader(struct soap *soap)
{
	if (soap->version && soap->header)
		soap_serialize_SOAP_ENV__Header(soap, soap->header);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_header(struct soap *soap)
{
	if (soap->header == NULL)
	{	if ((soap->header = soap_new_SOAP_ENV__Header(soap, -1)))
			soap_default_SOAP_ENV__Header(soap, soap->header);
	}
}

SOAP_FMAC3 void SOAP_FMAC4 soap_fault(struct soap *soap)
{
	if (soap->fault == NULL)
	{	soap->fault = soap_new_SOAP_ENV__Fault(soap, -1);
		if (soap->fault == NULL)
			return;
		soap_default_SOAP_ENV__Fault(soap, soap->fault);
	}
	if (soap->version == 2 && !soap->fault->SOAP_ENV__Code)
	{	soap->fault->SOAP_ENV__Code = soap_new_SOAP_ENV__Code(soap, -1);
		soap_default_SOAP_ENV__Code(soap, soap->fault->SOAP_ENV__Code);
	}
	if (soap->version == 2 && !soap->fault->SOAP_ENV__Reason)
	{	soap->fault->SOAP_ENV__Reason = soap_new_SOAP_ENV__Reason(soap, -1);
		soap_default_SOAP_ENV__Reason(soap, soap->fault->SOAP_ENV__Reason);
	}
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serializefault(struct soap *soap)
{
	soap_fault(soap);
	if (soap->fault)
		soap_serialize_SOAP_ENV__Fault(soap, soap->fault);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_putfault(struct soap *soap)
{
	if (soap->fault)
		return soap_put_SOAP_ENV__Fault(soap, soap->fault, "SOAP-ENV:Fault", NULL);
	return SOAP_OK;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_getfault(struct soap *soap)
{
	return (soap->fault = soap_get_SOAP_ENV__Fault(soap, NULL, "SOAP-ENV:Fault", NULL)) == NULL;
}

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultcode(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 2 && soap->fault->SOAP_ENV__Code)
		return (const char**)&soap->fault->SOAP_ENV__Code->SOAP_ENV__Value;
	return (const char**)&soap->fault->faultcode;
}

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultsubcode(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 2)
	{	if (soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode == NULL)
		{	soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode = soap_new_SOAP_ENV__Code(soap, -1);
			soap_default_SOAP_ENV__Code(soap, soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode);
		}
		return (const char**)&soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode->SOAP_ENV__Value;
	}
	return (const char**)&soap->fault->faultcode;
}

SOAP_FMAC3 const char * SOAP_FMAC4 soap_check_faultsubcode(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 2)
	{	if (soap->fault->SOAP_ENV__Code && soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode && soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode)
			return soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode->SOAP_ENV__Value;
		return NULL;
	}
	return soap->fault->faultcode;
}

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultstring(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 2)
		return (const char**)&soap->fault->SOAP_ENV__Reason->SOAP_ENV__Text;
	return (const char**)&soap->fault->faultstring;
}

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultdetail(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 2)
	{	if (soap->fault->SOAP_ENV__Detail == NULL)
		{	soap->fault->SOAP_ENV__Detail = soap_new_SOAP_ENV__Detail(soap, -1);
			soap_default_SOAP_ENV__Detail(soap, soap->fault->SOAP_ENV__Detail);
		}
		return (const char**)&soap->fault->SOAP_ENV__Detail->__any;
	}
	if (soap->fault->detail == NULL)
	{	soap->fault->detail = soap_new_SOAP_ENV__Detail(soap, -1);
		soap_default_SOAP_ENV__Detail(soap, soap->fault->detail);
	}
	return (const char**)&soap->fault->detail->__any;
}

SOAP_FMAC3 const char * SOAP_FMAC4 soap_check_faultdetail(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 2 && soap->fault->SOAP_ENV__Detail)
		return soap->fault->SOAP_ENV__Detail->__any;
	if (soap->fault->detail)
		return soap->fault->detail->__any;
	return NULL;
}

#endif

#ifndef WITH_NOIDREF
SOAP_FMAC3 int SOAP_FMAC4 soap_getindependent(struct soap *soap)
{
	int t;
	if (soap->version == 1)
	{	for (;;)
		{	if (!soap_getelement(soap, &t))
				if (soap->error || soap_ignore_element(soap))
					break;
		}
	}
	if (soap->error == SOAP_NO_TAG || soap->error == SOAP_EOF)
		soap->error = SOAP_OK;
	return soap->error;
}
#endif

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 void * SOAP_FMAC4 soap_getelement(struct soap *soap, int *type)
{	(void)type;
	if (soap_peek_element(soap))
		return NULL;
#ifndef WITH_NOIDREF
	if (!*soap->id || !(*type = soap_lookup_type(soap, soap->id)))
		*type = soap_lookup_type(soap, soap->href);
	switch (*type)
	{
	case SOAP_TYPE_byte:
		return soap_in_byte(soap, NULL, NULL, "xsd:byte");
	case SOAP_TYPE_int:
		return soap_in_int(soap, NULL, NULL, "xsd:int");
	case SOAP_TYPE_xsd__unsignedByte:
		return soap_in_xsd__unsignedByte(soap, NULL, NULL, "xsd:unsignedByte");
	case SOAP_TYPE_unsignedByte:
		return soap_in_unsignedByte(soap, NULL, NULL, "xsd:unsignedByte");
	case SOAP_TYPE_unsignedInt:
		return soap_in_unsignedInt(soap, NULL, NULL, "xsd:unsignedInt");
	case SOAP_TYPE_std__wstring:
		return soap_in_std__wstring(soap, NULL, NULL, "xsd:string");
	case SOAP_TYPE_PointerTo_tempuri__Get_USCOREOrder_USCOREListResponse:
		return soap_in_PointerTo_tempuri__Get_USCOREOrder_USCOREListResponse(soap, NULL, NULL, "tempuri:Get_Order_ListResponse");
	case SOAP_TYPE_PointerTo_tempuri__Get_USCOREOrder_USCOREList:
		return soap_in_PointerTo_tempuri__Get_USCOREOrder_USCOREList(soap, NULL, NULL, "tempuri:Get_Order_List");
	case SOAP_TYPE_PointerTo_tempuri__Get_USCOREOrderResponse:
		return soap_in_PointerTo_tempuri__Get_USCOREOrderResponse(soap, NULL, NULL, "tempuri:Get_OrderResponse");
	case SOAP_TYPE_PointerTo_tempuri__Get_USCOREOrder:
		return soap_in_PointerTo_tempuri__Get_USCOREOrder(soap, NULL, NULL, "tempuri:Get_Order");
	case SOAP_TYPE_PointerTo_tempuri__Book_USCOREApplyResponse:
		return soap_in_PointerTo_tempuri__Book_USCOREApplyResponse(soap, NULL, NULL, "tempuri:Book_ApplyResponse");
	case SOAP_TYPE_PointerTo_tempuri__Book_USCOREApply:
		return soap_in_PointerTo_tempuri__Book_USCOREApply(soap, NULL, NULL, "tempuri:Book_Apply");
	case SOAP_TYPE_PointerTo_tempuri__Book_USCOREModify_USCOREPlusResponse:
		return soap_in_PointerTo_tempuri__Book_USCOREModify_USCOREPlusResponse(soap, NULL, NULL, "tempuri:Book_Modify_PlusResponse");
	case SOAP_TYPE_PointerTo_tempuri__Book_USCOREModify_USCOREPlus:
		return soap_in_PointerTo_tempuri__Book_USCOREModify_USCOREPlus(soap, NULL, NULL, "tempuri:Book_Modify_Plus");
	case SOAP_TYPE_PointerTo_tempuri__Book_USCOREModify_USCOREHotelResponse:
		return soap_in_PointerTo_tempuri__Book_USCOREModify_USCOREHotelResponse(soap, NULL, NULL, "tempuri:Book_Modify_HotelResponse");
	case SOAP_TYPE_PointerTo_tempuri__Book_USCOREModify_USCOREHotel:
		return soap_in_PointerTo_tempuri__Book_USCOREModify_USCOREHotel(soap, NULL, NULL, "tempuri:Book_Modify_Hotel");
	case SOAP_TYPE_PointerTo_tempuri__Book_USCOREAddResponse:
		return soap_in_PointerTo_tempuri__Book_USCOREAddResponse(soap, NULL, NULL, "tempuri:Book_AddResponse");
	case SOAP_TYPE_PointerTo_tempuri__Book_USCOREAdd:
		return soap_in_PointerTo_tempuri__Book_USCOREAdd(soap, NULL, NULL, "tempuri:Book_Add");
	case SOAP_TYPE_PointerTo_tempuri__Get_USCOREHotel_USCORERoomStateResponse:
		return soap_in_PointerTo_tempuri__Get_USCOREHotel_USCORERoomStateResponse(soap, NULL, NULL, "tempuri:Get_Hotel_RoomStateResponse");
	case SOAP_TYPE_PointerTo_tempuri__Get_USCOREHotel_USCORERoomState:
		return soap_in_PointerTo_tempuri__Get_USCOREHotel_USCORERoomState(soap, NULL, NULL, "tempuri:Get_Hotel_RoomState");
	case SOAP_TYPE_PointerTo_tempuri__Get_USCOREHotel_USCOREPriceResponse:
		return soap_in_PointerTo_tempuri__Get_USCOREHotel_USCOREPriceResponse(soap, NULL, NULL, "tempuri:Get_Hotel_PriceResponse");
	case SOAP_TYPE_PointerTo_tempuri__Get_USCOREHotel_USCOREPrice:
		return soap_in_PointerTo_tempuri__Get_USCOREHotel_USCOREPrice(soap, NULL, NULL, "tempuri:Get_Hotel_Price");
	case SOAP_TYPE_PointerTo_tempuri__Get_USCOREHotel_USCOREInfoResponse:
		return soap_in_PointerTo_tempuri__Get_USCOREHotel_USCOREInfoResponse(soap, NULL, NULL, "tempuri:Get_Hotel_InfoResponse");
	case SOAP_TYPE_PointerTo_tempuri__Get_USCOREHotel_USCOREInfo:
		return soap_in_PointerTo_tempuri__Get_USCOREHotel_USCOREInfo(soap, NULL, NULL, "tempuri:Get_Hotel_Info");
	case SOAP_TYPE_PointerTo_tempuri__Get_USCOREHotel_USCOREListResponse:
		return soap_in_PointerTo_tempuri__Get_USCOREHotel_USCOREListResponse(soap, NULL, NULL, "tempuri:Get_Hotel_ListResponse");
	case SOAP_TYPE_PointerTo_tempuri__Get_USCOREHotel_USCOREList:
		return soap_in_PointerTo_tempuri__Get_USCOREHotel_USCOREList(soap, NULL, NULL, "tempuri:Get_Hotel_List");
	case SOAP_TYPE_PointerToxsd__unsignedByte:
		return soap_in_PointerToxsd__unsignedByte(soap, NULL, NULL, "xsd:unsignedByte");
	case SOAP_TYPE_PointerToint:
		return soap_in_PointerToint(soap, NULL, NULL, "xsd:int");
	case SOAP_TYPE_PointerTostd__wstring:
		return soap_in_PointerTostd__wstring(soap, NULL, NULL, "xsd:string");
	case SOAP_TYPE__QName:
	{	char **s;
		s = soap_in__QName(soap, NULL, NULL, "xsd:QName");
		return s ? *s : NULL;
	}
	case SOAP_TYPE_string:
	{	char **s;
		s = soap_in_string(soap, NULL, NULL, "xsd:string");
		return s ? *s : NULL;
	}
	default:
#else
	*type = 0;
#endif
	{	const char *t = soap->type;
		if (!*t)
			t = soap->tag;
		if (!soap_match_tag(soap, t, "xsd:string"))
		{	*type = SOAP_TYPE_std__wstring;
			return soap_in_std__wstring(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:byte"))
		{	*type = SOAP_TYPE_byte;
			return soap_in_byte(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:int"))
		{	*type = SOAP_TYPE_int;
			return soap_in_int(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:unsignedByte"))
		{	*type = SOAP_TYPE_xsd__unsignedByte;
			return soap_in_xsd__unsignedByte(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:unsignedByte"))
		{	*type = SOAP_TYPE_unsignedByte;
			return soap_in_unsignedByte(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:unsignedInt"))
		{	*type = SOAP_TYPE_unsignedInt;
			return soap_in_unsignedInt(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:QName"))
		{	char **s;
			*type = SOAP_TYPE__QName;
			s = soap_in__QName(soap, NULL, NULL, NULL);
			return s ? *s : NULL;
		}
		if (!soap_match_tag(soap, t, "xsd:string"))
		{	char **s;
			*type = SOAP_TYPE_string;
			s = soap_in_string(soap, NULL, NULL, NULL);
			return s ? *s : NULL;
		}
		t = soap->tag;
		if (!soap_match_tag(soap, t, "tempuri:Get_Order_ListResponse"))
		{	*type = SOAP_TYPE__tempuri__Get_USCOREOrder_USCOREListResponse;
			return soap_in__tempuri__Get_USCOREOrder_USCOREListResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tempuri:Get_Order_List"))
		{	*type = SOAP_TYPE__tempuri__Get_USCOREOrder_USCOREList;
			return soap_in__tempuri__Get_USCOREOrder_USCOREList(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tempuri:Get_OrderResponse"))
		{	*type = SOAP_TYPE__tempuri__Get_USCOREOrderResponse;
			return soap_in__tempuri__Get_USCOREOrderResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tempuri:Get_Order"))
		{	*type = SOAP_TYPE__tempuri__Get_USCOREOrder;
			return soap_in__tempuri__Get_USCOREOrder(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tempuri:Book_ApplyResponse"))
		{	*type = SOAP_TYPE__tempuri__Book_USCOREApplyResponse;
			return soap_in__tempuri__Book_USCOREApplyResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tempuri:Book_Apply"))
		{	*type = SOAP_TYPE__tempuri__Book_USCOREApply;
			return soap_in__tempuri__Book_USCOREApply(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tempuri:Book_Modify_PlusResponse"))
		{	*type = SOAP_TYPE__tempuri__Book_USCOREModify_USCOREPlusResponse;
			return soap_in__tempuri__Book_USCOREModify_USCOREPlusResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tempuri:Book_Modify_Plus"))
		{	*type = SOAP_TYPE__tempuri__Book_USCOREModify_USCOREPlus;
			return soap_in__tempuri__Book_USCOREModify_USCOREPlus(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tempuri:Book_Modify_HotelResponse"))
		{	*type = SOAP_TYPE__tempuri__Book_USCOREModify_USCOREHotelResponse;
			return soap_in__tempuri__Book_USCOREModify_USCOREHotelResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tempuri:Book_Modify_Hotel"))
		{	*type = SOAP_TYPE__tempuri__Book_USCOREModify_USCOREHotel;
			return soap_in__tempuri__Book_USCOREModify_USCOREHotel(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tempuri:Book_AddResponse"))
		{	*type = SOAP_TYPE__tempuri__Book_USCOREAddResponse;
			return soap_in__tempuri__Book_USCOREAddResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tempuri:Book_Add"))
		{	*type = SOAP_TYPE__tempuri__Book_USCOREAdd;
			return soap_in__tempuri__Book_USCOREAdd(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tempuri:Get_Hotel_RoomStateResponse"))
		{	*type = SOAP_TYPE__tempuri__Get_USCOREHotel_USCORERoomStateResponse;
			return soap_in__tempuri__Get_USCOREHotel_USCORERoomStateResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tempuri:Get_Hotel_RoomState"))
		{	*type = SOAP_TYPE__tempuri__Get_USCOREHotel_USCORERoomState;
			return soap_in__tempuri__Get_USCOREHotel_USCORERoomState(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tempuri:Get_Hotel_PriceResponse"))
		{	*type = SOAP_TYPE__tempuri__Get_USCOREHotel_USCOREPriceResponse;
			return soap_in__tempuri__Get_USCOREHotel_USCOREPriceResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tempuri:Get_Hotel_Price"))
		{	*type = SOAP_TYPE__tempuri__Get_USCOREHotel_USCOREPrice;
			return soap_in__tempuri__Get_USCOREHotel_USCOREPrice(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tempuri:Get_Hotel_InfoResponse"))
		{	*type = SOAP_TYPE__tempuri__Get_USCOREHotel_USCOREInfoResponse;
			return soap_in__tempuri__Get_USCOREHotel_USCOREInfoResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tempuri:Get_Hotel_Info"))
		{	*type = SOAP_TYPE__tempuri__Get_USCOREHotel_USCOREInfo;
			return soap_in__tempuri__Get_USCOREHotel_USCOREInfo(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tempuri:Get_Hotel_ListResponse"))
		{	*type = SOAP_TYPE__tempuri__Get_USCOREHotel_USCOREListResponse;
			return soap_in__tempuri__Get_USCOREHotel_USCOREListResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tempuri:Get_Hotel_List"))
		{	*type = SOAP_TYPE__tempuri__Get_USCOREHotel_USCOREList;
			return soap_in__tempuri__Get_USCOREHotel_USCOREList(soap, NULL, NULL, NULL);
		}
#ifndef WITH_NOIDREF
	}
#endif
	}
	soap->error = SOAP_TAG_MISMATCH;
	return NULL;
}

#ifdef __cplusplus
}
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_ignore_element(struct soap *soap)
{
	if (!soap_peek_element(soap))
	{	int t;
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Unexpected element '%s' in input (level=%u, %d)\n", soap->tag, soap->level, soap->body));
		if (soap->mustUnderstand && !soap->other)
			return soap->error = SOAP_MUSTUNDERSTAND;
		if (((soap->mode & SOAP_XML_STRICT) && soap->part != SOAP_IN_HEADER) || !soap_match_tag(soap, soap->tag, "SOAP-ENV:"))
		{	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "REJECTING element '%s'\n", soap->tag));
			return soap->error = SOAP_TAG_MISMATCH;
		}
		if (!*soap->id || !soap_getelement(soap, &t))
		{	soap->peeked = 0;
			if (soap->fignore)
				soap->error = soap->fignore(soap, soap->tag);
			else
				soap->error = SOAP_OK;
			DBGLOG(TEST, if (!soap->error) SOAP_MESSAGE(fdebug, "IGNORING element '%s'\n", soap->tag));
			if (!soap->error && soap->body)
			{	soap->level++;
				while (!soap_ignore_element(soap))
					;
				if (soap->error == SOAP_NO_TAG)
					soap->error = soap_element_end_in(soap, NULL);
			}
		}
	}
	return soap->error;
}

#ifndef WITH_NOIDREF
SOAP_FMAC3 int SOAP_FMAC4 soap_putindependent(struct soap *soap)
{
	int i;
	struct soap_plist *pp;
	if (soap->version == 1 && soap->encodingStyle && !(soap->mode & (SOAP_XML_TREE | SOAP_XML_GRAPH)))
		for (i = 0; i < SOAP_PTRHASH; i++)
			for (pp = soap->pht[i]; pp; pp = pp->next)
				if (pp->mark1 == 2 || pp->mark2 == 2)
					if (soap_putelement(soap, pp->ptr, "id", pp->id, pp->type))
						return soap->error;
	return SOAP_OK;
}
#endif

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_putelement(struct soap *soap, const void *ptr, const char *tag, int id, int type)
{	(void)tag;
	switch (type)
	{
	case SOAP_TYPE_byte:
		return soap_out_byte(soap, tag, id, (const char *)ptr, "xsd:byte");
	case SOAP_TYPE_int:
		return soap_out_int(soap, tag, id, (const int *)ptr, "xsd:int");
	case SOAP_TYPE_xsd__unsignedByte:
		return soap_out_xsd__unsignedByte(soap, tag, id, (const unsigned char *)ptr, "xsd:unsignedByte");
	case SOAP_TYPE_unsignedByte:
		return soap_out_unsignedByte(soap, tag, id, (const unsigned char *)ptr, "xsd:unsignedByte");
	case SOAP_TYPE_unsignedInt:
		return soap_out_unsignedInt(soap, tag, id, (const unsigned int *)ptr, "xsd:unsignedInt");
	case SOAP_TYPE_std__wstring:
		return soap_out_std__wstring(soap, tag, id, (const std::wstring *)ptr, "xsd:string");
	case SOAP_TYPE__tempuri__Get_USCOREOrder_USCOREListResponse:
		return ((_tempuri__Get_USCOREOrder_USCOREListResponse *)ptr)->soap_out(soap, "tempuri:Get_Order_ListResponse", id, NULL);
	case SOAP_TYPE__tempuri__Get_USCOREOrder_USCOREList:
		return ((_tempuri__Get_USCOREOrder_USCOREList *)ptr)->soap_out(soap, "tempuri:Get_Order_List", id, NULL);
	case SOAP_TYPE__tempuri__Get_USCOREOrderResponse:
		return ((_tempuri__Get_USCOREOrderResponse *)ptr)->soap_out(soap, "tempuri:Get_OrderResponse", id, NULL);
	case SOAP_TYPE__tempuri__Get_USCOREOrder:
		return ((_tempuri__Get_USCOREOrder *)ptr)->soap_out(soap, "tempuri:Get_Order", id, NULL);
	case SOAP_TYPE__tempuri__Book_USCOREApplyResponse:
		return ((_tempuri__Book_USCOREApplyResponse *)ptr)->soap_out(soap, "tempuri:Book_ApplyResponse", id, NULL);
	case SOAP_TYPE__tempuri__Book_USCOREApply:
		return ((_tempuri__Book_USCOREApply *)ptr)->soap_out(soap, "tempuri:Book_Apply", id, NULL);
	case SOAP_TYPE__tempuri__Book_USCOREModify_USCOREPlusResponse:
		return ((_tempuri__Book_USCOREModify_USCOREPlusResponse *)ptr)->soap_out(soap, "tempuri:Book_Modify_PlusResponse", id, NULL);
	case SOAP_TYPE__tempuri__Book_USCOREModify_USCOREPlus:
		return ((_tempuri__Book_USCOREModify_USCOREPlus *)ptr)->soap_out(soap, "tempuri:Book_Modify_Plus", id, NULL);
	case SOAP_TYPE__tempuri__Book_USCOREModify_USCOREHotelResponse:
		return ((_tempuri__Book_USCOREModify_USCOREHotelResponse *)ptr)->soap_out(soap, "tempuri:Book_Modify_HotelResponse", id, NULL);
	case SOAP_TYPE__tempuri__Book_USCOREModify_USCOREHotel:
		return ((_tempuri__Book_USCOREModify_USCOREHotel *)ptr)->soap_out(soap, "tempuri:Book_Modify_Hotel", id, NULL);
	case SOAP_TYPE__tempuri__Book_USCOREAddResponse:
		return ((_tempuri__Book_USCOREAddResponse *)ptr)->soap_out(soap, "tempuri:Book_AddResponse", id, NULL);
	case SOAP_TYPE__tempuri__Book_USCOREAdd:
		return ((_tempuri__Book_USCOREAdd *)ptr)->soap_out(soap, "tempuri:Book_Add", id, NULL);
	case SOAP_TYPE__tempuri__Get_USCOREHotel_USCORERoomStateResponse:
		return ((_tempuri__Get_USCOREHotel_USCORERoomStateResponse *)ptr)->soap_out(soap, "tempuri:Get_Hotel_RoomStateResponse", id, NULL);
	case SOAP_TYPE__tempuri__Get_USCOREHotel_USCORERoomState:
		return ((_tempuri__Get_USCOREHotel_USCORERoomState *)ptr)->soap_out(soap, "tempuri:Get_Hotel_RoomState", id, NULL);
	case SOAP_TYPE__tempuri__Get_USCOREHotel_USCOREPriceResponse:
		return ((_tempuri__Get_USCOREHotel_USCOREPriceResponse *)ptr)->soap_out(soap, "tempuri:Get_Hotel_PriceResponse", id, NULL);
	case SOAP_TYPE__tempuri__Get_USCOREHotel_USCOREPrice:
		return ((_tempuri__Get_USCOREHotel_USCOREPrice *)ptr)->soap_out(soap, "tempuri:Get_Hotel_Price", id, NULL);
	case SOAP_TYPE__tempuri__Get_USCOREHotel_USCOREInfoResponse:
		return ((_tempuri__Get_USCOREHotel_USCOREInfoResponse *)ptr)->soap_out(soap, "tempuri:Get_Hotel_InfoResponse", id, NULL);
	case SOAP_TYPE__tempuri__Get_USCOREHotel_USCOREInfo:
		return ((_tempuri__Get_USCOREHotel_USCOREInfo *)ptr)->soap_out(soap, "tempuri:Get_Hotel_Info", id, NULL);
	case SOAP_TYPE__tempuri__Get_USCOREHotel_USCOREListResponse:
		return ((_tempuri__Get_USCOREHotel_USCOREListResponse *)ptr)->soap_out(soap, "tempuri:Get_Hotel_ListResponse", id, NULL);
	case SOAP_TYPE__tempuri__Get_USCOREHotel_USCOREList:
		return ((_tempuri__Get_USCOREHotel_USCOREList *)ptr)->soap_out(soap, "tempuri:Get_Hotel_List", id, NULL);
	case SOAP_TYPE_PointerTo_tempuri__Get_USCOREOrder_USCOREListResponse:
		return soap_out_PointerTo_tempuri__Get_USCOREOrder_USCOREListResponse(soap, tag, id, (_tempuri__Get_USCOREOrder_USCOREListResponse *const*)ptr, "tempuri:Get_Order_ListResponse");
	case SOAP_TYPE_PointerTo_tempuri__Get_USCOREOrder_USCOREList:
		return soap_out_PointerTo_tempuri__Get_USCOREOrder_USCOREList(soap, tag, id, (_tempuri__Get_USCOREOrder_USCOREList *const*)ptr, "tempuri:Get_Order_List");
	case SOAP_TYPE_PointerTo_tempuri__Get_USCOREOrderResponse:
		return soap_out_PointerTo_tempuri__Get_USCOREOrderResponse(soap, tag, id, (_tempuri__Get_USCOREOrderResponse *const*)ptr, "tempuri:Get_OrderResponse");
	case SOAP_TYPE_PointerTo_tempuri__Get_USCOREOrder:
		return soap_out_PointerTo_tempuri__Get_USCOREOrder(soap, tag, id, (_tempuri__Get_USCOREOrder *const*)ptr, "tempuri:Get_Order");
	case SOAP_TYPE_PointerTo_tempuri__Book_USCOREApplyResponse:
		return soap_out_PointerTo_tempuri__Book_USCOREApplyResponse(soap, tag, id, (_tempuri__Book_USCOREApplyResponse *const*)ptr, "tempuri:Book_ApplyResponse");
	case SOAP_TYPE_PointerTo_tempuri__Book_USCOREApply:
		return soap_out_PointerTo_tempuri__Book_USCOREApply(soap, tag, id, (_tempuri__Book_USCOREApply *const*)ptr, "tempuri:Book_Apply");
	case SOAP_TYPE_PointerTo_tempuri__Book_USCOREModify_USCOREPlusResponse:
		return soap_out_PointerTo_tempuri__Book_USCOREModify_USCOREPlusResponse(soap, tag, id, (_tempuri__Book_USCOREModify_USCOREPlusResponse *const*)ptr, "tempuri:Book_Modify_PlusResponse");
	case SOAP_TYPE_PointerTo_tempuri__Book_USCOREModify_USCOREPlus:
		return soap_out_PointerTo_tempuri__Book_USCOREModify_USCOREPlus(soap, tag, id, (_tempuri__Book_USCOREModify_USCOREPlus *const*)ptr, "tempuri:Book_Modify_Plus");
	case SOAP_TYPE_PointerTo_tempuri__Book_USCOREModify_USCOREHotelResponse:
		return soap_out_PointerTo_tempuri__Book_USCOREModify_USCOREHotelResponse(soap, tag, id, (_tempuri__Book_USCOREModify_USCOREHotelResponse *const*)ptr, "tempuri:Book_Modify_HotelResponse");
	case SOAP_TYPE_PointerTo_tempuri__Book_USCOREModify_USCOREHotel:
		return soap_out_PointerTo_tempuri__Book_USCOREModify_USCOREHotel(soap, tag, id, (_tempuri__Book_USCOREModify_USCOREHotel *const*)ptr, "tempuri:Book_Modify_Hotel");
	case SOAP_TYPE_PointerTo_tempuri__Book_USCOREAddResponse:
		return soap_out_PointerTo_tempuri__Book_USCOREAddResponse(soap, tag, id, (_tempuri__Book_USCOREAddResponse *const*)ptr, "tempuri:Book_AddResponse");
	case SOAP_TYPE_PointerTo_tempuri__Book_USCOREAdd:
		return soap_out_PointerTo_tempuri__Book_USCOREAdd(soap, tag, id, (_tempuri__Book_USCOREAdd *const*)ptr, "tempuri:Book_Add");
	case SOAP_TYPE_PointerTo_tempuri__Get_USCOREHotel_USCORERoomStateResponse:
		return soap_out_PointerTo_tempuri__Get_USCOREHotel_USCORERoomStateResponse(soap, tag, id, (_tempuri__Get_USCOREHotel_USCORERoomStateResponse *const*)ptr, "tempuri:Get_Hotel_RoomStateResponse");
	case SOAP_TYPE_PointerTo_tempuri__Get_USCOREHotel_USCORERoomState:
		return soap_out_PointerTo_tempuri__Get_USCOREHotel_USCORERoomState(soap, tag, id, (_tempuri__Get_USCOREHotel_USCORERoomState *const*)ptr, "tempuri:Get_Hotel_RoomState");
	case SOAP_TYPE_PointerTo_tempuri__Get_USCOREHotel_USCOREPriceResponse:
		return soap_out_PointerTo_tempuri__Get_USCOREHotel_USCOREPriceResponse(soap, tag, id, (_tempuri__Get_USCOREHotel_USCOREPriceResponse *const*)ptr, "tempuri:Get_Hotel_PriceResponse");
	case SOAP_TYPE_PointerTo_tempuri__Get_USCOREHotel_USCOREPrice:
		return soap_out_PointerTo_tempuri__Get_USCOREHotel_USCOREPrice(soap, tag, id, (_tempuri__Get_USCOREHotel_USCOREPrice *const*)ptr, "tempuri:Get_Hotel_Price");
	case SOAP_TYPE_PointerTo_tempuri__Get_USCOREHotel_USCOREInfoResponse:
		return soap_out_PointerTo_tempuri__Get_USCOREHotel_USCOREInfoResponse(soap, tag, id, (_tempuri__Get_USCOREHotel_USCOREInfoResponse *const*)ptr, "tempuri:Get_Hotel_InfoResponse");
	case SOAP_TYPE_PointerTo_tempuri__Get_USCOREHotel_USCOREInfo:
		return soap_out_PointerTo_tempuri__Get_USCOREHotel_USCOREInfo(soap, tag, id, (_tempuri__Get_USCOREHotel_USCOREInfo *const*)ptr, "tempuri:Get_Hotel_Info");
	case SOAP_TYPE_PointerTo_tempuri__Get_USCOREHotel_USCOREListResponse:
		return soap_out_PointerTo_tempuri__Get_USCOREHotel_USCOREListResponse(soap, tag, id, (_tempuri__Get_USCOREHotel_USCOREListResponse *const*)ptr, "tempuri:Get_Hotel_ListResponse");
	case SOAP_TYPE_PointerTo_tempuri__Get_USCOREHotel_USCOREList:
		return soap_out_PointerTo_tempuri__Get_USCOREHotel_USCOREList(soap, tag, id, (_tempuri__Get_USCOREHotel_USCOREList *const*)ptr, "tempuri:Get_Hotel_List");
	case SOAP_TYPE_PointerToxsd__unsignedByte:
		return soap_out_PointerToxsd__unsignedByte(soap, tag, id, (unsigned char *const*)ptr, "xsd:unsignedByte");
	case SOAP_TYPE_PointerToint:
		return soap_out_PointerToint(soap, tag, id, (int *const*)ptr, "xsd:int");
	case SOAP_TYPE_PointerTostd__wstring:
		return soap_out_PointerTostd__wstring(soap, tag, id, (std::wstring *const*)ptr, "xsd:string");
	case SOAP_TYPE__QName:
		return soap_out_string(soap, tag, id, (char*const*)&ptr, "xsd:QName");
	case SOAP_TYPE_string:
		return soap_out_string(soap, tag, id, (char*const*)&ptr, "xsd:string");
	}
	return SOAP_OK;
}

#ifdef __cplusplus
}
#endif

#ifndef WITH_NOIDREF

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_markelement(struct soap *soap, const void *ptr, int type)
{
	(void)soap; (void)ptr; (void)type; /* appease -Wall -Werror */
	switch (type)
	{
	case SOAP_TYPE_std__wstring:
		soap_serialize_std__wstring(soap, (const std::wstring *)ptr);
		break;
	case SOAP_TYPE__tempuri__Get_USCOREOrder_USCOREListResponse:
		((_tempuri__Get_USCOREOrder_USCOREListResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__tempuri__Get_USCOREOrder_USCOREList:
		((_tempuri__Get_USCOREOrder_USCOREList *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__tempuri__Get_USCOREOrderResponse:
		((_tempuri__Get_USCOREOrderResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__tempuri__Get_USCOREOrder:
		((_tempuri__Get_USCOREOrder *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__tempuri__Book_USCOREApplyResponse:
		((_tempuri__Book_USCOREApplyResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__tempuri__Book_USCOREApply:
		((_tempuri__Book_USCOREApply *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__tempuri__Book_USCOREModify_USCOREPlusResponse:
		((_tempuri__Book_USCOREModify_USCOREPlusResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__tempuri__Book_USCOREModify_USCOREPlus:
		((_tempuri__Book_USCOREModify_USCOREPlus *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__tempuri__Book_USCOREModify_USCOREHotelResponse:
		((_tempuri__Book_USCOREModify_USCOREHotelResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__tempuri__Book_USCOREModify_USCOREHotel:
		((_tempuri__Book_USCOREModify_USCOREHotel *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__tempuri__Book_USCOREAddResponse:
		((_tempuri__Book_USCOREAddResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__tempuri__Book_USCOREAdd:
		((_tempuri__Book_USCOREAdd *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__tempuri__Get_USCOREHotel_USCORERoomStateResponse:
		((_tempuri__Get_USCOREHotel_USCORERoomStateResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__tempuri__Get_USCOREHotel_USCORERoomState:
		((_tempuri__Get_USCOREHotel_USCORERoomState *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__tempuri__Get_USCOREHotel_USCOREPriceResponse:
		((_tempuri__Get_USCOREHotel_USCOREPriceResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__tempuri__Get_USCOREHotel_USCOREPrice:
		((_tempuri__Get_USCOREHotel_USCOREPrice *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__tempuri__Get_USCOREHotel_USCOREInfoResponse:
		((_tempuri__Get_USCOREHotel_USCOREInfoResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__tempuri__Get_USCOREHotel_USCOREInfo:
		((_tempuri__Get_USCOREHotel_USCOREInfo *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__tempuri__Get_USCOREHotel_USCOREListResponse:
		((_tempuri__Get_USCOREHotel_USCOREListResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__tempuri__Get_USCOREHotel_USCOREList:
		((_tempuri__Get_USCOREHotel_USCOREList *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE___tempuri__Get_USCOREOrder_USCOREList:
		soap_serialize___tempuri__Get_USCOREOrder_USCOREList(soap, (const struct __tempuri__Get_USCOREOrder_USCOREList *)ptr);
		break;
	case SOAP_TYPE___tempuri__Get_USCOREOrder:
		soap_serialize___tempuri__Get_USCOREOrder(soap, (const struct __tempuri__Get_USCOREOrder *)ptr);
		break;
	case SOAP_TYPE___tempuri__Book_USCOREApply:
		soap_serialize___tempuri__Book_USCOREApply(soap, (const struct __tempuri__Book_USCOREApply *)ptr);
		break;
	case SOAP_TYPE___tempuri__Book_USCOREModify_USCOREPlus:
		soap_serialize___tempuri__Book_USCOREModify_USCOREPlus(soap, (const struct __tempuri__Book_USCOREModify_USCOREPlus *)ptr);
		break;
	case SOAP_TYPE___tempuri__Book_USCOREModify_USCOREHotel:
		soap_serialize___tempuri__Book_USCOREModify_USCOREHotel(soap, (const struct __tempuri__Book_USCOREModify_USCOREHotel *)ptr);
		break;
	case SOAP_TYPE___tempuri__Book_USCOREAdd:
		soap_serialize___tempuri__Book_USCOREAdd(soap, (const struct __tempuri__Book_USCOREAdd *)ptr);
		break;
	case SOAP_TYPE___tempuri__Get_USCOREHotel_USCORERoomState:
		soap_serialize___tempuri__Get_USCOREHotel_USCORERoomState(soap, (const struct __tempuri__Get_USCOREHotel_USCORERoomState *)ptr);
		break;
	case SOAP_TYPE___tempuri__Get_USCOREHotel_USCOREPrice:
		soap_serialize___tempuri__Get_USCOREHotel_USCOREPrice(soap, (const struct __tempuri__Get_USCOREHotel_USCOREPrice *)ptr);
		break;
	case SOAP_TYPE___tempuri__Get_USCOREHotel_USCOREInfo:
		soap_serialize___tempuri__Get_USCOREHotel_USCOREInfo(soap, (const struct __tempuri__Get_USCOREHotel_USCOREInfo *)ptr);
		break;
	case SOAP_TYPE___tempuri__Get_USCOREHotel_USCOREList:
		soap_serialize___tempuri__Get_USCOREHotel_USCOREList(soap, (const struct __tempuri__Get_USCOREHotel_USCOREList *)ptr);
		break;
	case SOAP_TYPE_PointerTo_tempuri__Get_USCOREOrder_USCOREListResponse:
		soap_serialize_PointerTo_tempuri__Get_USCOREOrder_USCOREListResponse(soap, (_tempuri__Get_USCOREOrder_USCOREListResponse *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_tempuri__Get_USCOREOrder_USCOREList:
		soap_serialize_PointerTo_tempuri__Get_USCOREOrder_USCOREList(soap, (_tempuri__Get_USCOREOrder_USCOREList *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_tempuri__Get_USCOREOrderResponse:
		soap_serialize_PointerTo_tempuri__Get_USCOREOrderResponse(soap, (_tempuri__Get_USCOREOrderResponse *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_tempuri__Get_USCOREOrder:
		soap_serialize_PointerTo_tempuri__Get_USCOREOrder(soap, (_tempuri__Get_USCOREOrder *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_tempuri__Book_USCOREApplyResponse:
		soap_serialize_PointerTo_tempuri__Book_USCOREApplyResponse(soap, (_tempuri__Book_USCOREApplyResponse *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_tempuri__Book_USCOREApply:
		soap_serialize_PointerTo_tempuri__Book_USCOREApply(soap, (_tempuri__Book_USCOREApply *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_tempuri__Book_USCOREModify_USCOREPlusResponse:
		soap_serialize_PointerTo_tempuri__Book_USCOREModify_USCOREPlusResponse(soap, (_tempuri__Book_USCOREModify_USCOREPlusResponse *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_tempuri__Book_USCOREModify_USCOREPlus:
		soap_serialize_PointerTo_tempuri__Book_USCOREModify_USCOREPlus(soap, (_tempuri__Book_USCOREModify_USCOREPlus *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_tempuri__Book_USCOREModify_USCOREHotelResponse:
		soap_serialize_PointerTo_tempuri__Book_USCOREModify_USCOREHotelResponse(soap, (_tempuri__Book_USCOREModify_USCOREHotelResponse *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_tempuri__Book_USCOREModify_USCOREHotel:
		soap_serialize_PointerTo_tempuri__Book_USCOREModify_USCOREHotel(soap, (_tempuri__Book_USCOREModify_USCOREHotel *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_tempuri__Book_USCOREAddResponse:
		soap_serialize_PointerTo_tempuri__Book_USCOREAddResponse(soap, (_tempuri__Book_USCOREAddResponse *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_tempuri__Book_USCOREAdd:
		soap_serialize_PointerTo_tempuri__Book_USCOREAdd(soap, (_tempuri__Book_USCOREAdd *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_tempuri__Get_USCOREHotel_USCORERoomStateResponse:
		soap_serialize_PointerTo_tempuri__Get_USCOREHotel_USCORERoomStateResponse(soap, (_tempuri__Get_USCOREHotel_USCORERoomStateResponse *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_tempuri__Get_USCOREHotel_USCORERoomState:
		soap_serialize_PointerTo_tempuri__Get_USCOREHotel_USCORERoomState(soap, (_tempuri__Get_USCOREHotel_USCORERoomState *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_tempuri__Get_USCOREHotel_USCOREPriceResponse:
		soap_serialize_PointerTo_tempuri__Get_USCOREHotel_USCOREPriceResponse(soap, (_tempuri__Get_USCOREHotel_USCOREPriceResponse *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_tempuri__Get_USCOREHotel_USCOREPrice:
		soap_serialize_PointerTo_tempuri__Get_USCOREHotel_USCOREPrice(soap, (_tempuri__Get_USCOREHotel_USCOREPrice *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_tempuri__Get_USCOREHotel_USCOREInfoResponse:
		soap_serialize_PointerTo_tempuri__Get_USCOREHotel_USCOREInfoResponse(soap, (_tempuri__Get_USCOREHotel_USCOREInfoResponse *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_tempuri__Get_USCOREHotel_USCOREInfo:
		soap_serialize_PointerTo_tempuri__Get_USCOREHotel_USCOREInfo(soap, (_tempuri__Get_USCOREHotel_USCOREInfo *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_tempuri__Get_USCOREHotel_USCOREListResponse:
		soap_serialize_PointerTo_tempuri__Get_USCOREHotel_USCOREListResponse(soap, (_tempuri__Get_USCOREHotel_USCOREListResponse *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_tempuri__Get_USCOREHotel_USCOREList:
		soap_serialize_PointerTo_tempuri__Get_USCOREHotel_USCOREList(soap, (_tempuri__Get_USCOREHotel_USCOREList *const*)ptr);
		break;
	case SOAP_TYPE_PointerToxsd__unsignedByte:
		soap_serialize_PointerToxsd__unsignedByte(soap, (unsigned char *const*)ptr);
		break;
	case SOAP_TYPE_PointerToint:
		soap_serialize_PointerToint(soap, (int *const*)ptr);
		break;
	case SOAP_TYPE_PointerTostd__wstring:
		soap_serialize_PointerTostd__wstring(soap, (std::wstring *const*)ptr);
		break;
	case SOAP_TYPE__QName:
		soap_serialize_string(soap, (char*const*)&ptr);
		break;
	case SOAP_TYPE_string:
		soap_serialize_string(soap, (char*const*)&ptr);
		break;
	}
}

#ifdef __cplusplus
}
#endif
#endif

SOAP_FMAC3 void * SOAP_FMAC4 soap_instantiate(struct soap *soap, int t, const char *type, const char *arrayType, size_t *n)
{	(void)type;
	switch (t)
	{
	case SOAP_TYPE_std__wstring:
		return (void*)soap_instantiate_std__wstring(soap, -1, type, arrayType, n);
	case SOAP_TYPE__tempuri__Get_USCOREHotel_USCOREList:
		return (void*)soap_instantiate__tempuri__Get_USCOREHotel_USCOREList(soap, -1, type, arrayType, n);
	case SOAP_TYPE__tempuri__Get_USCOREHotel_USCOREListResponse:
		return (void*)soap_instantiate__tempuri__Get_USCOREHotel_USCOREListResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE__tempuri__Get_USCOREHotel_USCOREInfo:
		return (void*)soap_instantiate__tempuri__Get_USCOREHotel_USCOREInfo(soap, -1, type, arrayType, n);
	case SOAP_TYPE__tempuri__Get_USCOREHotel_USCOREInfoResponse:
		return (void*)soap_instantiate__tempuri__Get_USCOREHotel_USCOREInfoResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE__tempuri__Get_USCOREHotel_USCOREPrice:
		return (void*)soap_instantiate__tempuri__Get_USCOREHotel_USCOREPrice(soap, -1, type, arrayType, n);
	case SOAP_TYPE__tempuri__Get_USCOREHotel_USCOREPriceResponse:
		return (void*)soap_instantiate__tempuri__Get_USCOREHotel_USCOREPriceResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE__tempuri__Get_USCOREHotel_USCORERoomState:
		return (void*)soap_instantiate__tempuri__Get_USCOREHotel_USCORERoomState(soap, -1, type, arrayType, n);
	case SOAP_TYPE__tempuri__Get_USCOREHotel_USCORERoomStateResponse:
		return (void*)soap_instantiate__tempuri__Get_USCOREHotel_USCORERoomStateResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE__tempuri__Book_USCOREAdd:
		return (void*)soap_instantiate__tempuri__Book_USCOREAdd(soap, -1, type, arrayType, n);
	case SOAP_TYPE__tempuri__Book_USCOREAddResponse:
		return (void*)soap_instantiate__tempuri__Book_USCOREAddResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE__tempuri__Book_USCOREModify_USCOREHotel:
		return (void*)soap_instantiate__tempuri__Book_USCOREModify_USCOREHotel(soap, -1, type, arrayType, n);
	case SOAP_TYPE__tempuri__Book_USCOREModify_USCOREHotelResponse:
		return (void*)soap_instantiate__tempuri__Book_USCOREModify_USCOREHotelResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE__tempuri__Book_USCOREModify_USCOREPlus:
		return (void*)soap_instantiate__tempuri__Book_USCOREModify_USCOREPlus(soap, -1, type, arrayType, n);
	case SOAP_TYPE__tempuri__Book_USCOREModify_USCOREPlusResponse:
		return (void*)soap_instantiate__tempuri__Book_USCOREModify_USCOREPlusResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE__tempuri__Book_USCOREApply:
		return (void*)soap_instantiate__tempuri__Book_USCOREApply(soap, -1, type, arrayType, n);
	case SOAP_TYPE__tempuri__Book_USCOREApplyResponse:
		return (void*)soap_instantiate__tempuri__Book_USCOREApplyResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE__tempuri__Get_USCOREOrder:
		return (void*)soap_instantiate__tempuri__Get_USCOREOrder(soap, -1, type, arrayType, n);
	case SOAP_TYPE__tempuri__Get_USCOREOrderResponse:
		return (void*)soap_instantiate__tempuri__Get_USCOREOrderResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE__tempuri__Get_USCOREOrder_USCOREList:
		return (void*)soap_instantiate__tempuri__Get_USCOREOrder_USCOREList(soap, -1, type, arrayType, n);
	case SOAP_TYPE__tempuri__Get_USCOREOrder_USCOREListResponse:
		return (void*)soap_instantiate__tempuri__Get_USCOREOrder_USCOREListResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE___tempuri__Get_USCOREHotel_USCOREList:
		return (void*)soap_instantiate___tempuri__Get_USCOREHotel_USCOREList(soap, -1, type, arrayType, n);
	case SOAP_TYPE___tempuri__Get_USCOREHotel_USCOREInfo:
		return (void*)soap_instantiate___tempuri__Get_USCOREHotel_USCOREInfo(soap, -1, type, arrayType, n);
	case SOAP_TYPE___tempuri__Get_USCOREHotel_USCOREPrice:
		return (void*)soap_instantiate___tempuri__Get_USCOREHotel_USCOREPrice(soap, -1, type, arrayType, n);
	case SOAP_TYPE___tempuri__Get_USCOREHotel_USCORERoomState:
		return (void*)soap_instantiate___tempuri__Get_USCOREHotel_USCORERoomState(soap, -1, type, arrayType, n);
	case SOAP_TYPE___tempuri__Book_USCOREAdd:
		return (void*)soap_instantiate___tempuri__Book_USCOREAdd(soap, -1, type, arrayType, n);
	case SOAP_TYPE___tempuri__Book_USCOREModify_USCOREHotel:
		return (void*)soap_instantiate___tempuri__Book_USCOREModify_USCOREHotel(soap, -1, type, arrayType, n);
	case SOAP_TYPE___tempuri__Book_USCOREModify_USCOREPlus:
		return (void*)soap_instantiate___tempuri__Book_USCOREModify_USCOREPlus(soap, -1, type, arrayType, n);
	case SOAP_TYPE___tempuri__Book_USCOREApply:
		return (void*)soap_instantiate___tempuri__Book_USCOREApply(soap, -1, type, arrayType, n);
	case SOAP_TYPE___tempuri__Get_USCOREOrder:
		return (void*)soap_instantiate___tempuri__Get_USCOREOrder(soap, -1, type, arrayType, n);
	case SOAP_TYPE___tempuri__Get_USCOREOrder_USCOREList:
		return (void*)soap_instantiate___tempuri__Get_USCOREOrder_USCOREList(soap, -1, type, arrayType, n);
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Header:
		return (void*)soap_instantiate_SOAP_ENV__Header(soap, -1, type, arrayType, n);
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Code:
		return (void*)soap_instantiate_SOAP_ENV__Code(soap, -1, type, arrayType, n);
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Detail:
		return (void*)soap_instantiate_SOAP_ENV__Detail(soap, -1, type, arrayType, n);
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Reason:
		return (void*)soap_instantiate_SOAP_ENV__Reason(soap, -1, type, arrayType, n);
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Fault:
		return (void*)soap_instantiate_SOAP_ENV__Fault(soap, -1, type, arrayType, n);
#endif
	}
	return NULL;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_fdelete(struct soap_clist *p)
{	switch (p->type)
	{
	case SOAP_TYPE_std__wstring:
		if (p->size < 0)
			SOAP_DELETE((std::wstring*)p->ptr);
		else
			SOAP_DELETE_ARRAY((std::wstring*)p->ptr);
		break;
	case SOAP_TYPE__tempuri__Get_USCOREHotel_USCOREList:
		if (p->size < 0)
			SOAP_DELETE((_tempuri__Get_USCOREHotel_USCOREList*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_tempuri__Get_USCOREHotel_USCOREList*)p->ptr);
		break;
	case SOAP_TYPE__tempuri__Get_USCOREHotel_USCOREListResponse:
		if (p->size < 0)
			SOAP_DELETE((_tempuri__Get_USCOREHotel_USCOREListResponse*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_tempuri__Get_USCOREHotel_USCOREListResponse*)p->ptr);
		break;
	case SOAP_TYPE__tempuri__Get_USCOREHotel_USCOREInfo:
		if (p->size < 0)
			SOAP_DELETE((_tempuri__Get_USCOREHotel_USCOREInfo*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_tempuri__Get_USCOREHotel_USCOREInfo*)p->ptr);
		break;
	case SOAP_TYPE__tempuri__Get_USCOREHotel_USCOREInfoResponse:
		if (p->size < 0)
			SOAP_DELETE((_tempuri__Get_USCOREHotel_USCOREInfoResponse*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_tempuri__Get_USCOREHotel_USCOREInfoResponse*)p->ptr);
		break;
	case SOAP_TYPE__tempuri__Get_USCOREHotel_USCOREPrice:
		if (p->size < 0)
			SOAP_DELETE((_tempuri__Get_USCOREHotel_USCOREPrice*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_tempuri__Get_USCOREHotel_USCOREPrice*)p->ptr);
		break;
	case SOAP_TYPE__tempuri__Get_USCOREHotel_USCOREPriceResponse:
		if (p->size < 0)
			SOAP_DELETE((_tempuri__Get_USCOREHotel_USCOREPriceResponse*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_tempuri__Get_USCOREHotel_USCOREPriceResponse*)p->ptr);
		break;
	case SOAP_TYPE__tempuri__Get_USCOREHotel_USCORERoomState:
		if (p->size < 0)
			SOAP_DELETE((_tempuri__Get_USCOREHotel_USCORERoomState*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_tempuri__Get_USCOREHotel_USCORERoomState*)p->ptr);
		break;
	case SOAP_TYPE__tempuri__Get_USCOREHotel_USCORERoomStateResponse:
		if (p->size < 0)
			SOAP_DELETE((_tempuri__Get_USCOREHotel_USCORERoomStateResponse*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_tempuri__Get_USCOREHotel_USCORERoomStateResponse*)p->ptr);
		break;
	case SOAP_TYPE__tempuri__Book_USCOREAdd:
		if (p->size < 0)
			SOAP_DELETE((_tempuri__Book_USCOREAdd*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_tempuri__Book_USCOREAdd*)p->ptr);
		break;
	case SOAP_TYPE__tempuri__Book_USCOREAddResponse:
		if (p->size < 0)
			SOAP_DELETE((_tempuri__Book_USCOREAddResponse*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_tempuri__Book_USCOREAddResponse*)p->ptr);
		break;
	case SOAP_TYPE__tempuri__Book_USCOREModify_USCOREHotel:
		if (p->size < 0)
			SOAP_DELETE((_tempuri__Book_USCOREModify_USCOREHotel*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_tempuri__Book_USCOREModify_USCOREHotel*)p->ptr);
		break;
	case SOAP_TYPE__tempuri__Book_USCOREModify_USCOREHotelResponse:
		if (p->size < 0)
			SOAP_DELETE((_tempuri__Book_USCOREModify_USCOREHotelResponse*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_tempuri__Book_USCOREModify_USCOREHotelResponse*)p->ptr);
		break;
	case SOAP_TYPE__tempuri__Book_USCOREModify_USCOREPlus:
		if (p->size < 0)
			SOAP_DELETE((_tempuri__Book_USCOREModify_USCOREPlus*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_tempuri__Book_USCOREModify_USCOREPlus*)p->ptr);
		break;
	case SOAP_TYPE__tempuri__Book_USCOREModify_USCOREPlusResponse:
		if (p->size < 0)
			SOAP_DELETE((_tempuri__Book_USCOREModify_USCOREPlusResponse*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_tempuri__Book_USCOREModify_USCOREPlusResponse*)p->ptr);
		break;
	case SOAP_TYPE__tempuri__Book_USCOREApply:
		if (p->size < 0)
			SOAP_DELETE((_tempuri__Book_USCOREApply*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_tempuri__Book_USCOREApply*)p->ptr);
		break;
	case SOAP_TYPE__tempuri__Book_USCOREApplyResponse:
		if (p->size < 0)
			SOAP_DELETE((_tempuri__Book_USCOREApplyResponse*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_tempuri__Book_USCOREApplyResponse*)p->ptr);
		break;
	case SOAP_TYPE__tempuri__Get_USCOREOrder:
		if (p->size < 0)
			SOAP_DELETE((_tempuri__Get_USCOREOrder*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_tempuri__Get_USCOREOrder*)p->ptr);
		break;
	case SOAP_TYPE__tempuri__Get_USCOREOrderResponse:
		if (p->size < 0)
			SOAP_DELETE((_tempuri__Get_USCOREOrderResponse*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_tempuri__Get_USCOREOrderResponse*)p->ptr);
		break;
	case SOAP_TYPE__tempuri__Get_USCOREOrder_USCOREList:
		if (p->size < 0)
			SOAP_DELETE((_tempuri__Get_USCOREOrder_USCOREList*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_tempuri__Get_USCOREOrder_USCOREList*)p->ptr);
		break;
	case SOAP_TYPE__tempuri__Get_USCOREOrder_USCOREListResponse:
		if (p->size < 0)
			SOAP_DELETE((_tempuri__Get_USCOREOrder_USCOREListResponse*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_tempuri__Get_USCOREOrder_USCOREListResponse*)p->ptr);
		break;
	case SOAP_TYPE___tempuri__Get_USCOREHotel_USCOREList:
		if (p->size < 0)
			SOAP_DELETE((struct __tempuri__Get_USCOREHotel_USCOREList*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct __tempuri__Get_USCOREHotel_USCOREList*)p->ptr);
		break;
	case SOAP_TYPE___tempuri__Get_USCOREHotel_USCOREInfo:
		if (p->size < 0)
			SOAP_DELETE((struct __tempuri__Get_USCOREHotel_USCOREInfo*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct __tempuri__Get_USCOREHotel_USCOREInfo*)p->ptr);
		break;
	case SOAP_TYPE___tempuri__Get_USCOREHotel_USCOREPrice:
		if (p->size < 0)
			SOAP_DELETE((struct __tempuri__Get_USCOREHotel_USCOREPrice*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct __tempuri__Get_USCOREHotel_USCOREPrice*)p->ptr);
		break;
	case SOAP_TYPE___tempuri__Get_USCOREHotel_USCORERoomState:
		if (p->size < 0)
			SOAP_DELETE((struct __tempuri__Get_USCOREHotel_USCORERoomState*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct __tempuri__Get_USCOREHotel_USCORERoomState*)p->ptr);
		break;
	case SOAP_TYPE___tempuri__Book_USCOREAdd:
		if (p->size < 0)
			SOAP_DELETE((struct __tempuri__Book_USCOREAdd*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct __tempuri__Book_USCOREAdd*)p->ptr);
		break;
	case SOAP_TYPE___tempuri__Book_USCOREModify_USCOREHotel:
		if (p->size < 0)
			SOAP_DELETE((struct __tempuri__Book_USCOREModify_USCOREHotel*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct __tempuri__Book_USCOREModify_USCOREHotel*)p->ptr);
		break;
	case SOAP_TYPE___tempuri__Book_USCOREModify_USCOREPlus:
		if (p->size < 0)
			SOAP_DELETE((struct __tempuri__Book_USCOREModify_USCOREPlus*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct __tempuri__Book_USCOREModify_USCOREPlus*)p->ptr);
		break;
	case SOAP_TYPE___tempuri__Book_USCOREApply:
		if (p->size < 0)
			SOAP_DELETE((struct __tempuri__Book_USCOREApply*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct __tempuri__Book_USCOREApply*)p->ptr);
		break;
	case SOAP_TYPE___tempuri__Get_USCOREOrder:
		if (p->size < 0)
			SOAP_DELETE((struct __tempuri__Get_USCOREOrder*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct __tempuri__Get_USCOREOrder*)p->ptr);
		break;
	case SOAP_TYPE___tempuri__Get_USCOREOrder_USCOREList:
		if (p->size < 0)
			SOAP_DELETE((struct __tempuri__Get_USCOREOrder_USCOREList*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct __tempuri__Get_USCOREOrder_USCOREList*)p->ptr);
		break;
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Header:
		if (p->size < 0)
			SOAP_DELETE((struct SOAP_ENV__Header*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct SOAP_ENV__Header*)p->ptr);
		break;
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Code:
		if (p->size < 0)
			SOAP_DELETE((struct SOAP_ENV__Code*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct SOAP_ENV__Code*)p->ptr);
		break;
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Detail:
		if (p->size < 0)
			SOAP_DELETE((struct SOAP_ENV__Detail*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct SOAP_ENV__Detail*)p->ptr);
		break;
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Reason:
		if (p->size < 0)
			SOAP_DELETE((struct SOAP_ENV__Reason*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct SOAP_ENV__Reason*)p->ptr);
		break;
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Fault:
		if (p->size < 0)
			SOAP_DELETE((struct SOAP_ENV__Fault*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct SOAP_ENV__Fault*)p->ptr);
		break;
#endif
	default:	return SOAP_ERR;
	}
	return SOAP_OK;
}

SOAP_FMAC3 void* SOAP_FMAC4 soap_class_id_enter(struct soap *soap, const char *id, void *p, int t, size_t n, const char *type, const char *arrayType)
{	return soap_id_enter(soap, id, p, t, n, 0, type, arrayType, soap_instantiate);
}

SOAP_FMAC3 void* SOAP_FMAC4 soap_container_id_forward(struct soap *soap, const char *href, void *p, size_t len, int st, int tt, size_t n, unsigned int k)
{	return soap_id_forward(soap, href, p, len, st, tt, n, k, soap_container_insert);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_container_insert(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
#ifdef WIN32
#pragma warning(push)
#pragma warning(disable:4065)
#endif
{
	(void)soap; (void)st; (void)p; (void)len; (void)q; (void)n; /* appease -Wall -Werror */
	switch (tt)
	{
	default:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Could not insert type=%d in %d\n", st, tt));
	}
#ifdef WIN32
#pragma warning(pop)
#endif
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_byte(struct soap *soap, char *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_byte
	*a = SOAP_DEFAULT_byte;
#else
	*a = (char)0;
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_byte(struct soap *soap, const char *tag, int id, const char *a, const char *type)
{	(void)soap; (void)type; (void)tag; (void)id;
	return soap_outbyte(soap, tag, id, a, type, SOAP_TYPE_byte);
}

SOAP_FMAC3 char * SOAP_FMAC4 soap_in_byte(struct soap *soap, const char *tag, char *a, const char *type)
{	char *p;
	p = soap_inbyte(soap, tag, a, type, SOAP_TYPE_byte);
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_byte(struct soap *soap, const char *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_byte);
	if (soap_out_byte(soap, tag?tag:"byte", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 char * SOAP_FMAC4 soap_get_byte(struct soap *soap, char *p, const char *tag, const char *type)
{
	if ((p = soap_in_byte(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_int(struct soap *soap, int *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_int
	*a = SOAP_DEFAULT_int;
#else
	*a = (int)0;
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_int(struct soap *soap, const char *tag, int id, const int *a, const char *type)
{	(void)soap; (void)type; (void)tag; (void)id;
	return soap_outint(soap, tag, id, a, type, SOAP_TYPE_int);
}

SOAP_FMAC3 int * SOAP_FMAC4 soap_in_int(struct soap *soap, const char *tag, int *a, const char *type)
{	int *p;
	p = soap_inint(soap, tag, a, type, SOAP_TYPE_int);
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_int(struct soap *soap, const int *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_int);
	if (soap_out_int(soap, tag?tag:"int", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int * SOAP_FMAC4 soap_get_int(struct soap *soap, int *p, const char *tag, const char *type)
{
	if ((p = soap_in_int(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__unsignedByte(struct soap *soap, const char *tag, int id, const unsigned char *a, const char *type)
{	(void)soap; (void)type; (void)tag; (void)id;
	return soap_outunsignedByte(soap, tag, id, a, type, SOAP_TYPE_xsd__unsignedByte);
}

SOAP_FMAC3 unsigned char * SOAP_FMAC4 soap_in_xsd__unsignedByte(struct soap *soap, const char *tag, unsigned char *a, const char *type)
{	unsigned char *p;
	p = soap_inunsignedByte(soap, tag, a, type, SOAP_TYPE_xsd__unsignedByte);
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_xsd__unsignedByte(struct soap *soap, const unsigned char *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_xsd__unsignedByte);
	if (soap_out_xsd__unsignedByte(soap, tag?tag:"xsd:unsignedByte", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 unsigned char * SOAP_FMAC4 soap_get_xsd__unsignedByte(struct soap *soap, unsigned char *p, const char *tag, const char *type)
{
	if ((p = soap_in_xsd__unsignedByte(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_unsignedByte(struct soap *soap, unsigned char *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_unsignedByte
	*a = SOAP_DEFAULT_unsignedByte;
#else
	*a = (unsigned char)0;
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_unsignedByte(struct soap *soap, const char *tag, int id, const unsigned char *a, const char *type)
{	(void)soap; (void)type; (void)tag; (void)id;
	return soap_outunsignedByte(soap, tag, id, a, type, SOAP_TYPE_unsignedByte);
}

SOAP_FMAC3 unsigned char * SOAP_FMAC4 soap_in_unsignedByte(struct soap *soap, const char *tag, unsigned char *a, const char *type)
{	unsigned char *p;
	p = soap_inunsignedByte(soap, tag, a, type, SOAP_TYPE_unsignedByte);
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_unsignedByte(struct soap *soap, const unsigned char *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_unsignedByte);
	if (soap_out_unsignedByte(soap, tag?tag:"unsignedByte", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 unsigned char * SOAP_FMAC4 soap_get_unsignedByte(struct soap *soap, unsigned char *p, const char *tag, const char *type)
{
	if ((p = soap_in_unsignedByte(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_unsignedInt(struct soap *soap, unsigned int *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_unsignedInt
	*a = SOAP_DEFAULT_unsignedInt;
#else
	*a = (unsigned int)0;
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_unsignedInt(struct soap *soap, const char *tag, int id, const unsigned int *a, const char *type)
{	(void)soap; (void)type; (void)tag; (void)id;
	return soap_outunsignedInt(soap, tag, id, a, type, SOAP_TYPE_unsignedInt);
}

SOAP_FMAC3 unsigned int * SOAP_FMAC4 soap_in_unsignedInt(struct soap *soap, const char *tag, unsigned int *a, const char *type)
{	unsigned int *p;
	p = soap_inunsignedInt(soap, tag, a, type, SOAP_TYPE_unsignedInt);
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_unsignedInt(struct soap *soap, const unsigned int *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_unsignedInt);
	if (soap_out_unsignedInt(soap, tag?tag:"unsignedInt", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 unsigned int * SOAP_FMAC4 soap_get_unsignedInt(struct soap *soap, unsigned int *p, const char *tag, const char *type)
{
	if ((p = soap_in_unsignedInt(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__wstring(struct soap *soap, std::wstring *p)
{
	(void)soap; /* appease -Wall -Werror */
	p->erase();
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__wstring(struct soap *soap, const std::wstring *a)
{	(void)soap; (void)a; /* appease -Wall -Werror */
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__wstring(struct soap *soap, const char *tag, int id, const std::wstring *s, const char *type)
{
	if ((soap->mode & SOAP_C_NILSTRING) && s->empty())
		return soap_element_null(soap, tag, id, type);
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, s, SOAP_TYPE_std__wstring), type) || soap_wstring_out(soap, s->c_str(), 0) || soap_element_end_out(soap, tag))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 std::wstring * SOAP_FMAC4 soap_in_std__wstring(struct soap *soap, const char *tag, std::wstring *s, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!s)
		s = soap_new_std__wstring(soap, -1);
	if (soap->null)
		if (s)
			s->erase();
	if (soap->body && !*soap->href)
	{	wchar_t *t;
		s = (std::wstring*)soap_class_id_enter(soap, soap->id, s, SOAP_TYPE_std__wstring, sizeof(std::wstring), soap->type, soap->arrayType);
		if (s)
		{	if (!(t = soap_wstring_in(soap, 1, 0, -1)))
				return NULL;
			s->assign(t);
		}
	}
	else
		s = (std::wstring*)soap_id_forward(soap, soap->href, soap_class_id_enter(soap, soap->id, s, SOAP_TYPE_std__wstring, sizeof(std::wstring), soap->type, soap->arrayType), 0, SOAP_TYPE_std__wstring, 0, sizeof(std::wstring), 0, soap_copy_std__wstring);
	if (soap->body && soap_element_end_in(soap, tag))
		return NULL;
	return s;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_std__wstring(struct soap *soap, const std::wstring *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_std__wstring);
	if (soap_out_std__wstring(soap, tag?tag:"string", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 std::wstring * SOAP_FMAC4 soap_get_std__wstring(struct soap *soap, std::wstring *p, const char *tag, const char *type)
{
	if ((p = soap_in_std__wstring(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 std::wstring * SOAP_FMAC2 soap_instantiate_std__wstring(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_std__wstring(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_std__wstring, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(std::wstring);
		if (size)
			*size = sizeof(std::wstring);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(std::wstring, n);
		if (size)
			*size = n * sizeof(std::wstring);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (std::wstring*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__wstring(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying std::wstring %p -> %p\n", q, p));
	*(std::wstring*)p = *(std::wstring*)q;
}

void _tempuri__Get_USCOREOrder_USCOREListResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_tempuri__Get_USCOREOrder_USCOREListResponse::Get_USCOREOrder_USCOREListResult = NULL;
	/* transient soap skipped */
}

void _tempuri__Get_USCOREOrder_USCOREListResponse::soap_serialize(struct soap *soap) const
{
#ifndef WITH_NOIDREF
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_PointerTostd__wstring(soap, &this->_tempuri__Get_USCOREOrder_USCOREListResponse::Get_USCOREOrder_USCOREListResult);
	/* transient soap skipped */
#endif
}

int _tempuri__Get_USCOREOrder_USCOREListResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__tempuri__Get_USCOREOrder_USCOREListResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__tempuri__Get_USCOREOrder_USCOREListResponse(struct soap *soap, const char *tag, int id, const _tempuri__Get_USCOREOrder_USCOREListResponse *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__tempuri__Get_USCOREOrder_USCOREListResponse), type))
		return soap->error;
	if (a->Get_USCOREOrder_USCOREListResult)
		soap_element_result(soap, "tempuri:Get_Order_ListResult");
	if (soap_out_PointerTostd__wstring(soap, "tempuri:Get_Order_ListResult", -1, &(a->_tempuri__Get_USCOREOrder_USCOREListResponse::Get_USCOREOrder_USCOREListResult), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_tempuri__Get_USCOREOrder_USCOREListResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__tempuri__Get_USCOREOrder_USCOREListResponse(soap, tag, this, type);
}

SOAP_FMAC3 _tempuri__Get_USCOREOrder_USCOREListResponse * SOAP_FMAC4 soap_in__tempuri__Get_USCOREOrder_USCOREListResponse(struct soap *soap, const char *tag, _tempuri__Get_USCOREOrder_USCOREListResponse *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_tempuri__Get_USCOREOrder_USCOREListResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__tempuri__Get_USCOREOrder_USCOREListResponse, sizeof(_tempuri__Get_USCOREOrder_USCOREListResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__tempuri__Get_USCOREOrder_USCOREListResponse)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_tempuri__Get_USCOREOrder_USCOREListResponse *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_Get_USCOREOrder_USCOREListResult1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_Get_USCOREOrder_USCOREListResult1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__wstring(soap, "tempuri:Get_Order_ListResult", &(a->_tempuri__Get_USCOREOrder_USCOREListResponse::Get_USCOREOrder_USCOREListResult), "xsd:string"))
				{	soap_flag_Get_USCOREOrder_USCOREListResult1--;
					continue;
				}
			/* transient soap skipped */
			soap_check_result(soap, "tempuri:Get_Order_ListResult");
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_tempuri__Get_USCOREOrder_USCOREListResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__tempuri__Get_USCOREOrder_USCOREListResponse, 0, sizeof(_tempuri__Get_USCOREOrder_USCOREListResponse), 0, soap_copy__tempuri__Get_USCOREOrder_USCOREListResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int _tempuri__Get_USCOREOrder_USCOREListResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE__tempuri__Get_USCOREOrder_USCOREListResponse);
	if (this->soap_out(soap, tag?tag:"tempuri:Get_Order_ListResponse", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_tempuri__Get_USCOREOrder_USCOREListResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__tempuri__Get_USCOREOrder_USCOREListResponse(soap, this, tag, type);
}

SOAP_FMAC3 _tempuri__Get_USCOREOrder_USCOREListResponse * SOAP_FMAC4 soap_get__tempuri__Get_USCOREOrder_USCOREListResponse(struct soap *soap, _tempuri__Get_USCOREOrder_USCOREListResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in__tempuri__Get_USCOREOrder_USCOREListResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _tempuri__Get_USCOREOrder_USCOREListResponse * SOAP_FMAC2 soap_instantiate__tempuri__Get_USCOREOrder_USCOREListResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__tempuri__Get_USCOREOrder_USCOREListResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__tempuri__Get_USCOREOrder_USCOREListResponse, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_tempuri__Get_USCOREOrder_USCOREListResponse);
		if (size)
			*size = sizeof(_tempuri__Get_USCOREOrder_USCOREListResponse);
		((_tempuri__Get_USCOREOrder_USCOREListResponse*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(_tempuri__Get_USCOREOrder_USCOREListResponse, n);
		if (size)
			*size = n * sizeof(_tempuri__Get_USCOREOrder_USCOREListResponse);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((_tempuri__Get_USCOREOrder_USCOREListResponse*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (_tempuri__Get_USCOREOrder_USCOREListResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__tempuri__Get_USCOREOrder_USCOREListResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _tempuri__Get_USCOREOrder_USCOREListResponse %p -> %p\n", q, p));
	*(_tempuri__Get_USCOREOrder_USCOREListResponse*)p = *(_tempuri__Get_USCOREOrder_USCOREListResponse*)q;
}

void _tempuri__Get_USCOREOrder_USCOREList::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_tempuri__Get_USCOREOrder_USCOREList::CustomerID = NULL;
	this->_tempuri__Get_USCOREOrder_USCOREList::SignStr = NULL;
	this->_tempuri__Get_USCOREOrder_USCOREList::DateType = NULL;
	this->_tempuri__Get_USCOREOrder_USCOREList::StartDate = NULL;
	this->_tempuri__Get_USCOREOrder_USCOREList::EndDate = NULL;
	this->_tempuri__Get_USCOREOrder_USCOREList::page = NULL;
	/* transient soap skipped */
}

void _tempuri__Get_USCOREOrder_USCOREList::soap_serialize(struct soap *soap) const
{
#ifndef WITH_NOIDREF
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_PointerTostd__wstring(soap, &this->_tempuri__Get_USCOREOrder_USCOREList::CustomerID);
	soap_serialize_PointerTostd__wstring(soap, &this->_tempuri__Get_USCOREOrder_USCOREList::SignStr);
	soap_serialize_PointerToxsd__unsignedByte(soap, &this->_tempuri__Get_USCOREOrder_USCOREList::DateType);
	soap_serialize_PointerTostd__wstring(soap, &this->_tempuri__Get_USCOREOrder_USCOREList::StartDate);
	soap_serialize_PointerTostd__wstring(soap, &this->_tempuri__Get_USCOREOrder_USCOREList::EndDate);
	soap_serialize_PointerToint(soap, &this->_tempuri__Get_USCOREOrder_USCOREList::page);
	/* transient soap skipped */
#endif
}

int _tempuri__Get_USCOREOrder_USCOREList::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__tempuri__Get_USCOREOrder_USCOREList(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__tempuri__Get_USCOREOrder_USCOREList(struct soap *soap, const char *tag, int id, const _tempuri__Get_USCOREOrder_USCOREList *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__tempuri__Get_USCOREOrder_USCOREList), type))
		return soap->error;
	if (soap_out_PointerTostd__wstring(soap, "tempuri:CustomerID", -1, &(a->_tempuri__Get_USCOREOrder_USCOREList::CustomerID), ""))
		return soap->error;
	if (soap_out_PointerTostd__wstring(soap, "tempuri:SignStr", -1, &(a->_tempuri__Get_USCOREOrder_USCOREList::SignStr), ""))
		return soap->error;
	if (soap_out_PointerToxsd__unsignedByte(soap, "tempuri:DateType", -1, &(a->_tempuri__Get_USCOREOrder_USCOREList::DateType), ""))
		return soap->error;
	if (soap_out_PointerTostd__wstring(soap, "tempuri:StartDate", -1, &(a->_tempuri__Get_USCOREOrder_USCOREList::StartDate), ""))
		return soap->error;
	if (soap_out_PointerTostd__wstring(soap, "tempuri:EndDate", -1, &(a->_tempuri__Get_USCOREOrder_USCOREList::EndDate), ""))
		return soap->error;
	if (soap_out_PointerToint(soap, "tempuri:page", -1, &(a->_tempuri__Get_USCOREOrder_USCOREList::page), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_tempuri__Get_USCOREOrder_USCOREList::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__tempuri__Get_USCOREOrder_USCOREList(soap, tag, this, type);
}

SOAP_FMAC3 _tempuri__Get_USCOREOrder_USCOREList * SOAP_FMAC4 soap_in__tempuri__Get_USCOREOrder_USCOREList(struct soap *soap, const char *tag, _tempuri__Get_USCOREOrder_USCOREList *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_tempuri__Get_USCOREOrder_USCOREList *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__tempuri__Get_USCOREOrder_USCOREList, sizeof(_tempuri__Get_USCOREOrder_USCOREList), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__tempuri__Get_USCOREOrder_USCOREList)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_tempuri__Get_USCOREOrder_USCOREList *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_CustomerID1 = 1;
	size_t soap_flag_SignStr1 = 1;
	size_t soap_flag_DateType1 = 1;
	size_t soap_flag_StartDate1 = 1;
	size_t soap_flag_EndDate1 = 1;
	size_t soap_flag_page1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_CustomerID1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__wstring(soap, "tempuri:CustomerID", &(a->_tempuri__Get_USCOREOrder_USCOREList::CustomerID), "xsd:string"))
				{	soap_flag_CustomerID1--;
					continue;
				}
			if (soap_flag_SignStr1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__wstring(soap, "tempuri:SignStr", &(a->_tempuri__Get_USCOREOrder_USCOREList::SignStr), "xsd:string"))
				{	soap_flag_SignStr1--;
					continue;
				}
			if (soap_flag_DateType1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToxsd__unsignedByte(soap, "tempuri:DateType", &(a->_tempuri__Get_USCOREOrder_USCOREList::DateType), "xsd:unsignedByte"))
				{	soap_flag_DateType1--;
					continue;
				}
			if (soap_flag_StartDate1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__wstring(soap, "tempuri:StartDate", &(a->_tempuri__Get_USCOREOrder_USCOREList::StartDate), "xsd:string"))
				{	soap_flag_StartDate1--;
					continue;
				}
			if (soap_flag_EndDate1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__wstring(soap, "tempuri:EndDate", &(a->_tempuri__Get_USCOREOrder_USCOREList::EndDate), "xsd:string"))
				{	soap_flag_EndDate1--;
					continue;
				}
			if (soap_flag_page1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToint(soap, "tempuri:page", &(a->_tempuri__Get_USCOREOrder_USCOREList::page), "xsd:int"))
				{	soap_flag_page1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_tempuri__Get_USCOREOrder_USCOREList *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__tempuri__Get_USCOREOrder_USCOREList, 0, sizeof(_tempuri__Get_USCOREOrder_USCOREList), 0, soap_copy__tempuri__Get_USCOREOrder_USCOREList);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int _tempuri__Get_USCOREOrder_USCOREList::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE__tempuri__Get_USCOREOrder_USCOREList);
	if (this->soap_out(soap, tag?tag:"tempuri:Get_Order_List", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_tempuri__Get_USCOREOrder_USCOREList::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__tempuri__Get_USCOREOrder_USCOREList(soap, this, tag, type);
}

SOAP_FMAC3 _tempuri__Get_USCOREOrder_USCOREList * SOAP_FMAC4 soap_get__tempuri__Get_USCOREOrder_USCOREList(struct soap *soap, _tempuri__Get_USCOREOrder_USCOREList *p, const char *tag, const char *type)
{
	if ((p = soap_in__tempuri__Get_USCOREOrder_USCOREList(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _tempuri__Get_USCOREOrder_USCOREList * SOAP_FMAC2 soap_instantiate__tempuri__Get_USCOREOrder_USCOREList(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__tempuri__Get_USCOREOrder_USCOREList(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__tempuri__Get_USCOREOrder_USCOREList, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_tempuri__Get_USCOREOrder_USCOREList);
		if (size)
			*size = sizeof(_tempuri__Get_USCOREOrder_USCOREList);
		((_tempuri__Get_USCOREOrder_USCOREList*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(_tempuri__Get_USCOREOrder_USCOREList, n);
		if (size)
			*size = n * sizeof(_tempuri__Get_USCOREOrder_USCOREList);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((_tempuri__Get_USCOREOrder_USCOREList*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (_tempuri__Get_USCOREOrder_USCOREList*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__tempuri__Get_USCOREOrder_USCOREList(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _tempuri__Get_USCOREOrder_USCOREList %p -> %p\n", q, p));
	*(_tempuri__Get_USCOREOrder_USCOREList*)p = *(_tempuri__Get_USCOREOrder_USCOREList*)q;
}

void _tempuri__Get_USCOREOrderResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_tempuri__Get_USCOREOrderResponse::Get_USCOREOrderResult = NULL;
	/* transient soap skipped */
}

void _tempuri__Get_USCOREOrderResponse::soap_serialize(struct soap *soap) const
{
#ifndef WITH_NOIDREF
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_PointerTostd__wstring(soap, &this->_tempuri__Get_USCOREOrderResponse::Get_USCOREOrderResult);
	/* transient soap skipped */
#endif
}

int _tempuri__Get_USCOREOrderResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__tempuri__Get_USCOREOrderResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__tempuri__Get_USCOREOrderResponse(struct soap *soap, const char *tag, int id, const _tempuri__Get_USCOREOrderResponse *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__tempuri__Get_USCOREOrderResponse), type))
		return soap->error;
	if (a->Get_USCOREOrderResult)
		soap_element_result(soap, "tempuri:Get_OrderResult");
	if (soap_out_PointerTostd__wstring(soap, "tempuri:Get_OrderResult", -1, &(a->_tempuri__Get_USCOREOrderResponse::Get_USCOREOrderResult), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_tempuri__Get_USCOREOrderResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__tempuri__Get_USCOREOrderResponse(soap, tag, this, type);
}

SOAP_FMAC3 _tempuri__Get_USCOREOrderResponse * SOAP_FMAC4 soap_in__tempuri__Get_USCOREOrderResponse(struct soap *soap, const char *tag, _tempuri__Get_USCOREOrderResponse *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_tempuri__Get_USCOREOrderResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__tempuri__Get_USCOREOrderResponse, sizeof(_tempuri__Get_USCOREOrderResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__tempuri__Get_USCOREOrderResponse)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_tempuri__Get_USCOREOrderResponse *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_Get_USCOREOrderResult1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_Get_USCOREOrderResult1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__wstring(soap, "tempuri:Get_OrderResult", &(a->_tempuri__Get_USCOREOrderResponse::Get_USCOREOrderResult), "xsd:string"))
				{	soap_flag_Get_USCOREOrderResult1--;
					continue;
				}
			/* transient soap skipped */
			soap_check_result(soap, "tempuri:Get_OrderResult");
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_tempuri__Get_USCOREOrderResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__tempuri__Get_USCOREOrderResponse, 0, sizeof(_tempuri__Get_USCOREOrderResponse), 0, soap_copy__tempuri__Get_USCOREOrderResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int _tempuri__Get_USCOREOrderResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE__tempuri__Get_USCOREOrderResponse);
	if (this->soap_out(soap, tag?tag:"tempuri:Get_OrderResponse", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_tempuri__Get_USCOREOrderResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__tempuri__Get_USCOREOrderResponse(soap, this, tag, type);
}

SOAP_FMAC3 _tempuri__Get_USCOREOrderResponse * SOAP_FMAC4 soap_get__tempuri__Get_USCOREOrderResponse(struct soap *soap, _tempuri__Get_USCOREOrderResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in__tempuri__Get_USCOREOrderResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _tempuri__Get_USCOREOrderResponse * SOAP_FMAC2 soap_instantiate__tempuri__Get_USCOREOrderResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__tempuri__Get_USCOREOrderResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__tempuri__Get_USCOREOrderResponse, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_tempuri__Get_USCOREOrderResponse);
		if (size)
			*size = sizeof(_tempuri__Get_USCOREOrderResponse);
		((_tempuri__Get_USCOREOrderResponse*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(_tempuri__Get_USCOREOrderResponse, n);
		if (size)
			*size = n * sizeof(_tempuri__Get_USCOREOrderResponse);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((_tempuri__Get_USCOREOrderResponse*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (_tempuri__Get_USCOREOrderResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__tempuri__Get_USCOREOrderResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _tempuri__Get_USCOREOrderResponse %p -> %p\n", q, p));
	*(_tempuri__Get_USCOREOrderResponse*)p = *(_tempuri__Get_USCOREOrderResponse*)q;
}

void _tempuri__Get_USCOREOrder::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_tempuri__Get_USCOREOrder::CustomerID = NULL;
	this->_tempuri__Get_USCOREOrder::SignStr = NULL;
	this->_tempuri__Get_USCOREOrder::OrderType = NULL;
	this->_tempuri__Get_USCOREOrder::OrderID = NULL;
	/* transient soap skipped */
}

void _tempuri__Get_USCOREOrder::soap_serialize(struct soap *soap) const
{
#ifndef WITH_NOIDREF
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_PointerTostd__wstring(soap, &this->_tempuri__Get_USCOREOrder::CustomerID);
	soap_serialize_PointerTostd__wstring(soap, &this->_tempuri__Get_USCOREOrder::SignStr);
	soap_serialize_PointerToxsd__unsignedByte(soap, &this->_tempuri__Get_USCOREOrder::OrderType);
	soap_serialize_PointerTostd__wstring(soap, &this->_tempuri__Get_USCOREOrder::OrderID);
	/* transient soap skipped */
#endif
}

int _tempuri__Get_USCOREOrder::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__tempuri__Get_USCOREOrder(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__tempuri__Get_USCOREOrder(struct soap *soap, const char *tag, int id, const _tempuri__Get_USCOREOrder *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__tempuri__Get_USCOREOrder), type))
		return soap->error;
	if (soap_out_PointerTostd__wstring(soap, "tempuri:CustomerID", -1, &(a->_tempuri__Get_USCOREOrder::CustomerID), ""))
		return soap->error;
	if (soap_out_PointerTostd__wstring(soap, "tempuri:SignStr", -1, &(a->_tempuri__Get_USCOREOrder::SignStr), ""))
		return soap->error;
	if (soap_out_PointerToxsd__unsignedByte(soap, "tempuri:OrderType", -1, &(a->_tempuri__Get_USCOREOrder::OrderType), ""))
		return soap->error;
	if (soap_out_PointerTostd__wstring(soap, "tempuri:OrderID", -1, &(a->_tempuri__Get_USCOREOrder::OrderID), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_tempuri__Get_USCOREOrder::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__tempuri__Get_USCOREOrder(soap, tag, this, type);
}

SOAP_FMAC3 _tempuri__Get_USCOREOrder * SOAP_FMAC4 soap_in__tempuri__Get_USCOREOrder(struct soap *soap, const char *tag, _tempuri__Get_USCOREOrder *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_tempuri__Get_USCOREOrder *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__tempuri__Get_USCOREOrder, sizeof(_tempuri__Get_USCOREOrder), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__tempuri__Get_USCOREOrder)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_tempuri__Get_USCOREOrder *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_CustomerID1 = 1;
	size_t soap_flag_SignStr1 = 1;
	size_t soap_flag_OrderType1 = 1;
	size_t soap_flag_OrderID1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_CustomerID1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__wstring(soap, "tempuri:CustomerID", &(a->_tempuri__Get_USCOREOrder::CustomerID), "xsd:string"))
				{	soap_flag_CustomerID1--;
					continue;
				}
			if (soap_flag_SignStr1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__wstring(soap, "tempuri:SignStr", &(a->_tempuri__Get_USCOREOrder::SignStr), "xsd:string"))
				{	soap_flag_SignStr1--;
					continue;
				}
			if (soap_flag_OrderType1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToxsd__unsignedByte(soap, "tempuri:OrderType", &(a->_tempuri__Get_USCOREOrder::OrderType), "xsd:unsignedByte"))
				{	soap_flag_OrderType1--;
					continue;
				}
			if (soap_flag_OrderID1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__wstring(soap, "tempuri:OrderID", &(a->_tempuri__Get_USCOREOrder::OrderID), "xsd:string"))
				{	soap_flag_OrderID1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_tempuri__Get_USCOREOrder *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__tempuri__Get_USCOREOrder, 0, sizeof(_tempuri__Get_USCOREOrder), 0, soap_copy__tempuri__Get_USCOREOrder);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int _tempuri__Get_USCOREOrder::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE__tempuri__Get_USCOREOrder);
	if (this->soap_out(soap, tag?tag:"tempuri:Get_Order", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_tempuri__Get_USCOREOrder::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__tempuri__Get_USCOREOrder(soap, this, tag, type);
}

SOAP_FMAC3 _tempuri__Get_USCOREOrder * SOAP_FMAC4 soap_get__tempuri__Get_USCOREOrder(struct soap *soap, _tempuri__Get_USCOREOrder *p, const char *tag, const char *type)
{
	if ((p = soap_in__tempuri__Get_USCOREOrder(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _tempuri__Get_USCOREOrder * SOAP_FMAC2 soap_instantiate__tempuri__Get_USCOREOrder(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__tempuri__Get_USCOREOrder(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__tempuri__Get_USCOREOrder, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_tempuri__Get_USCOREOrder);
		if (size)
			*size = sizeof(_tempuri__Get_USCOREOrder);
		((_tempuri__Get_USCOREOrder*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(_tempuri__Get_USCOREOrder, n);
		if (size)
			*size = n * sizeof(_tempuri__Get_USCOREOrder);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((_tempuri__Get_USCOREOrder*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (_tempuri__Get_USCOREOrder*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__tempuri__Get_USCOREOrder(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _tempuri__Get_USCOREOrder %p -> %p\n", q, p));
	*(_tempuri__Get_USCOREOrder*)p = *(_tempuri__Get_USCOREOrder*)q;
}

void _tempuri__Book_USCOREApplyResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_tempuri__Book_USCOREApplyResponse::Book_USCOREApplyResult = NULL;
	/* transient soap skipped */
}

void _tempuri__Book_USCOREApplyResponse::soap_serialize(struct soap *soap) const
{
#ifndef WITH_NOIDREF
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_PointerTostd__wstring(soap, &this->_tempuri__Book_USCOREApplyResponse::Book_USCOREApplyResult);
	/* transient soap skipped */
#endif
}

int _tempuri__Book_USCOREApplyResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__tempuri__Book_USCOREApplyResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__tempuri__Book_USCOREApplyResponse(struct soap *soap, const char *tag, int id, const _tempuri__Book_USCOREApplyResponse *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__tempuri__Book_USCOREApplyResponse), type))
		return soap->error;
	if (a->Book_USCOREApplyResult)
		soap_element_result(soap, "tempuri:Book_ApplyResult");
	if (soap_out_PointerTostd__wstring(soap, "tempuri:Book_ApplyResult", -1, &(a->_tempuri__Book_USCOREApplyResponse::Book_USCOREApplyResult), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_tempuri__Book_USCOREApplyResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__tempuri__Book_USCOREApplyResponse(soap, tag, this, type);
}

SOAP_FMAC3 _tempuri__Book_USCOREApplyResponse * SOAP_FMAC4 soap_in__tempuri__Book_USCOREApplyResponse(struct soap *soap, const char *tag, _tempuri__Book_USCOREApplyResponse *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_tempuri__Book_USCOREApplyResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__tempuri__Book_USCOREApplyResponse, sizeof(_tempuri__Book_USCOREApplyResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__tempuri__Book_USCOREApplyResponse)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_tempuri__Book_USCOREApplyResponse *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_Book_USCOREApplyResult1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_Book_USCOREApplyResult1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__wstring(soap, "tempuri:Book_ApplyResult", &(a->_tempuri__Book_USCOREApplyResponse::Book_USCOREApplyResult), "xsd:string"))
				{	soap_flag_Book_USCOREApplyResult1--;
					continue;
				}
			/* transient soap skipped */
			soap_check_result(soap, "tempuri:Book_ApplyResult");
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_tempuri__Book_USCOREApplyResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__tempuri__Book_USCOREApplyResponse, 0, sizeof(_tempuri__Book_USCOREApplyResponse), 0, soap_copy__tempuri__Book_USCOREApplyResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int _tempuri__Book_USCOREApplyResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE__tempuri__Book_USCOREApplyResponse);
	if (this->soap_out(soap, tag?tag:"tempuri:Book_ApplyResponse", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_tempuri__Book_USCOREApplyResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__tempuri__Book_USCOREApplyResponse(soap, this, tag, type);
}

SOAP_FMAC3 _tempuri__Book_USCOREApplyResponse * SOAP_FMAC4 soap_get__tempuri__Book_USCOREApplyResponse(struct soap *soap, _tempuri__Book_USCOREApplyResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in__tempuri__Book_USCOREApplyResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _tempuri__Book_USCOREApplyResponse * SOAP_FMAC2 soap_instantiate__tempuri__Book_USCOREApplyResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__tempuri__Book_USCOREApplyResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__tempuri__Book_USCOREApplyResponse, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_tempuri__Book_USCOREApplyResponse);
		if (size)
			*size = sizeof(_tempuri__Book_USCOREApplyResponse);
		((_tempuri__Book_USCOREApplyResponse*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(_tempuri__Book_USCOREApplyResponse, n);
		if (size)
			*size = n * sizeof(_tempuri__Book_USCOREApplyResponse);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((_tempuri__Book_USCOREApplyResponse*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (_tempuri__Book_USCOREApplyResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__tempuri__Book_USCOREApplyResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _tempuri__Book_USCOREApplyResponse %p -> %p\n", q, p));
	*(_tempuri__Book_USCOREApplyResponse*)p = *(_tempuri__Book_USCOREApplyResponse*)q;
}

void _tempuri__Book_USCOREApply::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_tempuri__Book_USCOREApply::CustomerID = NULL;
	this->_tempuri__Book_USCOREApply::Action = NULL;
	this->_tempuri__Book_USCOREApply::OrderType = NULL;
	this->_tempuri__Book_USCOREApply::OrderID = NULL;
	this->_tempuri__Book_USCOREApply::ApplyContent = NULL;
	this->_tempuri__Book_USCOREApply::VeryfyStr = NULL;
	/* transient soap skipped */
}

void _tempuri__Book_USCOREApply::soap_serialize(struct soap *soap) const
{
#ifndef WITH_NOIDREF
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_PointerTostd__wstring(soap, &this->_tempuri__Book_USCOREApply::CustomerID);
	soap_serialize_PointerTostd__wstring(soap, &this->_tempuri__Book_USCOREApply::Action);
	soap_serialize_PointerToxsd__unsignedByte(soap, &this->_tempuri__Book_USCOREApply::OrderType);
	soap_serialize_PointerTostd__wstring(soap, &this->_tempuri__Book_USCOREApply::OrderID);
	soap_serialize_PointerTostd__wstring(soap, &this->_tempuri__Book_USCOREApply::ApplyContent);
	soap_serialize_PointerTostd__wstring(soap, &this->_tempuri__Book_USCOREApply::VeryfyStr);
	/* transient soap skipped */
#endif
}

int _tempuri__Book_USCOREApply::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__tempuri__Book_USCOREApply(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__tempuri__Book_USCOREApply(struct soap *soap, const char *tag, int id, const _tempuri__Book_USCOREApply *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__tempuri__Book_USCOREApply), type))
		return soap->error;
	if (soap_out_PointerTostd__wstring(soap, "tempuri:CustomerID", -1, &(a->_tempuri__Book_USCOREApply::CustomerID), ""))
		return soap->error;
	if (soap_out_PointerTostd__wstring(soap, "tempuri:Action", -1, &(a->_tempuri__Book_USCOREApply::Action), ""))
		return soap->error;
	if (soap_out_PointerToxsd__unsignedByte(soap, "tempuri:OrderType", -1, &(a->_tempuri__Book_USCOREApply::OrderType), ""))
		return soap->error;
	if (soap_out_PointerTostd__wstring(soap, "tempuri:OrderID", -1, &(a->_tempuri__Book_USCOREApply::OrderID), ""))
		return soap->error;
	if (soap_out_PointerTostd__wstring(soap, "tempuri:ApplyContent", -1, &(a->_tempuri__Book_USCOREApply::ApplyContent), ""))
		return soap->error;
	if (soap_out_PointerTostd__wstring(soap, "tempuri:VeryfyStr", -1, &(a->_tempuri__Book_USCOREApply::VeryfyStr), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_tempuri__Book_USCOREApply::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__tempuri__Book_USCOREApply(soap, tag, this, type);
}

SOAP_FMAC3 _tempuri__Book_USCOREApply * SOAP_FMAC4 soap_in__tempuri__Book_USCOREApply(struct soap *soap, const char *tag, _tempuri__Book_USCOREApply *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_tempuri__Book_USCOREApply *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__tempuri__Book_USCOREApply, sizeof(_tempuri__Book_USCOREApply), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__tempuri__Book_USCOREApply)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_tempuri__Book_USCOREApply *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_CustomerID1 = 1;
	size_t soap_flag_Action1 = 1;
	size_t soap_flag_OrderType1 = 1;
	size_t soap_flag_OrderID1 = 1;
	size_t soap_flag_ApplyContent1 = 1;
	size_t soap_flag_VeryfyStr1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_CustomerID1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__wstring(soap, "tempuri:CustomerID", &(a->_tempuri__Book_USCOREApply::CustomerID), "xsd:string"))
				{	soap_flag_CustomerID1--;
					continue;
				}
			if (soap_flag_Action1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__wstring(soap, "tempuri:Action", &(a->_tempuri__Book_USCOREApply::Action), "xsd:string"))
				{	soap_flag_Action1--;
					continue;
				}
			if (soap_flag_OrderType1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToxsd__unsignedByte(soap, "tempuri:OrderType", &(a->_tempuri__Book_USCOREApply::OrderType), "xsd:unsignedByte"))
				{	soap_flag_OrderType1--;
					continue;
				}
			if (soap_flag_OrderID1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__wstring(soap, "tempuri:OrderID", &(a->_tempuri__Book_USCOREApply::OrderID), "xsd:string"))
				{	soap_flag_OrderID1--;
					continue;
				}
			if (soap_flag_ApplyContent1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__wstring(soap, "tempuri:ApplyContent", &(a->_tempuri__Book_USCOREApply::ApplyContent), "xsd:string"))
				{	soap_flag_ApplyContent1--;
					continue;
				}
			if (soap_flag_VeryfyStr1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__wstring(soap, "tempuri:VeryfyStr", &(a->_tempuri__Book_USCOREApply::VeryfyStr), "xsd:string"))
				{	soap_flag_VeryfyStr1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_tempuri__Book_USCOREApply *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__tempuri__Book_USCOREApply, 0, sizeof(_tempuri__Book_USCOREApply), 0, soap_copy__tempuri__Book_USCOREApply);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int _tempuri__Book_USCOREApply::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE__tempuri__Book_USCOREApply);
	if (this->soap_out(soap, tag?tag:"tempuri:Book_Apply", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_tempuri__Book_USCOREApply::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__tempuri__Book_USCOREApply(soap, this, tag, type);
}

SOAP_FMAC3 _tempuri__Book_USCOREApply * SOAP_FMAC4 soap_get__tempuri__Book_USCOREApply(struct soap *soap, _tempuri__Book_USCOREApply *p, const char *tag, const char *type)
{
	if ((p = soap_in__tempuri__Book_USCOREApply(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _tempuri__Book_USCOREApply * SOAP_FMAC2 soap_instantiate__tempuri__Book_USCOREApply(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__tempuri__Book_USCOREApply(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__tempuri__Book_USCOREApply, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_tempuri__Book_USCOREApply);
		if (size)
			*size = sizeof(_tempuri__Book_USCOREApply);
		((_tempuri__Book_USCOREApply*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(_tempuri__Book_USCOREApply, n);
		if (size)
			*size = n * sizeof(_tempuri__Book_USCOREApply);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((_tempuri__Book_USCOREApply*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (_tempuri__Book_USCOREApply*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__tempuri__Book_USCOREApply(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _tempuri__Book_USCOREApply %p -> %p\n", q, p));
	*(_tempuri__Book_USCOREApply*)p = *(_tempuri__Book_USCOREApply*)q;
}

void _tempuri__Book_USCOREModify_USCOREPlusResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_tempuri__Book_USCOREModify_USCOREPlusResponse::Book_USCOREModify_USCOREPlusResult = NULL;
	/* transient soap skipped */
}

void _tempuri__Book_USCOREModify_USCOREPlusResponse::soap_serialize(struct soap *soap) const
{
#ifndef WITH_NOIDREF
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_PointerTostd__wstring(soap, &this->_tempuri__Book_USCOREModify_USCOREPlusResponse::Book_USCOREModify_USCOREPlusResult);
	/* transient soap skipped */
#endif
}

int _tempuri__Book_USCOREModify_USCOREPlusResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__tempuri__Book_USCOREModify_USCOREPlusResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__tempuri__Book_USCOREModify_USCOREPlusResponse(struct soap *soap, const char *tag, int id, const _tempuri__Book_USCOREModify_USCOREPlusResponse *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__tempuri__Book_USCOREModify_USCOREPlusResponse), type))
		return soap->error;
	if (a->Book_USCOREModify_USCOREPlusResult)
		soap_element_result(soap, "tempuri:Book_Modify_PlusResult");
	if (soap_out_PointerTostd__wstring(soap, "tempuri:Book_Modify_PlusResult", -1, &(a->_tempuri__Book_USCOREModify_USCOREPlusResponse::Book_USCOREModify_USCOREPlusResult), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_tempuri__Book_USCOREModify_USCOREPlusResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__tempuri__Book_USCOREModify_USCOREPlusResponse(soap, tag, this, type);
}

SOAP_FMAC3 _tempuri__Book_USCOREModify_USCOREPlusResponse * SOAP_FMAC4 soap_in__tempuri__Book_USCOREModify_USCOREPlusResponse(struct soap *soap, const char *tag, _tempuri__Book_USCOREModify_USCOREPlusResponse *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_tempuri__Book_USCOREModify_USCOREPlusResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__tempuri__Book_USCOREModify_USCOREPlusResponse, sizeof(_tempuri__Book_USCOREModify_USCOREPlusResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__tempuri__Book_USCOREModify_USCOREPlusResponse)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_tempuri__Book_USCOREModify_USCOREPlusResponse *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_Book_USCOREModify_USCOREPlusResult1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_Book_USCOREModify_USCOREPlusResult1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__wstring(soap, "tempuri:Book_Modify_PlusResult", &(a->_tempuri__Book_USCOREModify_USCOREPlusResponse::Book_USCOREModify_USCOREPlusResult), "xsd:string"))
				{	soap_flag_Book_USCOREModify_USCOREPlusResult1--;
					continue;
				}
			/* transient soap skipped */
			soap_check_result(soap, "tempuri:Book_Modify_PlusResult");
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_tempuri__Book_USCOREModify_USCOREPlusResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__tempuri__Book_USCOREModify_USCOREPlusResponse, 0, sizeof(_tempuri__Book_USCOREModify_USCOREPlusResponse), 0, soap_copy__tempuri__Book_USCOREModify_USCOREPlusResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int _tempuri__Book_USCOREModify_USCOREPlusResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE__tempuri__Book_USCOREModify_USCOREPlusResponse);
	if (this->soap_out(soap, tag?tag:"tempuri:Book_Modify_PlusResponse", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_tempuri__Book_USCOREModify_USCOREPlusResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__tempuri__Book_USCOREModify_USCOREPlusResponse(soap, this, tag, type);
}

SOAP_FMAC3 _tempuri__Book_USCOREModify_USCOREPlusResponse * SOAP_FMAC4 soap_get__tempuri__Book_USCOREModify_USCOREPlusResponse(struct soap *soap, _tempuri__Book_USCOREModify_USCOREPlusResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in__tempuri__Book_USCOREModify_USCOREPlusResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _tempuri__Book_USCOREModify_USCOREPlusResponse * SOAP_FMAC2 soap_instantiate__tempuri__Book_USCOREModify_USCOREPlusResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__tempuri__Book_USCOREModify_USCOREPlusResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__tempuri__Book_USCOREModify_USCOREPlusResponse, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_tempuri__Book_USCOREModify_USCOREPlusResponse);
		if (size)
			*size = sizeof(_tempuri__Book_USCOREModify_USCOREPlusResponse);
		((_tempuri__Book_USCOREModify_USCOREPlusResponse*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(_tempuri__Book_USCOREModify_USCOREPlusResponse, n);
		if (size)
			*size = n * sizeof(_tempuri__Book_USCOREModify_USCOREPlusResponse);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((_tempuri__Book_USCOREModify_USCOREPlusResponse*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (_tempuri__Book_USCOREModify_USCOREPlusResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__tempuri__Book_USCOREModify_USCOREPlusResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _tempuri__Book_USCOREModify_USCOREPlusResponse %p -> %p\n", q, p));
	*(_tempuri__Book_USCOREModify_USCOREPlusResponse*)p = *(_tempuri__Book_USCOREModify_USCOREPlusResponse*)q;
}

void _tempuri__Book_USCOREModify_USCOREPlus::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_tempuri__Book_USCOREModify_USCOREPlus::CustomerID = NULL;
	this->_tempuri__Book_USCOREModify_USCOREPlus::xhOrderID = NULL;
	this->_tempuri__Book_USCOREModify_USCOREPlus::AdditionalProduct = NULL;
	this->_tempuri__Book_USCOREModify_USCOREPlus::VeryfyStr = NULL;
	/* transient soap skipped */
}

void _tempuri__Book_USCOREModify_USCOREPlus::soap_serialize(struct soap *soap) const
{
#ifndef WITH_NOIDREF
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_PointerTostd__wstring(soap, &this->_tempuri__Book_USCOREModify_USCOREPlus::CustomerID);
	soap_serialize_PointerTostd__wstring(soap, &this->_tempuri__Book_USCOREModify_USCOREPlus::xhOrderID);
	soap_serialize_PointerTostd__wstring(soap, &this->_tempuri__Book_USCOREModify_USCOREPlus::AdditionalProduct);
	soap_serialize_PointerTostd__wstring(soap, &this->_tempuri__Book_USCOREModify_USCOREPlus::VeryfyStr);
	/* transient soap skipped */
#endif
}

int _tempuri__Book_USCOREModify_USCOREPlus::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__tempuri__Book_USCOREModify_USCOREPlus(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__tempuri__Book_USCOREModify_USCOREPlus(struct soap *soap, const char *tag, int id, const _tempuri__Book_USCOREModify_USCOREPlus *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__tempuri__Book_USCOREModify_USCOREPlus), type))
		return soap->error;
	if (soap_out_PointerTostd__wstring(soap, "tempuri:CustomerID", -1, &(a->_tempuri__Book_USCOREModify_USCOREPlus::CustomerID), ""))
		return soap->error;
	if (soap_out_PointerTostd__wstring(soap, "tempuri:xhOrderID", -1, &(a->_tempuri__Book_USCOREModify_USCOREPlus::xhOrderID), ""))
		return soap->error;
	if (soap_out_PointerTostd__wstring(soap, "tempuri:AdditionalProduct", -1, &(a->_tempuri__Book_USCOREModify_USCOREPlus::AdditionalProduct), ""))
		return soap->error;
	if (soap_out_PointerTostd__wstring(soap, "tempuri:VeryfyStr", -1, &(a->_tempuri__Book_USCOREModify_USCOREPlus::VeryfyStr), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_tempuri__Book_USCOREModify_USCOREPlus::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__tempuri__Book_USCOREModify_USCOREPlus(soap, tag, this, type);
}

SOAP_FMAC3 _tempuri__Book_USCOREModify_USCOREPlus * SOAP_FMAC4 soap_in__tempuri__Book_USCOREModify_USCOREPlus(struct soap *soap, const char *tag, _tempuri__Book_USCOREModify_USCOREPlus *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_tempuri__Book_USCOREModify_USCOREPlus *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__tempuri__Book_USCOREModify_USCOREPlus, sizeof(_tempuri__Book_USCOREModify_USCOREPlus), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__tempuri__Book_USCOREModify_USCOREPlus)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_tempuri__Book_USCOREModify_USCOREPlus *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_CustomerID1 = 1;
	size_t soap_flag_xhOrderID1 = 1;
	size_t soap_flag_AdditionalProduct1 = 1;
	size_t soap_flag_VeryfyStr1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_CustomerID1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__wstring(soap, "tempuri:CustomerID", &(a->_tempuri__Book_USCOREModify_USCOREPlus::CustomerID), "xsd:string"))
				{	soap_flag_CustomerID1--;
					continue;
				}
			if (soap_flag_xhOrderID1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__wstring(soap, "tempuri:xhOrderID", &(a->_tempuri__Book_USCOREModify_USCOREPlus::xhOrderID), "xsd:string"))
				{	soap_flag_xhOrderID1--;
					continue;
				}
			if (soap_flag_AdditionalProduct1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__wstring(soap, "tempuri:AdditionalProduct", &(a->_tempuri__Book_USCOREModify_USCOREPlus::AdditionalProduct), "xsd:string"))
				{	soap_flag_AdditionalProduct1--;
					continue;
				}
			if (soap_flag_VeryfyStr1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__wstring(soap, "tempuri:VeryfyStr", &(a->_tempuri__Book_USCOREModify_USCOREPlus::VeryfyStr), "xsd:string"))
				{	soap_flag_VeryfyStr1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_tempuri__Book_USCOREModify_USCOREPlus *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__tempuri__Book_USCOREModify_USCOREPlus, 0, sizeof(_tempuri__Book_USCOREModify_USCOREPlus), 0, soap_copy__tempuri__Book_USCOREModify_USCOREPlus);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int _tempuri__Book_USCOREModify_USCOREPlus::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE__tempuri__Book_USCOREModify_USCOREPlus);
	if (this->soap_out(soap, tag?tag:"tempuri:Book_Modify_Plus", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_tempuri__Book_USCOREModify_USCOREPlus::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__tempuri__Book_USCOREModify_USCOREPlus(soap, this, tag, type);
}

SOAP_FMAC3 _tempuri__Book_USCOREModify_USCOREPlus * SOAP_FMAC4 soap_get__tempuri__Book_USCOREModify_USCOREPlus(struct soap *soap, _tempuri__Book_USCOREModify_USCOREPlus *p, const char *tag, const char *type)
{
	if ((p = soap_in__tempuri__Book_USCOREModify_USCOREPlus(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _tempuri__Book_USCOREModify_USCOREPlus * SOAP_FMAC2 soap_instantiate__tempuri__Book_USCOREModify_USCOREPlus(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__tempuri__Book_USCOREModify_USCOREPlus(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__tempuri__Book_USCOREModify_USCOREPlus, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_tempuri__Book_USCOREModify_USCOREPlus);
		if (size)
			*size = sizeof(_tempuri__Book_USCOREModify_USCOREPlus);
		((_tempuri__Book_USCOREModify_USCOREPlus*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(_tempuri__Book_USCOREModify_USCOREPlus, n);
		if (size)
			*size = n * sizeof(_tempuri__Book_USCOREModify_USCOREPlus);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((_tempuri__Book_USCOREModify_USCOREPlus*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (_tempuri__Book_USCOREModify_USCOREPlus*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__tempuri__Book_USCOREModify_USCOREPlus(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _tempuri__Book_USCOREModify_USCOREPlus %p -> %p\n", q, p));
	*(_tempuri__Book_USCOREModify_USCOREPlus*)p = *(_tempuri__Book_USCOREModify_USCOREPlus*)q;
}

void _tempuri__Book_USCOREModify_USCOREHotelResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_tempuri__Book_USCOREModify_USCOREHotelResponse::Book_USCOREModify_USCOREHotelResult = NULL;
	/* transient soap skipped */
}

void _tempuri__Book_USCOREModify_USCOREHotelResponse::soap_serialize(struct soap *soap) const
{
#ifndef WITH_NOIDREF
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_PointerTostd__wstring(soap, &this->_tempuri__Book_USCOREModify_USCOREHotelResponse::Book_USCOREModify_USCOREHotelResult);
	/* transient soap skipped */
#endif
}

int _tempuri__Book_USCOREModify_USCOREHotelResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__tempuri__Book_USCOREModify_USCOREHotelResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__tempuri__Book_USCOREModify_USCOREHotelResponse(struct soap *soap, const char *tag, int id, const _tempuri__Book_USCOREModify_USCOREHotelResponse *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__tempuri__Book_USCOREModify_USCOREHotelResponse), type))
		return soap->error;
	if (a->Book_USCOREModify_USCOREHotelResult)
		soap_element_result(soap, "tempuri:Book_Modify_HotelResult");
	if (soap_out_PointerTostd__wstring(soap, "tempuri:Book_Modify_HotelResult", -1, &(a->_tempuri__Book_USCOREModify_USCOREHotelResponse::Book_USCOREModify_USCOREHotelResult), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_tempuri__Book_USCOREModify_USCOREHotelResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__tempuri__Book_USCOREModify_USCOREHotelResponse(soap, tag, this, type);
}

SOAP_FMAC3 _tempuri__Book_USCOREModify_USCOREHotelResponse * SOAP_FMAC4 soap_in__tempuri__Book_USCOREModify_USCOREHotelResponse(struct soap *soap, const char *tag, _tempuri__Book_USCOREModify_USCOREHotelResponse *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_tempuri__Book_USCOREModify_USCOREHotelResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__tempuri__Book_USCOREModify_USCOREHotelResponse, sizeof(_tempuri__Book_USCOREModify_USCOREHotelResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__tempuri__Book_USCOREModify_USCOREHotelResponse)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_tempuri__Book_USCOREModify_USCOREHotelResponse *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_Book_USCOREModify_USCOREHotelResult1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_Book_USCOREModify_USCOREHotelResult1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__wstring(soap, "tempuri:Book_Modify_HotelResult", &(a->_tempuri__Book_USCOREModify_USCOREHotelResponse::Book_USCOREModify_USCOREHotelResult), "xsd:string"))
				{	soap_flag_Book_USCOREModify_USCOREHotelResult1--;
					continue;
				}
			/* transient soap skipped */
			soap_check_result(soap, "tempuri:Book_Modify_HotelResult");
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_tempuri__Book_USCOREModify_USCOREHotelResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__tempuri__Book_USCOREModify_USCOREHotelResponse, 0, sizeof(_tempuri__Book_USCOREModify_USCOREHotelResponse), 0, soap_copy__tempuri__Book_USCOREModify_USCOREHotelResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int _tempuri__Book_USCOREModify_USCOREHotelResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE__tempuri__Book_USCOREModify_USCOREHotelResponse);
	if (this->soap_out(soap, tag?tag:"tempuri:Book_Modify_HotelResponse", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_tempuri__Book_USCOREModify_USCOREHotelResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__tempuri__Book_USCOREModify_USCOREHotelResponse(soap, this, tag, type);
}

SOAP_FMAC3 _tempuri__Book_USCOREModify_USCOREHotelResponse * SOAP_FMAC4 soap_get__tempuri__Book_USCOREModify_USCOREHotelResponse(struct soap *soap, _tempuri__Book_USCOREModify_USCOREHotelResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in__tempuri__Book_USCOREModify_USCOREHotelResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _tempuri__Book_USCOREModify_USCOREHotelResponse * SOAP_FMAC2 soap_instantiate__tempuri__Book_USCOREModify_USCOREHotelResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__tempuri__Book_USCOREModify_USCOREHotelResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__tempuri__Book_USCOREModify_USCOREHotelResponse, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_tempuri__Book_USCOREModify_USCOREHotelResponse);
		if (size)
			*size = sizeof(_tempuri__Book_USCOREModify_USCOREHotelResponse);
		((_tempuri__Book_USCOREModify_USCOREHotelResponse*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(_tempuri__Book_USCOREModify_USCOREHotelResponse, n);
		if (size)
			*size = n * sizeof(_tempuri__Book_USCOREModify_USCOREHotelResponse);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((_tempuri__Book_USCOREModify_USCOREHotelResponse*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (_tempuri__Book_USCOREModify_USCOREHotelResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__tempuri__Book_USCOREModify_USCOREHotelResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _tempuri__Book_USCOREModify_USCOREHotelResponse %p -> %p\n", q, p));
	*(_tempuri__Book_USCOREModify_USCOREHotelResponse*)p = *(_tempuri__Book_USCOREModify_USCOREHotelResponse*)q;
}

void _tempuri__Book_USCOREModify_USCOREHotel::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_tempuri__Book_USCOREModify_USCOREHotel::CustomerID = NULL;
	this->_tempuri__Book_USCOREModify_USCOREHotel::Action = NULL;
	this->_tempuri__Book_USCOREModify_USCOREHotel::OrderType = NULL;
	this->_tempuri__Book_USCOREModify_USCOREHotel::OrderID = NULL;
	this->_tempuri__Book_USCOREModify_USCOREHotel::Hotel = NULL;
	this->_tempuri__Book_USCOREModify_USCOREHotel::VeryfyStr = NULL;
	/* transient soap skipped */
}

void _tempuri__Book_USCOREModify_USCOREHotel::soap_serialize(struct soap *soap) const
{
#ifndef WITH_NOIDREF
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_PointerTostd__wstring(soap, &this->_tempuri__Book_USCOREModify_USCOREHotel::CustomerID);
	soap_serialize_PointerTostd__wstring(soap, &this->_tempuri__Book_USCOREModify_USCOREHotel::Action);
	soap_serialize_PointerToxsd__unsignedByte(soap, &this->_tempuri__Book_USCOREModify_USCOREHotel::OrderType);
	soap_serialize_PointerTostd__wstring(soap, &this->_tempuri__Book_USCOREModify_USCOREHotel::OrderID);
	soap_serialize_PointerTostd__wstring(soap, &this->_tempuri__Book_USCOREModify_USCOREHotel::Hotel);
	soap_serialize_PointerTostd__wstring(soap, &this->_tempuri__Book_USCOREModify_USCOREHotel::VeryfyStr);
	/* transient soap skipped */
#endif
}

int _tempuri__Book_USCOREModify_USCOREHotel::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__tempuri__Book_USCOREModify_USCOREHotel(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__tempuri__Book_USCOREModify_USCOREHotel(struct soap *soap, const char *tag, int id, const _tempuri__Book_USCOREModify_USCOREHotel *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__tempuri__Book_USCOREModify_USCOREHotel), type))
		return soap->error;
	if (soap_out_PointerTostd__wstring(soap, "tempuri:CustomerID", -1, &(a->_tempuri__Book_USCOREModify_USCOREHotel::CustomerID), ""))
		return soap->error;
	if (soap_out_PointerTostd__wstring(soap, "tempuri:Action", -1, &(a->_tempuri__Book_USCOREModify_USCOREHotel::Action), ""))
		return soap->error;
	if (soap_out_PointerToxsd__unsignedByte(soap, "tempuri:OrderType", -1, &(a->_tempuri__Book_USCOREModify_USCOREHotel::OrderType), ""))
		return soap->error;
	if (soap_out_PointerTostd__wstring(soap, "tempuri:OrderID", -1, &(a->_tempuri__Book_USCOREModify_USCOREHotel::OrderID), ""))
		return soap->error;
	if (soap_out_PointerTostd__wstring(soap, "tempuri:Hotel", -1, &(a->_tempuri__Book_USCOREModify_USCOREHotel::Hotel), ""))
		return soap->error;
	if (soap_out_PointerTostd__wstring(soap, "tempuri:VeryfyStr", -1, &(a->_tempuri__Book_USCOREModify_USCOREHotel::VeryfyStr), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_tempuri__Book_USCOREModify_USCOREHotel::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__tempuri__Book_USCOREModify_USCOREHotel(soap, tag, this, type);
}

SOAP_FMAC3 _tempuri__Book_USCOREModify_USCOREHotel * SOAP_FMAC4 soap_in__tempuri__Book_USCOREModify_USCOREHotel(struct soap *soap, const char *tag, _tempuri__Book_USCOREModify_USCOREHotel *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_tempuri__Book_USCOREModify_USCOREHotel *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__tempuri__Book_USCOREModify_USCOREHotel, sizeof(_tempuri__Book_USCOREModify_USCOREHotel), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__tempuri__Book_USCOREModify_USCOREHotel)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_tempuri__Book_USCOREModify_USCOREHotel *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_CustomerID1 = 1;
	size_t soap_flag_Action1 = 1;
	size_t soap_flag_OrderType1 = 1;
	size_t soap_flag_OrderID1 = 1;
	size_t soap_flag_Hotel1 = 1;
	size_t soap_flag_VeryfyStr1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_CustomerID1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__wstring(soap, "tempuri:CustomerID", &(a->_tempuri__Book_USCOREModify_USCOREHotel::CustomerID), "xsd:string"))
				{	soap_flag_CustomerID1--;
					continue;
				}
			if (soap_flag_Action1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__wstring(soap, "tempuri:Action", &(a->_tempuri__Book_USCOREModify_USCOREHotel::Action), "xsd:string"))
				{	soap_flag_Action1--;
					continue;
				}
			if (soap_flag_OrderType1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToxsd__unsignedByte(soap, "tempuri:OrderType", &(a->_tempuri__Book_USCOREModify_USCOREHotel::OrderType), "xsd:unsignedByte"))
				{	soap_flag_OrderType1--;
					continue;
				}
			if (soap_flag_OrderID1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__wstring(soap, "tempuri:OrderID", &(a->_tempuri__Book_USCOREModify_USCOREHotel::OrderID), "xsd:string"))
				{	soap_flag_OrderID1--;
					continue;
				}
			if (soap_flag_Hotel1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__wstring(soap, "tempuri:Hotel", &(a->_tempuri__Book_USCOREModify_USCOREHotel::Hotel), "xsd:string"))
				{	soap_flag_Hotel1--;
					continue;
				}
			if (soap_flag_VeryfyStr1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__wstring(soap, "tempuri:VeryfyStr", &(a->_tempuri__Book_USCOREModify_USCOREHotel::VeryfyStr), "xsd:string"))
				{	soap_flag_VeryfyStr1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_tempuri__Book_USCOREModify_USCOREHotel *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__tempuri__Book_USCOREModify_USCOREHotel, 0, sizeof(_tempuri__Book_USCOREModify_USCOREHotel), 0, soap_copy__tempuri__Book_USCOREModify_USCOREHotel);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int _tempuri__Book_USCOREModify_USCOREHotel::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE__tempuri__Book_USCOREModify_USCOREHotel);
	if (this->soap_out(soap, tag?tag:"tempuri:Book_Modify_Hotel", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_tempuri__Book_USCOREModify_USCOREHotel::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__tempuri__Book_USCOREModify_USCOREHotel(soap, this, tag, type);
}

SOAP_FMAC3 _tempuri__Book_USCOREModify_USCOREHotel * SOAP_FMAC4 soap_get__tempuri__Book_USCOREModify_USCOREHotel(struct soap *soap, _tempuri__Book_USCOREModify_USCOREHotel *p, const char *tag, const char *type)
{
	if ((p = soap_in__tempuri__Book_USCOREModify_USCOREHotel(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _tempuri__Book_USCOREModify_USCOREHotel * SOAP_FMAC2 soap_instantiate__tempuri__Book_USCOREModify_USCOREHotel(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__tempuri__Book_USCOREModify_USCOREHotel(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__tempuri__Book_USCOREModify_USCOREHotel, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_tempuri__Book_USCOREModify_USCOREHotel);
		if (size)
			*size = sizeof(_tempuri__Book_USCOREModify_USCOREHotel);
		((_tempuri__Book_USCOREModify_USCOREHotel*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(_tempuri__Book_USCOREModify_USCOREHotel, n);
		if (size)
			*size = n * sizeof(_tempuri__Book_USCOREModify_USCOREHotel);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((_tempuri__Book_USCOREModify_USCOREHotel*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (_tempuri__Book_USCOREModify_USCOREHotel*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__tempuri__Book_USCOREModify_USCOREHotel(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _tempuri__Book_USCOREModify_USCOREHotel %p -> %p\n", q, p));
	*(_tempuri__Book_USCOREModify_USCOREHotel*)p = *(_tempuri__Book_USCOREModify_USCOREHotel*)q;
}

void _tempuri__Book_USCOREAddResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_tempuri__Book_USCOREAddResponse::Book_USCOREAddResult = NULL;
	/* transient soap skipped */
}

void _tempuri__Book_USCOREAddResponse::soap_serialize(struct soap *soap) const
{
#ifndef WITH_NOIDREF
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_PointerTostd__wstring(soap, &this->_tempuri__Book_USCOREAddResponse::Book_USCOREAddResult);
	/* transient soap skipped */
#endif
}

int _tempuri__Book_USCOREAddResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__tempuri__Book_USCOREAddResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__tempuri__Book_USCOREAddResponse(struct soap *soap, const char *tag, int id, const _tempuri__Book_USCOREAddResponse *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__tempuri__Book_USCOREAddResponse), type))
		return soap->error;
	if (a->Book_USCOREAddResult)
		soap_element_result(soap, "tempuri:Book_AddResult");
	if (soap_out_PointerTostd__wstring(soap, "tempuri:Book_AddResult", -1, &(a->_tempuri__Book_USCOREAddResponse::Book_USCOREAddResult), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_tempuri__Book_USCOREAddResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__tempuri__Book_USCOREAddResponse(soap, tag, this, type);
}

SOAP_FMAC3 _tempuri__Book_USCOREAddResponse * SOAP_FMAC4 soap_in__tempuri__Book_USCOREAddResponse(struct soap *soap, const char *tag, _tempuri__Book_USCOREAddResponse *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_tempuri__Book_USCOREAddResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__tempuri__Book_USCOREAddResponse, sizeof(_tempuri__Book_USCOREAddResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__tempuri__Book_USCOREAddResponse)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_tempuri__Book_USCOREAddResponse *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_Book_USCOREAddResult1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_Book_USCOREAddResult1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__wstring(soap, "tempuri:Book_AddResult", &(a->_tempuri__Book_USCOREAddResponse::Book_USCOREAddResult), "xsd:string"))
				{	soap_flag_Book_USCOREAddResult1--;
					continue;
				}
			/* transient soap skipped */
			soap_check_result(soap, "tempuri:Book_AddResult");
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_tempuri__Book_USCOREAddResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__tempuri__Book_USCOREAddResponse, 0, sizeof(_tempuri__Book_USCOREAddResponse), 0, soap_copy__tempuri__Book_USCOREAddResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int _tempuri__Book_USCOREAddResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE__tempuri__Book_USCOREAddResponse);
	if (this->soap_out(soap, tag?tag:"tempuri:Book_AddResponse", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_tempuri__Book_USCOREAddResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__tempuri__Book_USCOREAddResponse(soap, this, tag, type);
}

SOAP_FMAC3 _tempuri__Book_USCOREAddResponse * SOAP_FMAC4 soap_get__tempuri__Book_USCOREAddResponse(struct soap *soap, _tempuri__Book_USCOREAddResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in__tempuri__Book_USCOREAddResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _tempuri__Book_USCOREAddResponse * SOAP_FMAC2 soap_instantiate__tempuri__Book_USCOREAddResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__tempuri__Book_USCOREAddResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__tempuri__Book_USCOREAddResponse, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_tempuri__Book_USCOREAddResponse);
		if (size)
			*size = sizeof(_tempuri__Book_USCOREAddResponse);
		((_tempuri__Book_USCOREAddResponse*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(_tempuri__Book_USCOREAddResponse, n);
		if (size)
			*size = n * sizeof(_tempuri__Book_USCOREAddResponse);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((_tempuri__Book_USCOREAddResponse*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (_tempuri__Book_USCOREAddResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__tempuri__Book_USCOREAddResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _tempuri__Book_USCOREAddResponse %p -> %p\n", q, p));
	*(_tempuri__Book_USCOREAddResponse*)p = *(_tempuri__Book_USCOREAddResponse*)q;
}

void _tempuri__Book_USCOREAdd::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_tempuri__Book_USCOREAdd::CustomerID = NULL;
	this->_tempuri__Book_USCOREAdd::ContactUser = NULL;
	this->_tempuri__Book_USCOREAdd::ContactName = NULL;
	this->_tempuri__Book_USCOREAdd::BookType = NULL;
	this->_tempuri__Book_USCOREAdd::BookInfo = NULL;
	this->_tempuri__Book_USCOREAdd::VeryfyStr = NULL;
	/* transient soap skipped */
}

void _tempuri__Book_USCOREAdd::soap_serialize(struct soap *soap) const
{
#ifndef WITH_NOIDREF
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_PointerTostd__wstring(soap, &this->_tempuri__Book_USCOREAdd::CustomerID);
	soap_serialize_PointerTostd__wstring(soap, &this->_tempuri__Book_USCOREAdd::ContactUser);
	soap_serialize_PointerTostd__wstring(soap, &this->_tempuri__Book_USCOREAdd::ContactName);
	soap_serialize_PointerToint(soap, &this->_tempuri__Book_USCOREAdd::BookType);
	soap_serialize_PointerTostd__wstring(soap, &this->_tempuri__Book_USCOREAdd::BookInfo);
	soap_serialize_PointerTostd__wstring(soap, &this->_tempuri__Book_USCOREAdd::VeryfyStr);
	/* transient soap skipped */
#endif
}

int _tempuri__Book_USCOREAdd::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__tempuri__Book_USCOREAdd(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__tempuri__Book_USCOREAdd(struct soap *soap, const char *tag, int id, const _tempuri__Book_USCOREAdd *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__tempuri__Book_USCOREAdd), type))
		return soap->error;
	if (soap_out_PointerTostd__wstring(soap, "tempuri:CustomerID", -1, &(a->_tempuri__Book_USCOREAdd::CustomerID), ""))
		return soap->error;
	if (soap_out_PointerTostd__wstring(soap, "tempuri:ContactUser", -1, &(a->_tempuri__Book_USCOREAdd::ContactUser), ""))
		return soap->error;
	if (soap_out_PointerTostd__wstring(soap, "tempuri:ContactName", -1, &(a->_tempuri__Book_USCOREAdd::ContactName), ""))
		return soap->error;
	if (soap_out_PointerToint(soap, "tempuri:BookType", -1, &(a->_tempuri__Book_USCOREAdd::BookType), ""))
		return soap->error;
	if (soap_out_PointerTostd__wstring(soap, "tempuri:BookInfo", -1, &(a->_tempuri__Book_USCOREAdd::BookInfo), ""))
		return soap->error;
	if (soap_out_PointerTostd__wstring(soap, "tempuri:VeryfyStr", -1, &(a->_tempuri__Book_USCOREAdd::VeryfyStr), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_tempuri__Book_USCOREAdd::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__tempuri__Book_USCOREAdd(soap, tag, this, type);
}

SOAP_FMAC3 _tempuri__Book_USCOREAdd * SOAP_FMAC4 soap_in__tempuri__Book_USCOREAdd(struct soap *soap, const char *tag, _tempuri__Book_USCOREAdd *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_tempuri__Book_USCOREAdd *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__tempuri__Book_USCOREAdd, sizeof(_tempuri__Book_USCOREAdd), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__tempuri__Book_USCOREAdd)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_tempuri__Book_USCOREAdd *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_CustomerID1 = 1;
	size_t soap_flag_ContactUser1 = 1;
	size_t soap_flag_ContactName1 = 1;
	size_t soap_flag_BookType1 = 1;
	size_t soap_flag_BookInfo1 = 1;
	size_t soap_flag_VeryfyStr1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_CustomerID1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__wstring(soap, "tempuri:CustomerID", &(a->_tempuri__Book_USCOREAdd::CustomerID), "xsd:string"))
				{	soap_flag_CustomerID1--;
					continue;
				}
			if (soap_flag_ContactUser1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__wstring(soap, "tempuri:ContactUser", &(a->_tempuri__Book_USCOREAdd::ContactUser), "xsd:string"))
				{	soap_flag_ContactUser1--;
					continue;
				}
			if (soap_flag_ContactName1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__wstring(soap, "tempuri:ContactName", &(a->_tempuri__Book_USCOREAdd::ContactName), "xsd:string"))
				{	soap_flag_ContactName1--;
					continue;
				}
			if (soap_flag_BookType1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToint(soap, "tempuri:BookType", &(a->_tempuri__Book_USCOREAdd::BookType), "xsd:int"))
				{	soap_flag_BookType1--;
					continue;
				}
			if (soap_flag_BookInfo1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__wstring(soap, "tempuri:BookInfo", &(a->_tempuri__Book_USCOREAdd::BookInfo), "xsd:string"))
				{	soap_flag_BookInfo1--;
					continue;
				}
			if (soap_flag_VeryfyStr1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__wstring(soap, "tempuri:VeryfyStr", &(a->_tempuri__Book_USCOREAdd::VeryfyStr), "xsd:string"))
				{	soap_flag_VeryfyStr1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_tempuri__Book_USCOREAdd *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__tempuri__Book_USCOREAdd, 0, sizeof(_tempuri__Book_USCOREAdd), 0, soap_copy__tempuri__Book_USCOREAdd);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int _tempuri__Book_USCOREAdd::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE__tempuri__Book_USCOREAdd);
	if (this->soap_out(soap, tag?tag:"tempuri:Book_Add", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_tempuri__Book_USCOREAdd::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__tempuri__Book_USCOREAdd(soap, this, tag, type);
}

SOAP_FMAC3 _tempuri__Book_USCOREAdd * SOAP_FMAC4 soap_get__tempuri__Book_USCOREAdd(struct soap *soap, _tempuri__Book_USCOREAdd *p, const char *tag, const char *type)
{
	if ((p = soap_in__tempuri__Book_USCOREAdd(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _tempuri__Book_USCOREAdd * SOAP_FMAC2 soap_instantiate__tempuri__Book_USCOREAdd(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__tempuri__Book_USCOREAdd(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__tempuri__Book_USCOREAdd, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_tempuri__Book_USCOREAdd);
		if (size)
			*size = sizeof(_tempuri__Book_USCOREAdd);
		((_tempuri__Book_USCOREAdd*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(_tempuri__Book_USCOREAdd, n);
		if (size)
			*size = n * sizeof(_tempuri__Book_USCOREAdd);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((_tempuri__Book_USCOREAdd*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (_tempuri__Book_USCOREAdd*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__tempuri__Book_USCOREAdd(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _tempuri__Book_USCOREAdd %p -> %p\n", q, p));
	*(_tempuri__Book_USCOREAdd*)p = *(_tempuri__Book_USCOREAdd*)q;
}

void _tempuri__Get_USCOREHotel_USCORERoomStateResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_tempuri__Get_USCOREHotel_USCORERoomStateResponse::Get_USCOREHotel_USCORERoomStateResult = NULL;
	/* transient soap skipped */
}

void _tempuri__Get_USCOREHotel_USCORERoomStateResponse::soap_serialize(struct soap *soap) const
{
#ifndef WITH_NOIDREF
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_PointerTostd__wstring(soap, &this->_tempuri__Get_USCOREHotel_USCORERoomStateResponse::Get_USCOREHotel_USCORERoomStateResult);
	/* transient soap skipped */
#endif
}

int _tempuri__Get_USCOREHotel_USCORERoomStateResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__tempuri__Get_USCOREHotel_USCORERoomStateResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__tempuri__Get_USCOREHotel_USCORERoomStateResponse(struct soap *soap, const char *tag, int id, const _tempuri__Get_USCOREHotel_USCORERoomStateResponse *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__tempuri__Get_USCOREHotel_USCORERoomStateResponse), type))
		return soap->error;
	if (a->Get_USCOREHotel_USCORERoomStateResult)
		soap_element_result(soap, "tempuri:Get_Hotel_RoomStateResult");
	if (soap_out_PointerTostd__wstring(soap, "tempuri:Get_Hotel_RoomStateResult", -1, &(a->_tempuri__Get_USCOREHotel_USCORERoomStateResponse::Get_USCOREHotel_USCORERoomStateResult), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_tempuri__Get_USCOREHotel_USCORERoomStateResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__tempuri__Get_USCOREHotel_USCORERoomStateResponse(soap, tag, this, type);
}

SOAP_FMAC3 _tempuri__Get_USCOREHotel_USCORERoomStateResponse * SOAP_FMAC4 soap_in__tempuri__Get_USCOREHotel_USCORERoomStateResponse(struct soap *soap, const char *tag, _tempuri__Get_USCOREHotel_USCORERoomStateResponse *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_tempuri__Get_USCOREHotel_USCORERoomStateResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__tempuri__Get_USCOREHotel_USCORERoomStateResponse, sizeof(_tempuri__Get_USCOREHotel_USCORERoomStateResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__tempuri__Get_USCOREHotel_USCORERoomStateResponse)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_tempuri__Get_USCOREHotel_USCORERoomStateResponse *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_Get_USCOREHotel_USCORERoomStateResult1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_Get_USCOREHotel_USCORERoomStateResult1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__wstring(soap, "tempuri:Get_Hotel_RoomStateResult", &(a->_tempuri__Get_USCOREHotel_USCORERoomStateResponse::Get_USCOREHotel_USCORERoomStateResult), "xsd:string"))
				{	soap_flag_Get_USCOREHotel_USCORERoomStateResult1--;
					continue;
				}
			/* transient soap skipped */
			soap_check_result(soap, "tempuri:Get_Hotel_RoomStateResult");
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_tempuri__Get_USCOREHotel_USCORERoomStateResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__tempuri__Get_USCOREHotel_USCORERoomStateResponse, 0, sizeof(_tempuri__Get_USCOREHotel_USCORERoomStateResponse), 0, soap_copy__tempuri__Get_USCOREHotel_USCORERoomStateResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int _tempuri__Get_USCOREHotel_USCORERoomStateResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE__tempuri__Get_USCOREHotel_USCORERoomStateResponse);
	if (this->soap_out(soap, tag?tag:"tempuri:Get_Hotel_RoomStateResponse", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_tempuri__Get_USCOREHotel_USCORERoomStateResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__tempuri__Get_USCOREHotel_USCORERoomStateResponse(soap, this, tag, type);
}

SOAP_FMAC3 _tempuri__Get_USCOREHotel_USCORERoomStateResponse * SOAP_FMAC4 soap_get__tempuri__Get_USCOREHotel_USCORERoomStateResponse(struct soap *soap, _tempuri__Get_USCOREHotel_USCORERoomStateResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in__tempuri__Get_USCOREHotel_USCORERoomStateResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _tempuri__Get_USCOREHotel_USCORERoomStateResponse * SOAP_FMAC2 soap_instantiate__tempuri__Get_USCOREHotel_USCORERoomStateResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__tempuri__Get_USCOREHotel_USCORERoomStateResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__tempuri__Get_USCOREHotel_USCORERoomStateResponse, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_tempuri__Get_USCOREHotel_USCORERoomStateResponse);
		if (size)
			*size = sizeof(_tempuri__Get_USCOREHotel_USCORERoomStateResponse);
		((_tempuri__Get_USCOREHotel_USCORERoomStateResponse*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(_tempuri__Get_USCOREHotel_USCORERoomStateResponse, n);
		if (size)
			*size = n * sizeof(_tempuri__Get_USCOREHotel_USCORERoomStateResponse);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((_tempuri__Get_USCOREHotel_USCORERoomStateResponse*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (_tempuri__Get_USCOREHotel_USCORERoomStateResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__tempuri__Get_USCOREHotel_USCORERoomStateResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _tempuri__Get_USCOREHotel_USCORERoomStateResponse %p -> %p\n", q, p));
	*(_tempuri__Get_USCOREHotel_USCORERoomStateResponse*)p = *(_tempuri__Get_USCOREHotel_USCORERoomStateResponse*)q;
}

void _tempuri__Get_USCOREHotel_USCORERoomState::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_tempuri__Get_USCOREHotel_USCORERoomState::CustomerID = NULL;
	this->_tempuri__Get_USCOREHotel_USCORERoomState::SignStr = NULL;
	this->_tempuri__Get_USCOREHotel_USCORERoomState::HotelID = NULL;
	this->_tempuri__Get_USCOREHotel_USCORERoomState::RoomID = NULL;
	this->_tempuri__Get_USCOREHotel_USCORERoomState::StartDate = NULL;
	this->_tempuri__Get_USCOREHotel_USCORERoomState::EndDate = NULL;
	/* transient soap skipped */
}

void _tempuri__Get_USCOREHotel_USCORERoomState::soap_serialize(struct soap *soap) const
{
#ifndef WITH_NOIDREF
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_PointerTostd__wstring(soap, &this->_tempuri__Get_USCOREHotel_USCORERoomState::CustomerID);
	soap_serialize_PointerTostd__wstring(soap, &this->_tempuri__Get_USCOREHotel_USCORERoomState::SignStr);
	soap_serialize_PointerToint(soap, &this->_tempuri__Get_USCOREHotel_USCORERoomState::HotelID);
	soap_serialize_PointerTostd__wstring(soap, &this->_tempuri__Get_USCOREHotel_USCORERoomState::RoomID);
	soap_serialize_PointerTostd__wstring(soap, &this->_tempuri__Get_USCOREHotel_USCORERoomState::StartDate);
	soap_serialize_PointerTostd__wstring(soap, &this->_tempuri__Get_USCOREHotel_USCORERoomState::EndDate);
	/* transient soap skipped */
#endif
}

int _tempuri__Get_USCOREHotel_USCORERoomState::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__tempuri__Get_USCOREHotel_USCORERoomState(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__tempuri__Get_USCOREHotel_USCORERoomState(struct soap *soap, const char *tag, int id, const _tempuri__Get_USCOREHotel_USCORERoomState *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__tempuri__Get_USCOREHotel_USCORERoomState), type))
		return soap->error;
	if (soap_out_PointerTostd__wstring(soap, "tempuri:CustomerID", -1, &(a->_tempuri__Get_USCOREHotel_USCORERoomState::CustomerID), ""))
		return soap->error;
	if (soap_out_PointerTostd__wstring(soap, "tempuri:SignStr", -1, &(a->_tempuri__Get_USCOREHotel_USCORERoomState::SignStr), ""))
		return soap->error;
	if (soap_out_PointerToint(soap, "tempuri:HotelID", -1, &(a->_tempuri__Get_USCOREHotel_USCORERoomState::HotelID), ""))
		return soap->error;
	if (soap_out_PointerTostd__wstring(soap, "tempuri:RoomID", -1, &(a->_tempuri__Get_USCOREHotel_USCORERoomState::RoomID), ""))
		return soap->error;
	if (soap_out_PointerTostd__wstring(soap, "tempuri:StartDate", -1, &(a->_tempuri__Get_USCOREHotel_USCORERoomState::StartDate), ""))
		return soap->error;
	if (soap_out_PointerTostd__wstring(soap, "tempuri:EndDate", -1, &(a->_tempuri__Get_USCOREHotel_USCORERoomState::EndDate), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_tempuri__Get_USCOREHotel_USCORERoomState::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__tempuri__Get_USCOREHotel_USCORERoomState(soap, tag, this, type);
}

SOAP_FMAC3 _tempuri__Get_USCOREHotel_USCORERoomState * SOAP_FMAC4 soap_in__tempuri__Get_USCOREHotel_USCORERoomState(struct soap *soap, const char *tag, _tempuri__Get_USCOREHotel_USCORERoomState *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_tempuri__Get_USCOREHotel_USCORERoomState *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__tempuri__Get_USCOREHotel_USCORERoomState, sizeof(_tempuri__Get_USCOREHotel_USCORERoomState), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__tempuri__Get_USCOREHotel_USCORERoomState)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_tempuri__Get_USCOREHotel_USCORERoomState *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_CustomerID1 = 1;
	size_t soap_flag_SignStr1 = 1;
	size_t soap_flag_HotelID1 = 1;
	size_t soap_flag_RoomID1 = 1;
	size_t soap_flag_StartDate1 = 1;
	size_t soap_flag_EndDate1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_CustomerID1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__wstring(soap, "tempuri:CustomerID", &(a->_tempuri__Get_USCOREHotel_USCORERoomState::CustomerID), "xsd:string"))
				{	soap_flag_CustomerID1--;
					continue;
				}
			if (soap_flag_SignStr1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__wstring(soap, "tempuri:SignStr", &(a->_tempuri__Get_USCOREHotel_USCORERoomState::SignStr), "xsd:string"))
				{	soap_flag_SignStr1--;
					continue;
				}
			if (soap_flag_HotelID1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToint(soap, "tempuri:HotelID", &(a->_tempuri__Get_USCOREHotel_USCORERoomState::HotelID), "xsd:int"))
				{	soap_flag_HotelID1--;
					continue;
				}
			if (soap_flag_RoomID1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__wstring(soap, "tempuri:RoomID", &(a->_tempuri__Get_USCOREHotel_USCORERoomState::RoomID), "xsd:string"))
				{	soap_flag_RoomID1--;
					continue;
				}
			if (soap_flag_StartDate1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__wstring(soap, "tempuri:StartDate", &(a->_tempuri__Get_USCOREHotel_USCORERoomState::StartDate), "xsd:string"))
				{	soap_flag_StartDate1--;
					continue;
				}
			if (soap_flag_EndDate1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__wstring(soap, "tempuri:EndDate", &(a->_tempuri__Get_USCOREHotel_USCORERoomState::EndDate), "xsd:string"))
				{	soap_flag_EndDate1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_tempuri__Get_USCOREHotel_USCORERoomState *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__tempuri__Get_USCOREHotel_USCORERoomState, 0, sizeof(_tempuri__Get_USCOREHotel_USCORERoomState), 0, soap_copy__tempuri__Get_USCOREHotel_USCORERoomState);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int _tempuri__Get_USCOREHotel_USCORERoomState::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE__tempuri__Get_USCOREHotel_USCORERoomState);
	if (this->soap_out(soap, tag?tag:"tempuri:Get_Hotel_RoomState", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_tempuri__Get_USCOREHotel_USCORERoomState::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__tempuri__Get_USCOREHotel_USCORERoomState(soap, this, tag, type);
}

SOAP_FMAC3 _tempuri__Get_USCOREHotel_USCORERoomState * SOAP_FMAC4 soap_get__tempuri__Get_USCOREHotel_USCORERoomState(struct soap *soap, _tempuri__Get_USCOREHotel_USCORERoomState *p, const char *tag, const char *type)
{
	if ((p = soap_in__tempuri__Get_USCOREHotel_USCORERoomState(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _tempuri__Get_USCOREHotel_USCORERoomState * SOAP_FMAC2 soap_instantiate__tempuri__Get_USCOREHotel_USCORERoomState(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__tempuri__Get_USCOREHotel_USCORERoomState(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__tempuri__Get_USCOREHotel_USCORERoomState, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_tempuri__Get_USCOREHotel_USCORERoomState);
		if (size)
			*size = sizeof(_tempuri__Get_USCOREHotel_USCORERoomState);
		((_tempuri__Get_USCOREHotel_USCORERoomState*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(_tempuri__Get_USCOREHotel_USCORERoomState, n);
		if (size)
			*size = n * sizeof(_tempuri__Get_USCOREHotel_USCORERoomState);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((_tempuri__Get_USCOREHotel_USCORERoomState*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (_tempuri__Get_USCOREHotel_USCORERoomState*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__tempuri__Get_USCOREHotel_USCORERoomState(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _tempuri__Get_USCOREHotel_USCORERoomState %p -> %p\n", q, p));
	*(_tempuri__Get_USCOREHotel_USCORERoomState*)p = *(_tempuri__Get_USCOREHotel_USCORERoomState*)q;
}

void _tempuri__Get_USCOREHotel_USCOREPriceResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_tempuri__Get_USCOREHotel_USCOREPriceResponse::Get_USCOREHotel_USCOREPriceResult = NULL;
	/* transient soap skipped */
}

void _tempuri__Get_USCOREHotel_USCOREPriceResponse::soap_serialize(struct soap *soap) const
{
#ifndef WITH_NOIDREF
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_PointerTostd__wstring(soap, &this->_tempuri__Get_USCOREHotel_USCOREPriceResponse::Get_USCOREHotel_USCOREPriceResult);
	/* transient soap skipped */
#endif
}

int _tempuri__Get_USCOREHotel_USCOREPriceResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__tempuri__Get_USCOREHotel_USCOREPriceResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__tempuri__Get_USCOREHotel_USCOREPriceResponse(struct soap *soap, const char *tag, int id, const _tempuri__Get_USCOREHotel_USCOREPriceResponse *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__tempuri__Get_USCOREHotel_USCOREPriceResponse), type))
		return soap->error;
	if (a->Get_USCOREHotel_USCOREPriceResult)
		soap_element_result(soap, "tempuri:Get_Hotel_PriceResult");
	if (soap_out_PointerTostd__wstring(soap, "tempuri:Get_Hotel_PriceResult", -1, &(a->_tempuri__Get_USCOREHotel_USCOREPriceResponse::Get_USCOREHotel_USCOREPriceResult), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_tempuri__Get_USCOREHotel_USCOREPriceResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__tempuri__Get_USCOREHotel_USCOREPriceResponse(soap, tag, this, type);
}

SOAP_FMAC3 _tempuri__Get_USCOREHotel_USCOREPriceResponse * SOAP_FMAC4 soap_in__tempuri__Get_USCOREHotel_USCOREPriceResponse(struct soap *soap, const char *tag, _tempuri__Get_USCOREHotel_USCOREPriceResponse *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_tempuri__Get_USCOREHotel_USCOREPriceResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__tempuri__Get_USCOREHotel_USCOREPriceResponse, sizeof(_tempuri__Get_USCOREHotel_USCOREPriceResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__tempuri__Get_USCOREHotel_USCOREPriceResponse)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_tempuri__Get_USCOREHotel_USCOREPriceResponse *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_Get_USCOREHotel_USCOREPriceResult1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_Get_USCOREHotel_USCOREPriceResult1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__wstring(soap, "tempuri:Get_Hotel_PriceResult", &(a->_tempuri__Get_USCOREHotel_USCOREPriceResponse::Get_USCOREHotel_USCOREPriceResult), "xsd:string"))
				{	soap_flag_Get_USCOREHotel_USCOREPriceResult1--;
					continue;
				}
			/* transient soap skipped */
			soap_check_result(soap, "tempuri:Get_Hotel_PriceResult");
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_tempuri__Get_USCOREHotel_USCOREPriceResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__tempuri__Get_USCOREHotel_USCOREPriceResponse, 0, sizeof(_tempuri__Get_USCOREHotel_USCOREPriceResponse), 0, soap_copy__tempuri__Get_USCOREHotel_USCOREPriceResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int _tempuri__Get_USCOREHotel_USCOREPriceResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE__tempuri__Get_USCOREHotel_USCOREPriceResponse);
	if (this->soap_out(soap, tag?tag:"tempuri:Get_Hotel_PriceResponse", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_tempuri__Get_USCOREHotel_USCOREPriceResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__tempuri__Get_USCOREHotel_USCOREPriceResponse(soap, this, tag, type);
}

SOAP_FMAC3 _tempuri__Get_USCOREHotel_USCOREPriceResponse * SOAP_FMAC4 soap_get__tempuri__Get_USCOREHotel_USCOREPriceResponse(struct soap *soap, _tempuri__Get_USCOREHotel_USCOREPriceResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in__tempuri__Get_USCOREHotel_USCOREPriceResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _tempuri__Get_USCOREHotel_USCOREPriceResponse * SOAP_FMAC2 soap_instantiate__tempuri__Get_USCOREHotel_USCOREPriceResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__tempuri__Get_USCOREHotel_USCOREPriceResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__tempuri__Get_USCOREHotel_USCOREPriceResponse, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_tempuri__Get_USCOREHotel_USCOREPriceResponse);
		if (size)
			*size = sizeof(_tempuri__Get_USCOREHotel_USCOREPriceResponse);
		((_tempuri__Get_USCOREHotel_USCOREPriceResponse*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(_tempuri__Get_USCOREHotel_USCOREPriceResponse, n);
		if (size)
			*size = n * sizeof(_tempuri__Get_USCOREHotel_USCOREPriceResponse);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((_tempuri__Get_USCOREHotel_USCOREPriceResponse*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (_tempuri__Get_USCOREHotel_USCOREPriceResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__tempuri__Get_USCOREHotel_USCOREPriceResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _tempuri__Get_USCOREHotel_USCOREPriceResponse %p -> %p\n", q, p));
	*(_tempuri__Get_USCOREHotel_USCOREPriceResponse*)p = *(_tempuri__Get_USCOREHotel_USCOREPriceResponse*)q;
}

void _tempuri__Get_USCOREHotel_USCOREPrice::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_tempuri__Get_USCOREHotel_USCOREPrice::CustomerID = NULL;
	this->_tempuri__Get_USCOREHotel_USCOREPrice::SignStr = NULL;
	this->_tempuri__Get_USCOREHotel_USCOREPrice::HotelID = NULL;
	this->_tempuri__Get_USCOREHotel_USCOREPrice::RoomID = NULL;
	this->_tempuri__Get_USCOREHotel_USCOREPrice::StartDate = NULL;
	this->_tempuri__Get_USCOREHotel_USCOREPrice::EndDate = NULL;
	/* transient soap skipped */
}

void _tempuri__Get_USCOREHotel_USCOREPrice::soap_serialize(struct soap *soap) const
{
#ifndef WITH_NOIDREF
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_PointerTostd__wstring(soap, &this->_tempuri__Get_USCOREHotel_USCOREPrice::CustomerID);
	soap_serialize_PointerTostd__wstring(soap, &this->_tempuri__Get_USCOREHotel_USCOREPrice::SignStr);
	soap_serialize_PointerToint(soap, &this->_tempuri__Get_USCOREHotel_USCOREPrice::HotelID);
	soap_serialize_PointerTostd__wstring(soap, &this->_tempuri__Get_USCOREHotel_USCOREPrice::RoomID);
	soap_serialize_PointerTostd__wstring(soap, &this->_tempuri__Get_USCOREHotel_USCOREPrice::StartDate);
	soap_serialize_PointerTostd__wstring(soap, &this->_tempuri__Get_USCOREHotel_USCOREPrice::EndDate);
	/* transient soap skipped */
#endif
}

int _tempuri__Get_USCOREHotel_USCOREPrice::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__tempuri__Get_USCOREHotel_USCOREPrice(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__tempuri__Get_USCOREHotel_USCOREPrice(struct soap *soap, const char *tag, int id, const _tempuri__Get_USCOREHotel_USCOREPrice *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__tempuri__Get_USCOREHotel_USCOREPrice), type))
		return soap->error;
	if (soap_out_PointerTostd__wstring(soap, "tempuri:CustomerID", -1, &(a->_tempuri__Get_USCOREHotel_USCOREPrice::CustomerID), ""))
		return soap->error;
	if (soap_out_PointerTostd__wstring(soap, "tempuri:SignStr", -1, &(a->_tempuri__Get_USCOREHotel_USCOREPrice::SignStr), ""))
		return soap->error;
	if (soap_out_PointerToint(soap, "tempuri:HotelID", -1, &(a->_tempuri__Get_USCOREHotel_USCOREPrice::HotelID), ""))
		return soap->error;
	if (soap_out_PointerTostd__wstring(soap, "tempuri:RoomID", -1, &(a->_tempuri__Get_USCOREHotel_USCOREPrice::RoomID), ""))
		return soap->error;
	if (soap_out_PointerTostd__wstring(soap, "tempuri:StartDate", -1, &(a->_tempuri__Get_USCOREHotel_USCOREPrice::StartDate), ""))
		return soap->error;
	if (soap_out_PointerTostd__wstring(soap, "tempuri:EndDate", -1, &(a->_tempuri__Get_USCOREHotel_USCOREPrice::EndDate), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_tempuri__Get_USCOREHotel_USCOREPrice::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__tempuri__Get_USCOREHotel_USCOREPrice(soap, tag, this, type);
}

SOAP_FMAC3 _tempuri__Get_USCOREHotel_USCOREPrice * SOAP_FMAC4 soap_in__tempuri__Get_USCOREHotel_USCOREPrice(struct soap *soap, const char *tag, _tempuri__Get_USCOREHotel_USCOREPrice *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_tempuri__Get_USCOREHotel_USCOREPrice *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__tempuri__Get_USCOREHotel_USCOREPrice, sizeof(_tempuri__Get_USCOREHotel_USCOREPrice), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__tempuri__Get_USCOREHotel_USCOREPrice)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_tempuri__Get_USCOREHotel_USCOREPrice *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_CustomerID1 = 1;
	size_t soap_flag_SignStr1 = 1;
	size_t soap_flag_HotelID1 = 1;
	size_t soap_flag_RoomID1 = 1;
	size_t soap_flag_StartDate1 = 1;
	size_t soap_flag_EndDate1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_CustomerID1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__wstring(soap, "tempuri:CustomerID", &(a->_tempuri__Get_USCOREHotel_USCOREPrice::CustomerID), "xsd:string"))
				{	soap_flag_CustomerID1--;
					continue;
				}
			if (soap_flag_SignStr1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__wstring(soap, "tempuri:SignStr", &(a->_tempuri__Get_USCOREHotel_USCOREPrice::SignStr), "xsd:string"))
				{	soap_flag_SignStr1--;
					continue;
				}
			if (soap_flag_HotelID1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToint(soap, "tempuri:HotelID", &(a->_tempuri__Get_USCOREHotel_USCOREPrice::HotelID), "xsd:int"))
				{	soap_flag_HotelID1--;
					continue;
				}
			if (soap_flag_RoomID1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__wstring(soap, "tempuri:RoomID", &(a->_tempuri__Get_USCOREHotel_USCOREPrice::RoomID), "xsd:string"))
				{	soap_flag_RoomID1--;
					continue;
				}
			if (soap_flag_StartDate1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__wstring(soap, "tempuri:StartDate", &(a->_tempuri__Get_USCOREHotel_USCOREPrice::StartDate), "xsd:string"))
				{	soap_flag_StartDate1--;
					continue;
				}
			if (soap_flag_EndDate1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__wstring(soap, "tempuri:EndDate", &(a->_tempuri__Get_USCOREHotel_USCOREPrice::EndDate), "xsd:string"))
				{	soap_flag_EndDate1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_tempuri__Get_USCOREHotel_USCOREPrice *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__tempuri__Get_USCOREHotel_USCOREPrice, 0, sizeof(_tempuri__Get_USCOREHotel_USCOREPrice), 0, soap_copy__tempuri__Get_USCOREHotel_USCOREPrice);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int _tempuri__Get_USCOREHotel_USCOREPrice::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE__tempuri__Get_USCOREHotel_USCOREPrice);
	if (this->soap_out(soap, tag?tag:"tempuri:Get_Hotel_Price", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_tempuri__Get_USCOREHotel_USCOREPrice::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__tempuri__Get_USCOREHotel_USCOREPrice(soap, this, tag, type);
}

SOAP_FMAC3 _tempuri__Get_USCOREHotel_USCOREPrice * SOAP_FMAC4 soap_get__tempuri__Get_USCOREHotel_USCOREPrice(struct soap *soap, _tempuri__Get_USCOREHotel_USCOREPrice *p, const char *tag, const char *type)
{
	if ((p = soap_in__tempuri__Get_USCOREHotel_USCOREPrice(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _tempuri__Get_USCOREHotel_USCOREPrice * SOAP_FMAC2 soap_instantiate__tempuri__Get_USCOREHotel_USCOREPrice(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__tempuri__Get_USCOREHotel_USCOREPrice(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__tempuri__Get_USCOREHotel_USCOREPrice, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_tempuri__Get_USCOREHotel_USCOREPrice);
		if (size)
			*size = sizeof(_tempuri__Get_USCOREHotel_USCOREPrice);
		((_tempuri__Get_USCOREHotel_USCOREPrice*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(_tempuri__Get_USCOREHotel_USCOREPrice, n);
		if (size)
			*size = n * sizeof(_tempuri__Get_USCOREHotel_USCOREPrice);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((_tempuri__Get_USCOREHotel_USCOREPrice*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (_tempuri__Get_USCOREHotel_USCOREPrice*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__tempuri__Get_USCOREHotel_USCOREPrice(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _tempuri__Get_USCOREHotel_USCOREPrice %p -> %p\n", q, p));
	*(_tempuri__Get_USCOREHotel_USCOREPrice*)p = *(_tempuri__Get_USCOREHotel_USCOREPrice*)q;
}

void _tempuri__Get_USCOREHotel_USCOREInfoResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_tempuri__Get_USCOREHotel_USCOREInfoResponse::Get_USCOREHotel_USCOREInfoResult = NULL;
	/* transient soap skipped */
}

void _tempuri__Get_USCOREHotel_USCOREInfoResponse::soap_serialize(struct soap *soap) const
{
#ifndef WITH_NOIDREF
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_PointerTostd__wstring(soap, &this->_tempuri__Get_USCOREHotel_USCOREInfoResponse::Get_USCOREHotel_USCOREInfoResult);
	/* transient soap skipped */
#endif
}

int _tempuri__Get_USCOREHotel_USCOREInfoResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__tempuri__Get_USCOREHotel_USCOREInfoResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__tempuri__Get_USCOREHotel_USCOREInfoResponse(struct soap *soap, const char *tag, int id, const _tempuri__Get_USCOREHotel_USCOREInfoResponse *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__tempuri__Get_USCOREHotel_USCOREInfoResponse), type))
		return soap->error;
	if (a->Get_USCOREHotel_USCOREInfoResult)
		soap_element_result(soap, "tempuri:Get_Hotel_InfoResult");
	if (soap_out_PointerTostd__wstring(soap, "tempuri:Get_Hotel_InfoResult", -1, &(a->_tempuri__Get_USCOREHotel_USCOREInfoResponse::Get_USCOREHotel_USCOREInfoResult), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_tempuri__Get_USCOREHotel_USCOREInfoResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__tempuri__Get_USCOREHotel_USCOREInfoResponse(soap, tag, this, type);
}

SOAP_FMAC3 _tempuri__Get_USCOREHotel_USCOREInfoResponse * SOAP_FMAC4 soap_in__tempuri__Get_USCOREHotel_USCOREInfoResponse(struct soap *soap, const char *tag, _tempuri__Get_USCOREHotel_USCOREInfoResponse *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_tempuri__Get_USCOREHotel_USCOREInfoResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__tempuri__Get_USCOREHotel_USCOREInfoResponse, sizeof(_tempuri__Get_USCOREHotel_USCOREInfoResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__tempuri__Get_USCOREHotel_USCOREInfoResponse)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_tempuri__Get_USCOREHotel_USCOREInfoResponse *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_Get_USCOREHotel_USCOREInfoResult1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_Get_USCOREHotel_USCOREInfoResult1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__wstring(soap, "tempuri:Get_Hotel_InfoResult", &(a->_tempuri__Get_USCOREHotel_USCOREInfoResponse::Get_USCOREHotel_USCOREInfoResult), "xsd:string"))
				{	soap_flag_Get_USCOREHotel_USCOREInfoResult1--;
					continue;
				}
			/* transient soap skipped */
			soap_check_result(soap, "tempuri:Get_Hotel_InfoResult");
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_tempuri__Get_USCOREHotel_USCOREInfoResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__tempuri__Get_USCOREHotel_USCOREInfoResponse, 0, sizeof(_tempuri__Get_USCOREHotel_USCOREInfoResponse), 0, soap_copy__tempuri__Get_USCOREHotel_USCOREInfoResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int _tempuri__Get_USCOREHotel_USCOREInfoResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE__tempuri__Get_USCOREHotel_USCOREInfoResponse);
	if (this->soap_out(soap, tag?tag:"tempuri:Get_Hotel_InfoResponse", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_tempuri__Get_USCOREHotel_USCOREInfoResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__tempuri__Get_USCOREHotel_USCOREInfoResponse(soap, this, tag, type);
}

SOAP_FMAC3 _tempuri__Get_USCOREHotel_USCOREInfoResponse * SOAP_FMAC4 soap_get__tempuri__Get_USCOREHotel_USCOREInfoResponse(struct soap *soap, _tempuri__Get_USCOREHotel_USCOREInfoResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in__tempuri__Get_USCOREHotel_USCOREInfoResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _tempuri__Get_USCOREHotel_USCOREInfoResponse * SOAP_FMAC2 soap_instantiate__tempuri__Get_USCOREHotel_USCOREInfoResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__tempuri__Get_USCOREHotel_USCOREInfoResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__tempuri__Get_USCOREHotel_USCOREInfoResponse, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_tempuri__Get_USCOREHotel_USCOREInfoResponse);
		if (size)
			*size = sizeof(_tempuri__Get_USCOREHotel_USCOREInfoResponse);
		((_tempuri__Get_USCOREHotel_USCOREInfoResponse*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(_tempuri__Get_USCOREHotel_USCOREInfoResponse, n);
		if (size)
			*size = n * sizeof(_tempuri__Get_USCOREHotel_USCOREInfoResponse);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((_tempuri__Get_USCOREHotel_USCOREInfoResponse*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (_tempuri__Get_USCOREHotel_USCOREInfoResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__tempuri__Get_USCOREHotel_USCOREInfoResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _tempuri__Get_USCOREHotel_USCOREInfoResponse %p -> %p\n", q, p));
	*(_tempuri__Get_USCOREHotel_USCOREInfoResponse*)p = *(_tempuri__Get_USCOREHotel_USCOREInfoResponse*)q;
}

void _tempuri__Get_USCOREHotel_USCOREInfo::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_tempuri__Get_USCOREHotel_USCOREInfo::CustomerID = NULL;
	this->_tempuri__Get_USCOREHotel_USCOREInfo::SignStr = NULL;
	this->_tempuri__Get_USCOREHotel_USCOREInfo::HotelID = NULL;
	/* transient soap skipped */
}

void _tempuri__Get_USCOREHotel_USCOREInfo::soap_serialize(struct soap *soap) const
{
#ifndef WITH_NOIDREF
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_PointerTostd__wstring(soap, &this->_tempuri__Get_USCOREHotel_USCOREInfo::CustomerID);
	soap_serialize_PointerTostd__wstring(soap, &this->_tempuri__Get_USCOREHotel_USCOREInfo::SignStr);
	soap_serialize_PointerToint(soap, &this->_tempuri__Get_USCOREHotel_USCOREInfo::HotelID);
	/* transient soap skipped */
#endif
}

int _tempuri__Get_USCOREHotel_USCOREInfo::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__tempuri__Get_USCOREHotel_USCOREInfo(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__tempuri__Get_USCOREHotel_USCOREInfo(struct soap *soap, const char *tag, int id, const _tempuri__Get_USCOREHotel_USCOREInfo *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__tempuri__Get_USCOREHotel_USCOREInfo), type))
		return soap->error;
	if (soap_out_PointerTostd__wstring(soap, "tempuri:CustomerID", -1, &(a->_tempuri__Get_USCOREHotel_USCOREInfo::CustomerID), ""))
		return soap->error;
	if (soap_out_PointerTostd__wstring(soap, "tempuri:SignStr", -1, &(a->_tempuri__Get_USCOREHotel_USCOREInfo::SignStr), ""))
		return soap->error;
	if (soap_out_PointerToint(soap, "tempuri:HotelID", -1, &(a->_tempuri__Get_USCOREHotel_USCOREInfo::HotelID), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_tempuri__Get_USCOREHotel_USCOREInfo::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__tempuri__Get_USCOREHotel_USCOREInfo(soap, tag, this, type);
}

SOAP_FMAC3 _tempuri__Get_USCOREHotel_USCOREInfo * SOAP_FMAC4 soap_in__tempuri__Get_USCOREHotel_USCOREInfo(struct soap *soap, const char *tag, _tempuri__Get_USCOREHotel_USCOREInfo *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_tempuri__Get_USCOREHotel_USCOREInfo *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__tempuri__Get_USCOREHotel_USCOREInfo, sizeof(_tempuri__Get_USCOREHotel_USCOREInfo), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__tempuri__Get_USCOREHotel_USCOREInfo)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_tempuri__Get_USCOREHotel_USCOREInfo *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_CustomerID1 = 1;
	size_t soap_flag_SignStr1 = 1;
	size_t soap_flag_HotelID1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_CustomerID1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__wstring(soap, "tempuri:CustomerID", &(a->_tempuri__Get_USCOREHotel_USCOREInfo::CustomerID), "xsd:string"))
				{	soap_flag_CustomerID1--;
					continue;
				}
			if (soap_flag_SignStr1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__wstring(soap, "tempuri:SignStr", &(a->_tempuri__Get_USCOREHotel_USCOREInfo::SignStr), "xsd:string"))
				{	soap_flag_SignStr1--;
					continue;
				}
			if (soap_flag_HotelID1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToint(soap, "tempuri:HotelID", &(a->_tempuri__Get_USCOREHotel_USCOREInfo::HotelID), "xsd:int"))
				{	soap_flag_HotelID1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_tempuri__Get_USCOREHotel_USCOREInfo *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__tempuri__Get_USCOREHotel_USCOREInfo, 0, sizeof(_tempuri__Get_USCOREHotel_USCOREInfo), 0, soap_copy__tempuri__Get_USCOREHotel_USCOREInfo);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int _tempuri__Get_USCOREHotel_USCOREInfo::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE__tempuri__Get_USCOREHotel_USCOREInfo);
	if (this->soap_out(soap, tag?tag:"tempuri:Get_Hotel_Info", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_tempuri__Get_USCOREHotel_USCOREInfo::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__tempuri__Get_USCOREHotel_USCOREInfo(soap, this, tag, type);
}

SOAP_FMAC3 _tempuri__Get_USCOREHotel_USCOREInfo * SOAP_FMAC4 soap_get__tempuri__Get_USCOREHotel_USCOREInfo(struct soap *soap, _tempuri__Get_USCOREHotel_USCOREInfo *p, const char *tag, const char *type)
{
	if ((p = soap_in__tempuri__Get_USCOREHotel_USCOREInfo(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _tempuri__Get_USCOREHotel_USCOREInfo * SOAP_FMAC2 soap_instantiate__tempuri__Get_USCOREHotel_USCOREInfo(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__tempuri__Get_USCOREHotel_USCOREInfo(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__tempuri__Get_USCOREHotel_USCOREInfo, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_tempuri__Get_USCOREHotel_USCOREInfo);
		if (size)
			*size = sizeof(_tempuri__Get_USCOREHotel_USCOREInfo);
		((_tempuri__Get_USCOREHotel_USCOREInfo*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(_tempuri__Get_USCOREHotel_USCOREInfo, n);
		if (size)
			*size = n * sizeof(_tempuri__Get_USCOREHotel_USCOREInfo);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((_tempuri__Get_USCOREHotel_USCOREInfo*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (_tempuri__Get_USCOREHotel_USCOREInfo*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__tempuri__Get_USCOREHotel_USCOREInfo(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _tempuri__Get_USCOREHotel_USCOREInfo %p -> %p\n", q, p));
	*(_tempuri__Get_USCOREHotel_USCOREInfo*)p = *(_tempuri__Get_USCOREHotel_USCOREInfo*)q;
}

void _tempuri__Get_USCOREHotel_USCOREListResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_tempuri__Get_USCOREHotel_USCOREListResponse::Get_USCOREHotel_USCOREListResult = NULL;
	/* transient soap skipped */
}

void _tempuri__Get_USCOREHotel_USCOREListResponse::soap_serialize(struct soap *soap) const
{
#ifndef WITH_NOIDREF
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_PointerTostd__wstring(soap, &this->_tempuri__Get_USCOREHotel_USCOREListResponse::Get_USCOREHotel_USCOREListResult);
	/* transient soap skipped */
#endif
}

int _tempuri__Get_USCOREHotel_USCOREListResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__tempuri__Get_USCOREHotel_USCOREListResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__tempuri__Get_USCOREHotel_USCOREListResponse(struct soap *soap, const char *tag, int id, const _tempuri__Get_USCOREHotel_USCOREListResponse *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__tempuri__Get_USCOREHotel_USCOREListResponse), type))
		return soap->error;
	if (a->Get_USCOREHotel_USCOREListResult)
		soap_element_result(soap, "tempuri:Get_Hotel_ListResult");
	if (soap_out_PointerTostd__wstring(soap, "tempuri:Get_Hotel_ListResult", -1, &(a->_tempuri__Get_USCOREHotel_USCOREListResponse::Get_USCOREHotel_USCOREListResult), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_tempuri__Get_USCOREHotel_USCOREListResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__tempuri__Get_USCOREHotel_USCOREListResponse(soap, tag, this, type);
}

SOAP_FMAC3 _tempuri__Get_USCOREHotel_USCOREListResponse * SOAP_FMAC4 soap_in__tempuri__Get_USCOREHotel_USCOREListResponse(struct soap *soap, const char *tag, _tempuri__Get_USCOREHotel_USCOREListResponse *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_tempuri__Get_USCOREHotel_USCOREListResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__tempuri__Get_USCOREHotel_USCOREListResponse, sizeof(_tempuri__Get_USCOREHotel_USCOREListResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__tempuri__Get_USCOREHotel_USCOREListResponse)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_tempuri__Get_USCOREHotel_USCOREListResponse *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_Get_USCOREHotel_USCOREListResult1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_Get_USCOREHotel_USCOREListResult1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__wstring(soap, "tempuri:Get_Hotel_ListResult", &(a->_tempuri__Get_USCOREHotel_USCOREListResponse::Get_USCOREHotel_USCOREListResult), "xsd:string"))
				{	soap_flag_Get_USCOREHotel_USCOREListResult1--;
					continue;
				}
			/* transient soap skipped */
			soap_check_result(soap, "tempuri:Get_Hotel_ListResult");
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_tempuri__Get_USCOREHotel_USCOREListResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__tempuri__Get_USCOREHotel_USCOREListResponse, 0, sizeof(_tempuri__Get_USCOREHotel_USCOREListResponse), 0, soap_copy__tempuri__Get_USCOREHotel_USCOREListResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int _tempuri__Get_USCOREHotel_USCOREListResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE__tempuri__Get_USCOREHotel_USCOREListResponse);
	if (this->soap_out(soap, tag?tag:"tempuri:Get_Hotel_ListResponse", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_tempuri__Get_USCOREHotel_USCOREListResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__tempuri__Get_USCOREHotel_USCOREListResponse(soap, this, tag, type);
}

SOAP_FMAC3 _tempuri__Get_USCOREHotel_USCOREListResponse * SOAP_FMAC4 soap_get__tempuri__Get_USCOREHotel_USCOREListResponse(struct soap *soap, _tempuri__Get_USCOREHotel_USCOREListResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in__tempuri__Get_USCOREHotel_USCOREListResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _tempuri__Get_USCOREHotel_USCOREListResponse * SOAP_FMAC2 soap_instantiate__tempuri__Get_USCOREHotel_USCOREListResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__tempuri__Get_USCOREHotel_USCOREListResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__tempuri__Get_USCOREHotel_USCOREListResponse, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_tempuri__Get_USCOREHotel_USCOREListResponse);
		if (size)
			*size = sizeof(_tempuri__Get_USCOREHotel_USCOREListResponse);
		((_tempuri__Get_USCOREHotel_USCOREListResponse*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(_tempuri__Get_USCOREHotel_USCOREListResponse, n);
		if (size)
			*size = n * sizeof(_tempuri__Get_USCOREHotel_USCOREListResponse);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((_tempuri__Get_USCOREHotel_USCOREListResponse*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (_tempuri__Get_USCOREHotel_USCOREListResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__tempuri__Get_USCOREHotel_USCOREListResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _tempuri__Get_USCOREHotel_USCOREListResponse %p -> %p\n", q, p));
	*(_tempuri__Get_USCOREHotel_USCOREListResponse*)p = *(_tempuri__Get_USCOREHotel_USCOREListResponse*)q;
}

void _tempuri__Get_USCOREHotel_USCOREList::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_tempuri__Get_USCOREHotel_USCOREList::CustomerID = NULL;
	this->_tempuri__Get_USCOREHotel_USCOREList::SignStr = NULL;
	this->_tempuri__Get_USCOREHotel_USCOREList::LastAccessDate = NULL;
	/* transient soap skipped */
}

void _tempuri__Get_USCOREHotel_USCOREList::soap_serialize(struct soap *soap) const
{
#ifndef WITH_NOIDREF
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_PointerTostd__wstring(soap, &this->_tempuri__Get_USCOREHotel_USCOREList::CustomerID);
	soap_serialize_PointerTostd__wstring(soap, &this->_tempuri__Get_USCOREHotel_USCOREList::SignStr);
	soap_serialize_PointerTostd__wstring(soap, &this->_tempuri__Get_USCOREHotel_USCOREList::LastAccessDate);
	/* transient soap skipped */
#endif
}

int _tempuri__Get_USCOREHotel_USCOREList::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__tempuri__Get_USCOREHotel_USCOREList(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__tempuri__Get_USCOREHotel_USCOREList(struct soap *soap, const char *tag, int id, const _tempuri__Get_USCOREHotel_USCOREList *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__tempuri__Get_USCOREHotel_USCOREList), type))
		return soap->error;
	if (soap_out_PointerTostd__wstring(soap, "tempuri:CustomerID", -1, &(a->_tempuri__Get_USCOREHotel_USCOREList::CustomerID), ""))
		return soap->error;
	if (soap_out_PointerTostd__wstring(soap, "tempuri:SignStr", -1, &(a->_tempuri__Get_USCOREHotel_USCOREList::SignStr), ""))
		return soap->error;
	if (soap_out_PointerTostd__wstring(soap, "tempuri:LastAccessDate", -1, &(a->_tempuri__Get_USCOREHotel_USCOREList::LastAccessDate), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_tempuri__Get_USCOREHotel_USCOREList::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__tempuri__Get_USCOREHotel_USCOREList(soap, tag, this, type);
}

SOAP_FMAC3 _tempuri__Get_USCOREHotel_USCOREList * SOAP_FMAC4 soap_in__tempuri__Get_USCOREHotel_USCOREList(struct soap *soap, const char *tag, _tempuri__Get_USCOREHotel_USCOREList *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_tempuri__Get_USCOREHotel_USCOREList *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__tempuri__Get_USCOREHotel_USCOREList, sizeof(_tempuri__Get_USCOREHotel_USCOREList), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__tempuri__Get_USCOREHotel_USCOREList)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_tempuri__Get_USCOREHotel_USCOREList *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_CustomerID1 = 1;
	size_t soap_flag_SignStr1 = 1;
	size_t soap_flag_LastAccessDate1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_CustomerID1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__wstring(soap, "tempuri:CustomerID", &(a->_tempuri__Get_USCOREHotel_USCOREList::CustomerID), "xsd:string"))
				{	soap_flag_CustomerID1--;
					continue;
				}
			if (soap_flag_SignStr1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__wstring(soap, "tempuri:SignStr", &(a->_tempuri__Get_USCOREHotel_USCOREList::SignStr), "xsd:string"))
				{	soap_flag_SignStr1--;
					continue;
				}
			if (soap_flag_LastAccessDate1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__wstring(soap, "tempuri:LastAccessDate", &(a->_tempuri__Get_USCOREHotel_USCOREList::LastAccessDate), "xsd:string"))
				{	soap_flag_LastAccessDate1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_tempuri__Get_USCOREHotel_USCOREList *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__tempuri__Get_USCOREHotel_USCOREList, 0, sizeof(_tempuri__Get_USCOREHotel_USCOREList), 0, soap_copy__tempuri__Get_USCOREHotel_USCOREList);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int _tempuri__Get_USCOREHotel_USCOREList::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE__tempuri__Get_USCOREHotel_USCOREList);
	if (this->soap_out(soap, tag?tag:"tempuri:Get_Hotel_List", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_tempuri__Get_USCOREHotel_USCOREList::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__tempuri__Get_USCOREHotel_USCOREList(soap, this, tag, type);
}

SOAP_FMAC3 _tempuri__Get_USCOREHotel_USCOREList * SOAP_FMAC4 soap_get__tempuri__Get_USCOREHotel_USCOREList(struct soap *soap, _tempuri__Get_USCOREHotel_USCOREList *p, const char *tag, const char *type)
{
	if ((p = soap_in__tempuri__Get_USCOREHotel_USCOREList(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _tempuri__Get_USCOREHotel_USCOREList * SOAP_FMAC2 soap_instantiate__tempuri__Get_USCOREHotel_USCOREList(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__tempuri__Get_USCOREHotel_USCOREList(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__tempuri__Get_USCOREHotel_USCOREList, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_tempuri__Get_USCOREHotel_USCOREList);
		if (size)
			*size = sizeof(_tempuri__Get_USCOREHotel_USCOREList);
		((_tempuri__Get_USCOREHotel_USCOREList*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(_tempuri__Get_USCOREHotel_USCOREList, n);
		if (size)
			*size = n * sizeof(_tempuri__Get_USCOREHotel_USCOREList);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((_tempuri__Get_USCOREHotel_USCOREList*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (_tempuri__Get_USCOREHotel_USCOREList*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__tempuri__Get_USCOREHotel_USCOREList(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _tempuri__Get_USCOREHotel_USCOREList %p -> %p\n", q, p));
	*(_tempuri__Get_USCOREHotel_USCOREList*)p = *(_tempuri__Get_USCOREHotel_USCOREList*)q;
}

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Fault(struct soap *soap, struct SOAP_ENV__Fault *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default__QName(soap, &a->faultcode);
	soap_default_string(soap, &a->faultstring);
	soap_default_string(soap, &a->faultactor);
	a->detail = NULL;
	a->SOAP_ENV__Code = NULL;
	a->SOAP_ENV__Reason = NULL;
	soap_default_string(soap, &a->SOAP_ENV__Node);
	soap_default_string(soap, &a->SOAP_ENV__Role);
	a->SOAP_ENV__Detail = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Fault(struct soap *soap, const struct SOAP_ENV__Fault *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize__QName(soap, &a->faultcode);
	soap_serialize_string(soap, &a->faultstring);
	soap_serialize_string(soap, &a->faultactor);
	soap_serialize_PointerToSOAP_ENV__Detail(soap, &a->detail);
	soap_serialize_PointerToSOAP_ENV__Code(soap, &a->SOAP_ENV__Code);
	soap_serialize_PointerToSOAP_ENV__Reason(soap, &a->SOAP_ENV__Reason);
	soap_serialize_string(soap, &a->SOAP_ENV__Node);
	soap_serialize_string(soap, &a->SOAP_ENV__Role);
	soap_serialize_PointerToSOAP_ENV__Detail(soap, &a->SOAP_ENV__Detail);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Fault(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Fault *a, const char *type)
{
	const char *soap_tmp_faultcode = soap_QName2s(soap, a->faultcode);
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Fault), type))
		return soap->error;
	if (soap_out__QName(soap, "faultcode", -1, (char*const*)&soap_tmp_faultcode, ""))
		return soap->error;
	if (soap_out_string(soap, "faultstring", -1, &a->faultstring, ""))
		return soap->error;
	if (soap_out_string(soap, "faultactor", -1, &a->faultactor, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Detail(soap, "detail", -1, &a->detail, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Code(soap, "SOAP-ENV:Code", -1, &a->SOAP_ENV__Code, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Reason(soap, "SOAP-ENV:Reason", -1, &a->SOAP_ENV__Reason, ""))
		return soap->error;
	if (soap_out_string(soap, "SOAP-ENV:Node", -1, &a->SOAP_ENV__Node, ""))
		return soap->error;
	if (soap_out_string(soap, "SOAP-ENV:Role", -1, &a->SOAP_ENV__Role, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Detail(soap, "SOAP-ENV:Detail", -1, &a->SOAP_ENV__Detail, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_in_SOAP_ENV__Fault(struct soap *soap, const char *tag, struct SOAP_ENV__Fault *a, const char *type)
{
	size_t soap_flag_faultcode = 1;
	size_t soap_flag_faultstring = 1;
	size_t soap_flag_faultactor = 1;
	size_t soap_flag_detail = 1;
	size_t soap_flag_SOAP_ENV__Code = 1;
	size_t soap_flag_SOAP_ENV__Reason = 1;
	size_t soap_flag_SOAP_ENV__Node = 1;
	size_t soap_flag_SOAP_ENV__Role = 1;
	size_t soap_flag_SOAP_ENV__Detail = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Fault *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Fault, sizeof(struct SOAP_ENV__Fault), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Fault(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_faultcode && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in__QName(soap, "faultcode", &a->faultcode, ""))
				{	soap_flag_faultcode--;
					continue;
				}
			if (soap_flag_faultstring && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "faultstring", &a->faultstring, "xsd:string"))
				{	soap_flag_faultstring--;
					continue;
				}
			if (soap_flag_faultactor && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "faultactor", &a->faultactor, "xsd:string"))
				{	soap_flag_faultactor--;
					continue;
				}
			if (soap_flag_detail && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToSOAP_ENV__Detail(soap, "detail", &a->detail, ""))
				{	soap_flag_detail--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Code && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToSOAP_ENV__Code(soap, "SOAP-ENV:Code", &a->SOAP_ENV__Code, ""))
				{	soap_flag_SOAP_ENV__Code--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Reason && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToSOAP_ENV__Reason(soap, "SOAP-ENV:Reason", &a->SOAP_ENV__Reason, ""))
				{	soap_flag_SOAP_ENV__Reason--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Node && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "SOAP-ENV:Node", &a->SOAP_ENV__Node, "xsd:string"))
				{	soap_flag_SOAP_ENV__Node--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Role && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "SOAP-ENV:Role", &a->SOAP_ENV__Role, "xsd:string"))
				{	soap_flag_SOAP_ENV__Role--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Detail && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToSOAP_ENV__Detail(soap, "SOAP-ENV:Detail", &a->SOAP_ENV__Detail, ""))
				{	soap_flag_SOAP_ENV__Detail--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Fault *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SOAP_ENV__Fault, 0, sizeof(struct SOAP_ENV__Fault), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Fault(struct soap *soap, const struct SOAP_ENV__Fault *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_SOAP_ENV__Fault);
	if (soap_out_SOAP_ENV__Fault(soap, tag?tag:"SOAP-ENV:Fault", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_get_SOAP_ENV__Fault(struct soap *soap, struct SOAP_ENV__Fault *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Fault(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct SOAP_ENV__Fault * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Fault(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Fault(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_SOAP_ENV__Fault, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct SOAP_ENV__Fault);
		if (size)
			*size = sizeof(struct SOAP_ENV__Fault);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct SOAP_ENV__Fault, n);
		if (size)
			*size = n * sizeof(struct SOAP_ENV__Fault);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct SOAP_ENV__Fault*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Fault(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct SOAP_ENV__Fault %p -> %p\n", q, p));
	*(struct SOAP_ENV__Fault*)p = *(struct SOAP_ENV__Fault*)q;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_string(soap, &a->SOAP_ENV__Text);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Reason(struct soap *soap, const struct SOAP_ENV__Reason *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_string(soap, &a->SOAP_ENV__Text);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Reason(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Reason *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Reason), type))
		return soap->error;
	if (soap->lang)
		soap_set_attr(soap, "xml:lang", soap->lang, 1);
	if (soap_out_string(soap, "SOAP-ENV:Text", -1, &a->SOAP_ENV__Text, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_in_SOAP_ENV__Reason(struct soap *soap, const char *tag, struct SOAP_ENV__Reason *a, const char *type)
{
	size_t soap_flag_SOAP_ENV__Text = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Reason *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Reason, sizeof(struct SOAP_ENV__Reason), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Reason(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_SOAP_ENV__Text && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "SOAP-ENV:Text", &a->SOAP_ENV__Text, "xsd:string"))
				{	soap_flag_SOAP_ENV__Text--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Reason *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SOAP_ENV__Reason, 0, sizeof(struct SOAP_ENV__Reason), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Reason(struct soap *soap, const struct SOAP_ENV__Reason *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_SOAP_ENV__Reason);
	if (soap_out_SOAP_ENV__Reason(soap, tag?tag:"SOAP-ENV:Reason", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_get_SOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Reason(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct SOAP_ENV__Reason * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Reason(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Reason(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_SOAP_ENV__Reason, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct SOAP_ENV__Reason);
		if (size)
			*size = sizeof(struct SOAP_ENV__Reason);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct SOAP_ENV__Reason, n);
		if (size)
			*size = n * sizeof(struct SOAP_ENV__Reason);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct SOAP_ENV__Reason*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Reason(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct SOAP_ENV__Reason %p -> %p\n", q, p));
	*(struct SOAP_ENV__Reason*)p = *(struct SOAP_ENV__Reason*)q;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->__any = NULL;
	a->__type = 0;
	a->fault = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Detail(struct soap *soap, const struct SOAP_ENV__Detail *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_markelement(soap, a->fault, a->__type);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Detail(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Detail *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Detail), type))
		return soap->error;
	soap_outliteral(soap, "-any", &a->__any, NULL);
	if (soap_putelement(soap, a->fault, "fault", -1, a->__type))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_in_SOAP_ENV__Detail(struct soap *soap, const char *tag, struct SOAP_ENV__Detail *a, const char *type)
{
	size_t soap_flag___any = 1;
	size_t soap_flag_fault = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Detail *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Detail, sizeof(struct SOAP_ENV__Detail), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Detail(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_fault && soap->error == SOAP_TAG_MISMATCH)
				if ((a->fault = soap_getelement(soap, &a->__type)))
				{	soap_flag_fault = 0;
					continue;
				}
			if (soap_flag___any && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_inliteral(soap, "-any", &a->__any))
				{	soap_flag___any--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Detail *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SOAP_ENV__Detail, 0, sizeof(struct SOAP_ENV__Detail), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Detail(struct soap *soap, const struct SOAP_ENV__Detail *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_SOAP_ENV__Detail);
	if (soap_out_SOAP_ENV__Detail(soap, tag?tag:"SOAP-ENV:Detail", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_get_SOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Detail(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct SOAP_ENV__Detail * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Detail(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Detail(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_SOAP_ENV__Detail, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct SOAP_ENV__Detail);
		if (size)
			*size = sizeof(struct SOAP_ENV__Detail);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct SOAP_ENV__Detail, n);
		if (size)
			*size = n * sizeof(struct SOAP_ENV__Detail);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct SOAP_ENV__Detail*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Detail(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct SOAP_ENV__Detail %p -> %p\n", q, p));
	*(struct SOAP_ENV__Detail*)p = *(struct SOAP_ENV__Detail*)q;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default__QName(soap, &a->SOAP_ENV__Value);
	a->SOAP_ENV__Subcode = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Code(struct soap *soap, const struct SOAP_ENV__Code *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize__QName(soap, &a->SOAP_ENV__Value);
	soap_serialize_PointerToSOAP_ENV__Code(soap, &a->SOAP_ENV__Subcode);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Code(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Code *a, const char *type)
{
	const char *soap_tmp_SOAP_ENV__Value = soap_QName2s(soap, a->SOAP_ENV__Value);
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Code), type))
		return soap->error;
	if (soap_out__QName(soap, "SOAP-ENV:Value", -1, (char*const*)&soap_tmp_SOAP_ENV__Value, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Code(soap, "SOAP-ENV:Subcode", -1, &a->SOAP_ENV__Subcode, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_in_SOAP_ENV__Code(struct soap *soap, const char *tag, struct SOAP_ENV__Code *a, const char *type)
{
	size_t soap_flag_SOAP_ENV__Value = 1;
	size_t soap_flag_SOAP_ENV__Subcode = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Code *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Code, sizeof(struct SOAP_ENV__Code), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Code(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_SOAP_ENV__Value && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in__QName(soap, "SOAP-ENV:Value", &a->SOAP_ENV__Value, ""))
				{	soap_flag_SOAP_ENV__Value--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Subcode && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToSOAP_ENV__Code(soap, "SOAP-ENV:Subcode", &a->SOAP_ENV__Subcode, ""))
				{	soap_flag_SOAP_ENV__Subcode--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Code *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SOAP_ENV__Code, 0, sizeof(struct SOAP_ENV__Code), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Code(struct soap *soap, const struct SOAP_ENV__Code *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_SOAP_ENV__Code);
	if (soap_out_SOAP_ENV__Code(soap, tag?tag:"SOAP-ENV:Code", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_get_SOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Code(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct SOAP_ENV__Code * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Code(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Code(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_SOAP_ENV__Code, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct SOAP_ENV__Code);
		if (size)
			*size = sizeof(struct SOAP_ENV__Code);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct SOAP_ENV__Code, n);
		if (size)
			*size = n * sizeof(struct SOAP_ENV__Code);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct SOAP_ENV__Code*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Code(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct SOAP_ENV__Code %p -> %p\n", q, p));
	*(struct SOAP_ENV__Code*)p = *(struct SOAP_ENV__Code*)q;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Header(struct soap *soap, struct SOAP_ENV__Header *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Header(struct soap *soap, const struct SOAP_ENV__Header *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Header(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Header *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Header), type))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_in_SOAP_ENV__Header(struct soap *soap, const char *tag, struct SOAP_ENV__Header *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Header *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Header, sizeof(struct SOAP_ENV__Header), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Header(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Header *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SOAP_ENV__Header, 0, sizeof(struct SOAP_ENV__Header), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Header(struct soap *soap, const struct SOAP_ENV__Header *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_SOAP_ENV__Header);
	if (soap_out_SOAP_ENV__Header(soap, tag?tag:"SOAP-ENV:Header", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_get_SOAP_ENV__Header(struct soap *soap, struct SOAP_ENV__Header *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Header(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct SOAP_ENV__Header * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Header(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Header(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_SOAP_ENV__Header, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct SOAP_ENV__Header);
		if (size)
			*size = sizeof(struct SOAP_ENV__Header);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct SOAP_ENV__Header, n);
		if (size)
			*size = n * sizeof(struct SOAP_ENV__Header);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct SOAP_ENV__Header*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Header(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct SOAP_ENV__Header %p -> %p\n", q, p));
	*(struct SOAP_ENV__Header*)p = *(struct SOAP_ENV__Header*)q;
}

#endif

SOAP_FMAC3 void SOAP_FMAC4 soap_default___tempuri__Get_USCOREOrder_USCOREList(struct soap *soap, struct __tempuri__Get_USCOREOrder_USCOREList *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->tempuri__Get_USCOREOrder_USCOREList = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___tempuri__Get_USCOREOrder_USCOREList(struct soap *soap, const struct __tempuri__Get_USCOREOrder_USCOREList *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTo_tempuri__Get_USCOREOrder_USCOREList(soap, &a->tempuri__Get_USCOREOrder_USCOREList);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___tempuri__Get_USCOREOrder_USCOREList(struct soap *soap, const char *tag, int id, const struct __tempuri__Get_USCOREOrder_USCOREList *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_out_PointerTo_tempuri__Get_USCOREOrder_USCOREList(soap, "tempuri:Get_Order_List", -1, &a->tempuri__Get_USCOREOrder_USCOREList, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __tempuri__Get_USCOREOrder_USCOREList * SOAP_FMAC4 soap_in___tempuri__Get_USCOREOrder_USCOREList(struct soap *soap, const char *tag, struct __tempuri__Get_USCOREOrder_USCOREList *a, const char *type)
{
	size_t soap_flag_tempuri__Get_USCOREOrder_USCOREList = 1;
	short soap_flag;
	a = (struct __tempuri__Get_USCOREOrder_USCOREList *)soap_id_enter(soap, "", a, SOAP_TYPE___tempuri__Get_USCOREOrder_USCOREList, sizeof(struct __tempuri__Get_USCOREOrder_USCOREList), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___tempuri__Get_USCOREOrder_USCOREList(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_tempuri__Get_USCOREOrder_USCOREList && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_tempuri__Get_USCOREOrder_USCOREList(soap, "tempuri:Get_Order_List", &a->tempuri__Get_USCOREOrder_USCOREList, ""))
				{	soap_flag_tempuri__Get_USCOREOrder_USCOREList--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___tempuri__Get_USCOREOrder_USCOREList(struct soap *soap, const struct __tempuri__Get_USCOREOrder_USCOREList *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___tempuri__Get_USCOREOrder_USCOREList(soap, tag?tag:"-tempuri:Get_Order_List", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __tempuri__Get_USCOREOrder_USCOREList * SOAP_FMAC4 soap_get___tempuri__Get_USCOREOrder_USCOREList(struct soap *soap, struct __tempuri__Get_USCOREOrder_USCOREList *p, const char *tag, const char *type)
{
	if ((p = soap_in___tempuri__Get_USCOREOrder_USCOREList(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __tempuri__Get_USCOREOrder_USCOREList * SOAP_FMAC2 soap_instantiate___tempuri__Get_USCOREOrder_USCOREList(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___tempuri__Get_USCOREOrder_USCOREList(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___tempuri__Get_USCOREOrder_USCOREList, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct __tempuri__Get_USCOREOrder_USCOREList);
		if (size)
			*size = sizeof(struct __tempuri__Get_USCOREOrder_USCOREList);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct __tempuri__Get_USCOREOrder_USCOREList, n);
		if (size)
			*size = n * sizeof(struct __tempuri__Get_USCOREOrder_USCOREList);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct __tempuri__Get_USCOREOrder_USCOREList*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___tempuri__Get_USCOREOrder_USCOREList(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __tempuri__Get_USCOREOrder_USCOREList %p -> %p\n", q, p));
	*(struct __tempuri__Get_USCOREOrder_USCOREList*)p = *(struct __tempuri__Get_USCOREOrder_USCOREList*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___tempuri__Get_USCOREOrder(struct soap *soap, struct __tempuri__Get_USCOREOrder *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->tempuri__Get_USCOREOrder = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___tempuri__Get_USCOREOrder(struct soap *soap, const struct __tempuri__Get_USCOREOrder *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTo_tempuri__Get_USCOREOrder(soap, &a->tempuri__Get_USCOREOrder);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___tempuri__Get_USCOREOrder(struct soap *soap, const char *tag, int id, const struct __tempuri__Get_USCOREOrder *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_out_PointerTo_tempuri__Get_USCOREOrder(soap, "tempuri:Get_Order", -1, &a->tempuri__Get_USCOREOrder, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __tempuri__Get_USCOREOrder * SOAP_FMAC4 soap_in___tempuri__Get_USCOREOrder(struct soap *soap, const char *tag, struct __tempuri__Get_USCOREOrder *a, const char *type)
{
	size_t soap_flag_tempuri__Get_USCOREOrder = 1;
	short soap_flag;
	a = (struct __tempuri__Get_USCOREOrder *)soap_id_enter(soap, "", a, SOAP_TYPE___tempuri__Get_USCOREOrder, sizeof(struct __tempuri__Get_USCOREOrder), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___tempuri__Get_USCOREOrder(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_tempuri__Get_USCOREOrder && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_tempuri__Get_USCOREOrder(soap, "tempuri:Get_Order", &a->tempuri__Get_USCOREOrder, ""))
				{	soap_flag_tempuri__Get_USCOREOrder--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___tempuri__Get_USCOREOrder(struct soap *soap, const struct __tempuri__Get_USCOREOrder *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___tempuri__Get_USCOREOrder(soap, tag?tag:"-tempuri:Get_Order", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __tempuri__Get_USCOREOrder * SOAP_FMAC4 soap_get___tempuri__Get_USCOREOrder(struct soap *soap, struct __tempuri__Get_USCOREOrder *p, const char *tag, const char *type)
{
	if ((p = soap_in___tempuri__Get_USCOREOrder(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __tempuri__Get_USCOREOrder * SOAP_FMAC2 soap_instantiate___tempuri__Get_USCOREOrder(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___tempuri__Get_USCOREOrder(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___tempuri__Get_USCOREOrder, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct __tempuri__Get_USCOREOrder);
		if (size)
			*size = sizeof(struct __tempuri__Get_USCOREOrder);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct __tempuri__Get_USCOREOrder, n);
		if (size)
			*size = n * sizeof(struct __tempuri__Get_USCOREOrder);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct __tempuri__Get_USCOREOrder*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___tempuri__Get_USCOREOrder(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __tempuri__Get_USCOREOrder %p -> %p\n", q, p));
	*(struct __tempuri__Get_USCOREOrder*)p = *(struct __tempuri__Get_USCOREOrder*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___tempuri__Book_USCOREApply(struct soap *soap, struct __tempuri__Book_USCOREApply *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->tempuri__Book_USCOREApply = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___tempuri__Book_USCOREApply(struct soap *soap, const struct __tempuri__Book_USCOREApply *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTo_tempuri__Book_USCOREApply(soap, &a->tempuri__Book_USCOREApply);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___tempuri__Book_USCOREApply(struct soap *soap, const char *tag, int id, const struct __tempuri__Book_USCOREApply *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_out_PointerTo_tempuri__Book_USCOREApply(soap, "tempuri:Book_Apply", -1, &a->tempuri__Book_USCOREApply, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __tempuri__Book_USCOREApply * SOAP_FMAC4 soap_in___tempuri__Book_USCOREApply(struct soap *soap, const char *tag, struct __tempuri__Book_USCOREApply *a, const char *type)
{
	size_t soap_flag_tempuri__Book_USCOREApply = 1;
	short soap_flag;
	a = (struct __tempuri__Book_USCOREApply *)soap_id_enter(soap, "", a, SOAP_TYPE___tempuri__Book_USCOREApply, sizeof(struct __tempuri__Book_USCOREApply), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___tempuri__Book_USCOREApply(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_tempuri__Book_USCOREApply && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_tempuri__Book_USCOREApply(soap, "tempuri:Book_Apply", &a->tempuri__Book_USCOREApply, ""))
				{	soap_flag_tempuri__Book_USCOREApply--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___tempuri__Book_USCOREApply(struct soap *soap, const struct __tempuri__Book_USCOREApply *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___tempuri__Book_USCOREApply(soap, tag?tag:"-tempuri:Book_Apply", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __tempuri__Book_USCOREApply * SOAP_FMAC4 soap_get___tempuri__Book_USCOREApply(struct soap *soap, struct __tempuri__Book_USCOREApply *p, const char *tag, const char *type)
{
	if ((p = soap_in___tempuri__Book_USCOREApply(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __tempuri__Book_USCOREApply * SOAP_FMAC2 soap_instantiate___tempuri__Book_USCOREApply(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___tempuri__Book_USCOREApply(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___tempuri__Book_USCOREApply, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct __tempuri__Book_USCOREApply);
		if (size)
			*size = sizeof(struct __tempuri__Book_USCOREApply);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct __tempuri__Book_USCOREApply, n);
		if (size)
			*size = n * sizeof(struct __tempuri__Book_USCOREApply);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct __tempuri__Book_USCOREApply*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___tempuri__Book_USCOREApply(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __tempuri__Book_USCOREApply %p -> %p\n", q, p));
	*(struct __tempuri__Book_USCOREApply*)p = *(struct __tempuri__Book_USCOREApply*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___tempuri__Book_USCOREModify_USCOREPlus(struct soap *soap, struct __tempuri__Book_USCOREModify_USCOREPlus *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->tempuri__Book_USCOREModify_USCOREPlus = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___tempuri__Book_USCOREModify_USCOREPlus(struct soap *soap, const struct __tempuri__Book_USCOREModify_USCOREPlus *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTo_tempuri__Book_USCOREModify_USCOREPlus(soap, &a->tempuri__Book_USCOREModify_USCOREPlus);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___tempuri__Book_USCOREModify_USCOREPlus(struct soap *soap, const char *tag, int id, const struct __tempuri__Book_USCOREModify_USCOREPlus *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_out_PointerTo_tempuri__Book_USCOREModify_USCOREPlus(soap, "tempuri:Book_Modify_Plus", -1, &a->tempuri__Book_USCOREModify_USCOREPlus, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __tempuri__Book_USCOREModify_USCOREPlus * SOAP_FMAC4 soap_in___tempuri__Book_USCOREModify_USCOREPlus(struct soap *soap, const char *tag, struct __tempuri__Book_USCOREModify_USCOREPlus *a, const char *type)
{
	size_t soap_flag_tempuri__Book_USCOREModify_USCOREPlus = 1;
	short soap_flag;
	a = (struct __tempuri__Book_USCOREModify_USCOREPlus *)soap_id_enter(soap, "", a, SOAP_TYPE___tempuri__Book_USCOREModify_USCOREPlus, sizeof(struct __tempuri__Book_USCOREModify_USCOREPlus), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___tempuri__Book_USCOREModify_USCOREPlus(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_tempuri__Book_USCOREModify_USCOREPlus && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_tempuri__Book_USCOREModify_USCOREPlus(soap, "tempuri:Book_Modify_Plus", &a->tempuri__Book_USCOREModify_USCOREPlus, ""))
				{	soap_flag_tempuri__Book_USCOREModify_USCOREPlus--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___tempuri__Book_USCOREModify_USCOREPlus(struct soap *soap, const struct __tempuri__Book_USCOREModify_USCOREPlus *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___tempuri__Book_USCOREModify_USCOREPlus(soap, tag?tag:"-tempuri:Book_Modify_Plus", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __tempuri__Book_USCOREModify_USCOREPlus * SOAP_FMAC4 soap_get___tempuri__Book_USCOREModify_USCOREPlus(struct soap *soap, struct __tempuri__Book_USCOREModify_USCOREPlus *p, const char *tag, const char *type)
{
	if ((p = soap_in___tempuri__Book_USCOREModify_USCOREPlus(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __tempuri__Book_USCOREModify_USCOREPlus * SOAP_FMAC2 soap_instantiate___tempuri__Book_USCOREModify_USCOREPlus(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___tempuri__Book_USCOREModify_USCOREPlus(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___tempuri__Book_USCOREModify_USCOREPlus, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct __tempuri__Book_USCOREModify_USCOREPlus);
		if (size)
			*size = sizeof(struct __tempuri__Book_USCOREModify_USCOREPlus);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct __tempuri__Book_USCOREModify_USCOREPlus, n);
		if (size)
			*size = n * sizeof(struct __tempuri__Book_USCOREModify_USCOREPlus);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct __tempuri__Book_USCOREModify_USCOREPlus*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___tempuri__Book_USCOREModify_USCOREPlus(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __tempuri__Book_USCOREModify_USCOREPlus %p -> %p\n", q, p));
	*(struct __tempuri__Book_USCOREModify_USCOREPlus*)p = *(struct __tempuri__Book_USCOREModify_USCOREPlus*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___tempuri__Book_USCOREModify_USCOREHotel(struct soap *soap, struct __tempuri__Book_USCOREModify_USCOREHotel *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->tempuri__Book_USCOREModify_USCOREHotel = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___tempuri__Book_USCOREModify_USCOREHotel(struct soap *soap, const struct __tempuri__Book_USCOREModify_USCOREHotel *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTo_tempuri__Book_USCOREModify_USCOREHotel(soap, &a->tempuri__Book_USCOREModify_USCOREHotel);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___tempuri__Book_USCOREModify_USCOREHotel(struct soap *soap, const char *tag, int id, const struct __tempuri__Book_USCOREModify_USCOREHotel *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_out_PointerTo_tempuri__Book_USCOREModify_USCOREHotel(soap, "tempuri:Book_Modify_Hotel", -1, &a->tempuri__Book_USCOREModify_USCOREHotel, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __tempuri__Book_USCOREModify_USCOREHotel * SOAP_FMAC4 soap_in___tempuri__Book_USCOREModify_USCOREHotel(struct soap *soap, const char *tag, struct __tempuri__Book_USCOREModify_USCOREHotel *a, const char *type)
{
	size_t soap_flag_tempuri__Book_USCOREModify_USCOREHotel = 1;
	short soap_flag;
	a = (struct __tempuri__Book_USCOREModify_USCOREHotel *)soap_id_enter(soap, "", a, SOAP_TYPE___tempuri__Book_USCOREModify_USCOREHotel, sizeof(struct __tempuri__Book_USCOREModify_USCOREHotel), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___tempuri__Book_USCOREModify_USCOREHotel(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_tempuri__Book_USCOREModify_USCOREHotel && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_tempuri__Book_USCOREModify_USCOREHotel(soap, "tempuri:Book_Modify_Hotel", &a->tempuri__Book_USCOREModify_USCOREHotel, ""))
				{	soap_flag_tempuri__Book_USCOREModify_USCOREHotel--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___tempuri__Book_USCOREModify_USCOREHotel(struct soap *soap, const struct __tempuri__Book_USCOREModify_USCOREHotel *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___tempuri__Book_USCOREModify_USCOREHotel(soap, tag?tag:"-tempuri:Book_Modify_Hotel", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __tempuri__Book_USCOREModify_USCOREHotel * SOAP_FMAC4 soap_get___tempuri__Book_USCOREModify_USCOREHotel(struct soap *soap, struct __tempuri__Book_USCOREModify_USCOREHotel *p, const char *tag, const char *type)
{
	if ((p = soap_in___tempuri__Book_USCOREModify_USCOREHotel(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __tempuri__Book_USCOREModify_USCOREHotel * SOAP_FMAC2 soap_instantiate___tempuri__Book_USCOREModify_USCOREHotel(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___tempuri__Book_USCOREModify_USCOREHotel(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___tempuri__Book_USCOREModify_USCOREHotel, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct __tempuri__Book_USCOREModify_USCOREHotel);
		if (size)
			*size = sizeof(struct __tempuri__Book_USCOREModify_USCOREHotel);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct __tempuri__Book_USCOREModify_USCOREHotel, n);
		if (size)
			*size = n * sizeof(struct __tempuri__Book_USCOREModify_USCOREHotel);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct __tempuri__Book_USCOREModify_USCOREHotel*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___tempuri__Book_USCOREModify_USCOREHotel(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __tempuri__Book_USCOREModify_USCOREHotel %p -> %p\n", q, p));
	*(struct __tempuri__Book_USCOREModify_USCOREHotel*)p = *(struct __tempuri__Book_USCOREModify_USCOREHotel*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___tempuri__Book_USCOREAdd(struct soap *soap, struct __tempuri__Book_USCOREAdd *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->tempuri__Book_USCOREAdd = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___tempuri__Book_USCOREAdd(struct soap *soap, const struct __tempuri__Book_USCOREAdd *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTo_tempuri__Book_USCOREAdd(soap, &a->tempuri__Book_USCOREAdd);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___tempuri__Book_USCOREAdd(struct soap *soap, const char *tag, int id, const struct __tempuri__Book_USCOREAdd *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_out_PointerTo_tempuri__Book_USCOREAdd(soap, "tempuri:Book_Add", -1, &a->tempuri__Book_USCOREAdd, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __tempuri__Book_USCOREAdd * SOAP_FMAC4 soap_in___tempuri__Book_USCOREAdd(struct soap *soap, const char *tag, struct __tempuri__Book_USCOREAdd *a, const char *type)
{
	size_t soap_flag_tempuri__Book_USCOREAdd = 1;
	short soap_flag;
	a = (struct __tempuri__Book_USCOREAdd *)soap_id_enter(soap, "", a, SOAP_TYPE___tempuri__Book_USCOREAdd, sizeof(struct __tempuri__Book_USCOREAdd), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___tempuri__Book_USCOREAdd(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_tempuri__Book_USCOREAdd && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_tempuri__Book_USCOREAdd(soap, "tempuri:Book_Add", &a->tempuri__Book_USCOREAdd, ""))
				{	soap_flag_tempuri__Book_USCOREAdd--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___tempuri__Book_USCOREAdd(struct soap *soap, const struct __tempuri__Book_USCOREAdd *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___tempuri__Book_USCOREAdd(soap, tag?tag:"-tempuri:Book_Add", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __tempuri__Book_USCOREAdd * SOAP_FMAC4 soap_get___tempuri__Book_USCOREAdd(struct soap *soap, struct __tempuri__Book_USCOREAdd *p, const char *tag, const char *type)
{
	if ((p = soap_in___tempuri__Book_USCOREAdd(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __tempuri__Book_USCOREAdd * SOAP_FMAC2 soap_instantiate___tempuri__Book_USCOREAdd(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___tempuri__Book_USCOREAdd(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___tempuri__Book_USCOREAdd, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct __tempuri__Book_USCOREAdd);
		if (size)
			*size = sizeof(struct __tempuri__Book_USCOREAdd);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct __tempuri__Book_USCOREAdd, n);
		if (size)
			*size = n * sizeof(struct __tempuri__Book_USCOREAdd);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct __tempuri__Book_USCOREAdd*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___tempuri__Book_USCOREAdd(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __tempuri__Book_USCOREAdd %p -> %p\n", q, p));
	*(struct __tempuri__Book_USCOREAdd*)p = *(struct __tempuri__Book_USCOREAdd*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___tempuri__Get_USCOREHotel_USCORERoomState(struct soap *soap, struct __tempuri__Get_USCOREHotel_USCORERoomState *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->tempuri__Get_USCOREHotel_USCORERoomState = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___tempuri__Get_USCOREHotel_USCORERoomState(struct soap *soap, const struct __tempuri__Get_USCOREHotel_USCORERoomState *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTo_tempuri__Get_USCOREHotel_USCORERoomState(soap, &a->tempuri__Get_USCOREHotel_USCORERoomState);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___tempuri__Get_USCOREHotel_USCORERoomState(struct soap *soap, const char *tag, int id, const struct __tempuri__Get_USCOREHotel_USCORERoomState *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_out_PointerTo_tempuri__Get_USCOREHotel_USCORERoomState(soap, "tempuri:Get_Hotel_RoomState", -1, &a->tempuri__Get_USCOREHotel_USCORERoomState, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __tempuri__Get_USCOREHotel_USCORERoomState * SOAP_FMAC4 soap_in___tempuri__Get_USCOREHotel_USCORERoomState(struct soap *soap, const char *tag, struct __tempuri__Get_USCOREHotel_USCORERoomState *a, const char *type)
{
	size_t soap_flag_tempuri__Get_USCOREHotel_USCORERoomState = 1;
	short soap_flag;
	a = (struct __tempuri__Get_USCOREHotel_USCORERoomState *)soap_id_enter(soap, "", a, SOAP_TYPE___tempuri__Get_USCOREHotel_USCORERoomState, sizeof(struct __tempuri__Get_USCOREHotel_USCORERoomState), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___tempuri__Get_USCOREHotel_USCORERoomState(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_tempuri__Get_USCOREHotel_USCORERoomState && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_tempuri__Get_USCOREHotel_USCORERoomState(soap, "tempuri:Get_Hotel_RoomState", &a->tempuri__Get_USCOREHotel_USCORERoomState, ""))
				{	soap_flag_tempuri__Get_USCOREHotel_USCORERoomState--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___tempuri__Get_USCOREHotel_USCORERoomState(struct soap *soap, const struct __tempuri__Get_USCOREHotel_USCORERoomState *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___tempuri__Get_USCOREHotel_USCORERoomState(soap, tag?tag:"-tempuri:Get_Hotel_RoomState", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __tempuri__Get_USCOREHotel_USCORERoomState * SOAP_FMAC4 soap_get___tempuri__Get_USCOREHotel_USCORERoomState(struct soap *soap, struct __tempuri__Get_USCOREHotel_USCORERoomState *p, const char *tag, const char *type)
{
	if ((p = soap_in___tempuri__Get_USCOREHotel_USCORERoomState(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __tempuri__Get_USCOREHotel_USCORERoomState * SOAP_FMAC2 soap_instantiate___tempuri__Get_USCOREHotel_USCORERoomState(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___tempuri__Get_USCOREHotel_USCORERoomState(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___tempuri__Get_USCOREHotel_USCORERoomState, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct __tempuri__Get_USCOREHotel_USCORERoomState);
		if (size)
			*size = sizeof(struct __tempuri__Get_USCOREHotel_USCORERoomState);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct __tempuri__Get_USCOREHotel_USCORERoomState, n);
		if (size)
			*size = n * sizeof(struct __tempuri__Get_USCOREHotel_USCORERoomState);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct __tempuri__Get_USCOREHotel_USCORERoomState*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___tempuri__Get_USCOREHotel_USCORERoomState(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __tempuri__Get_USCOREHotel_USCORERoomState %p -> %p\n", q, p));
	*(struct __tempuri__Get_USCOREHotel_USCORERoomState*)p = *(struct __tempuri__Get_USCOREHotel_USCORERoomState*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___tempuri__Get_USCOREHotel_USCOREPrice(struct soap *soap, struct __tempuri__Get_USCOREHotel_USCOREPrice *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->tempuri__Get_USCOREHotel_USCOREPrice = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___tempuri__Get_USCOREHotel_USCOREPrice(struct soap *soap, const struct __tempuri__Get_USCOREHotel_USCOREPrice *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTo_tempuri__Get_USCOREHotel_USCOREPrice(soap, &a->tempuri__Get_USCOREHotel_USCOREPrice);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___tempuri__Get_USCOREHotel_USCOREPrice(struct soap *soap, const char *tag, int id, const struct __tempuri__Get_USCOREHotel_USCOREPrice *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_out_PointerTo_tempuri__Get_USCOREHotel_USCOREPrice(soap, "tempuri:Get_Hotel_Price", -1, &a->tempuri__Get_USCOREHotel_USCOREPrice, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __tempuri__Get_USCOREHotel_USCOREPrice * SOAP_FMAC4 soap_in___tempuri__Get_USCOREHotel_USCOREPrice(struct soap *soap, const char *tag, struct __tempuri__Get_USCOREHotel_USCOREPrice *a, const char *type)
{
	size_t soap_flag_tempuri__Get_USCOREHotel_USCOREPrice = 1;
	short soap_flag;
	a = (struct __tempuri__Get_USCOREHotel_USCOREPrice *)soap_id_enter(soap, "", a, SOAP_TYPE___tempuri__Get_USCOREHotel_USCOREPrice, sizeof(struct __tempuri__Get_USCOREHotel_USCOREPrice), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___tempuri__Get_USCOREHotel_USCOREPrice(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_tempuri__Get_USCOREHotel_USCOREPrice && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_tempuri__Get_USCOREHotel_USCOREPrice(soap, "tempuri:Get_Hotel_Price", &a->tempuri__Get_USCOREHotel_USCOREPrice, ""))
				{	soap_flag_tempuri__Get_USCOREHotel_USCOREPrice--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___tempuri__Get_USCOREHotel_USCOREPrice(struct soap *soap, const struct __tempuri__Get_USCOREHotel_USCOREPrice *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___tempuri__Get_USCOREHotel_USCOREPrice(soap, tag?tag:"-tempuri:Get_Hotel_Price", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __tempuri__Get_USCOREHotel_USCOREPrice * SOAP_FMAC4 soap_get___tempuri__Get_USCOREHotel_USCOREPrice(struct soap *soap, struct __tempuri__Get_USCOREHotel_USCOREPrice *p, const char *tag, const char *type)
{
	if ((p = soap_in___tempuri__Get_USCOREHotel_USCOREPrice(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __tempuri__Get_USCOREHotel_USCOREPrice * SOAP_FMAC2 soap_instantiate___tempuri__Get_USCOREHotel_USCOREPrice(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___tempuri__Get_USCOREHotel_USCOREPrice(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___tempuri__Get_USCOREHotel_USCOREPrice, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct __tempuri__Get_USCOREHotel_USCOREPrice);
		if (size)
			*size = sizeof(struct __tempuri__Get_USCOREHotel_USCOREPrice);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct __tempuri__Get_USCOREHotel_USCOREPrice, n);
		if (size)
			*size = n * sizeof(struct __tempuri__Get_USCOREHotel_USCOREPrice);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct __tempuri__Get_USCOREHotel_USCOREPrice*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___tempuri__Get_USCOREHotel_USCOREPrice(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __tempuri__Get_USCOREHotel_USCOREPrice %p -> %p\n", q, p));
	*(struct __tempuri__Get_USCOREHotel_USCOREPrice*)p = *(struct __tempuri__Get_USCOREHotel_USCOREPrice*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___tempuri__Get_USCOREHotel_USCOREInfo(struct soap *soap, struct __tempuri__Get_USCOREHotel_USCOREInfo *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->tempuri__Get_USCOREHotel_USCOREInfo = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___tempuri__Get_USCOREHotel_USCOREInfo(struct soap *soap, const struct __tempuri__Get_USCOREHotel_USCOREInfo *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTo_tempuri__Get_USCOREHotel_USCOREInfo(soap, &a->tempuri__Get_USCOREHotel_USCOREInfo);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___tempuri__Get_USCOREHotel_USCOREInfo(struct soap *soap, const char *tag, int id, const struct __tempuri__Get_USCOREHotel_USCOREInfo *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_out_PointerTo_tempuri__Get_USCOREHotel_USCOREInfo(soap, "tempuri:Get_Hotel_Info", -1, &a->tempuri__Get_USCOREHotel_USCOREInfo, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __tempuri__Get_USCOREHotel_USCOREInfo * SOAP_FMAC4 soap_in___tempuri__Get_USCOREHotel_USCOREInfo(struct soap *soap, const char *tag, struct __tempuri__Get_USCOREHotel_USCOREInfo *a, const char *type)
{
	size_t soap_flag_tempuri__Get_USCOREHotel_USCOREInfo = 1;
	short soap_flag;
	a = (struct __tempuri__Get_USCOREHotel_USCOREInfo *)soap_id_enter(soap, "", a, SOAP_TYPE___tempuri__Get_USCOREHotel_USCOREInfo, sizeof(struct __tempuri__Get_USCOREHotel_USCOREInfo), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___tempuri__Get_USCOREHotel_USCOREInfo(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_tempuri__Get_USCOREHotel_USCOREInfo && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_tempuri__Get_USCOREHotel_USCOREInfo(soap, "tempuri:Get_Hotel_Info", &a->tempuri__Get_USCOREHotel_USCOREInfo, ""))
				{	soap_flag_tempuri__Get_USCOREHotel_USCOREInfo--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___tempuri__Get_USCOREHotel_USCOREInfo(struct soap *soap, const struct __tempuri__Get_USCOREHotel_USCOREInfo *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___tempuri__Get_USCOREHotel_USCOREInfo(soap, tag?tag:"-tempuri:Get_Hotel_Info", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __tempuri__Get_USCOREHotel_USCOREInfo * SOAP_FMAC4 soap_get___tempuri__Get_USCOREHotel_USCOREInfo(struct soap *soap, struct __tempuri__Get_USCOREHotel_USCOREInfo *p, const char *tag, const char *type)
{
	if ((p = soap_in___tempuri__Get_USCOREHotel_USCOREInfo(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __tempuri__Get_USCOREHotel_USCOREInfo * SOAP_FMAC2 soap_instantiate___tempuri__Get_USCOREHotel_USCOREInfo(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___tempuri__Get_USCOREHotel_USCOREInfo(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___tempuri__Get_USCOREHotel_USCOREInfo, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct __tempuri__Get_USCOREHotel_USCOREInfo);
		if (size)
			*size = sizeof(struct __tempuri__Get_USCOREHotel_USCOREInfo);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct __tempuri__Get_USCOREHotel_USCOREInfo, n);
		if (size)
			*size = n * sizeof(struct __tempuri__Get_USCOREHotel_USCOREInfo);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct __tempuri__Get_USCOREHotel_USCOREInfo*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___tempuri__Get_USCOREHotel_USCOREInfo(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __tempuri__Get_USCOREHotel_USCOREInfo %p -> %p\n", q, p));
	*(struct __tempuri__Get_USCOREHotel_USCOREInfo*)p = *(struct __tempuri__Get_USCOREHotel_USCOREInfo*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___tempuri__Get_USCOREHotel_USCOREList(struct soap *soap, struct __tempuri__Get_USCOREHotel_USCOREList *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->tempuri__Get_USCOREHotel_USCOREList = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___tempuri__Get_USCOREHotel_USCOREList(struct soap *soap, const struct __tempuri__Get_USCOREHotel_USCOREList *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTo_tempuri__Get_USCOREHotel_USCOREList(soap, &a->tempuri__Get_USCOREHotel_USCOREList);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___tempuri__Get_USCOREHotel_USCOREList(struct soap *soap, const char *tag, int id, const struct __tempuri__Get_USCOREHotel_USCOREList *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_out_PointerTo_tempuri__Get_USCOREHotel_USCOREList(soap, "tempuri:Get_Hotel_List", -1, &a->tempuri__Get_USCOREHotel_USCOREList, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __tempuri__Get_USCOREHotel_USCOREList * SOAP_FMAC4 soap_in___tempuri__Get_USCOREHotel_USCOREList(struct soap *soap, const char *tag, struct __tempuri__Get_USCOREHotel_USCOREList *a, const char *type)
{
	size_t soap_flag_tempuri__Get_USCOREHotel_USCOREList = 1;
	short soap_flag;
	a = (struct __tempuri__Get_USCOREHotel_USCOREList *)soap_id_enter(soap, "", a, SOAP_TYPE___tempuri__Get_USCOREHotel_USCOREList, sizeof(struct __tempuri__Get_USCOREHotel_USCOREList), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___tempuri__Get_USCOREHotel_USCOREList(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_tempuri__Get_USCOREHotel_USCOREList && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_tempuri__Get_USCOREHotel_USCOREList(soap, "tempuri:Get_Hotel_List", &a->tempuri__Get_USCOREHotel_USCOREList, ""))
				{	soap_flag_tempuri__Get_USCOREHotel_USCOREList--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___tempuri__Get_USCOREHotel_USCOREList(struct soap *soap, const struct __tempuri__Get_USCOREHotel_USCOREList *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___tempuri__Get_USCOREHotel_USCOREList(soap, tag?tag:"-tempuri:Get_Hotel_List", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __tempuri__Get_USCOREHotel_USCOREList * SOAP_FMAC4 soap_get___tempuri__Get_USCOREHotel_USCOREList(struct soap *soap, struct __tempuri__Get_USCOREHotel_USCOREList *p, const char *tag, const char *type)
{
	if ((p = soap_in___tempuri__Get_USCOREHotel_USCOREList(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __tempuri__Get_USCOREHotel_USCOREList * SOAP_FMAC2 soap_instantiate___tempuri__Get_USCOREHotel_USCOREList(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___tempuri__Get_USCOREHotel_USCOREList(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___tempuri__Get_USCOREHotel_USCOREList, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct __tempuri__Get_USCOREHotel_USCOREList);
		if (size)
			*size = sizeof(struct __tempuri__Get_USCOREHotel_USCOREList);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct __tempuri__Get_USCOREHotel_USCOREList, n);
		if (size)
			*size = n * sizeof(struct __tempuri__Get_USCOREHotel_USCOREList);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct __tempuri__Get_USCOREHotel_USCOREList*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___tempuri__Get_USCOREHotel_USCOREList(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __tempuri__Get_USCOREHotel_USCOREList %p -> %p\n", q, p));
	*(struct __tempuri__Get_USCOREHotel_USCOREList*)p = *(struct __tempuri__Get_USCOREHotel_USCOREList*)q;
}

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_SOAP_ENV__Reason))
		soap_serialize_SOAP_ENV__Reason(soap, *a);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Reason(struct soap *soap, const char *tag, int id, struct SOAP_ENV__Reason *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_SOAP_ENV__Reason);
	if (id < 0)
		return soap->error;
	return soap_out_SOAP_ENV__Reason(soap, tag, id, *a, type);
}

SOAP_FMAC3 struct SOAP_ENV__Reason ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Reason(struct soap *soap, const char *tag, struct SOAP_ENV__Reason **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (struct SOAP_ENV__Reason **)soap_malloc(soap, sizeof(struct SOAP_ENV__Reason *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_SOAP_ENV__Reason(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Reason **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_SOAP_ENV__Reason, sizeof(struct SOAP_ENV__Reason), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerToSOAP_ENV__Reason);
	if (soap_out_PointerToSOAP_ENV__Reason(soap, tag?tag:"SOAP-ENV:Reason", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Reason ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToSOAP_ENV__Reason(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_SOAP_ENV__Detail))
		soap_serialize_SOAP_ENV__Detail(soap, *a);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Detail(struct soap *soap, const char *tag, int id, struct SOAP_ENV__Detail *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_SOAP_ENV__Detail);
	if (id < 0)
		return soap->error;
	return soap_out_SOAP_ENV__Detail(soap, tag, id, *a, type);
}

SOAP_FMAC3 struct SOAP_ENV__Detail ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Detail(struct soap *soap, const char *tag, struct SOAP_ENV__Detail **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (struct SOAP_ENV__Detail **)soap_malloc(soap, sizeof(struct SOAP_ENV__Detail *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_SOAP_ENV__Detail(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Detail **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_SOAP_ENV__Detail, sizeof(struct SOAP_ENV__Detail), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerToSOAP_ENV__Detail);
	if (soap_out_PointerToSOAP_ENV__Detail(soap, tag?tag:"SOAP-ENV:Detail", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Detail ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToSOAP_ENV__Detail(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_SOAP_ENV__Code))
		soap_serialize_SOAP_ENV__Code(soap, *a);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Code(struct soap *soap, const char *tag, int id, struct SOAP_ENV__Code *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_SOAP_ENV__Code);
	if (id < 0)
		return soap->error;
	return soap_out_SOAP_ENV__Code(soap, tag, id, *a, type);
}

SOAP_FMAC3 struct SOAP_ENV__Code ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Code(struct soap *soap, const char *tag, struct SOAP_ENV__Code **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (struct SOAP_ENV__Code **)soap_malloc(soap, sizeof(struct SOAP_ENV__Code *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_SOAP_ENV__Code(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Code **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_SOAP_ENV__Code, sizeof(struct SOAP_ENV__Code), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerToSOAP_ENV__Code);
	if (soap_out_PointerToSOAP_ENV__Code(soap, tag?tag:"SOAP-ENV:Code", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Code ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToSOAP_ENV__Code(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#endif

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_tempuri__Get_USCOREOrder_USCOREListResponse(struct soap *soap, _tempuri__Get_USCOREOrder_USCOREListResponse *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE__tempuri__Get_USCOREOrder_USCOREListResponse))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_tempuri__Get_USCOREOrder_USCOREListResponse(struct soap *soap, const char *tag, int id, _tempuri__Get_USCOREOrder_USCOREListResponse *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__tempuri__Get_USCOREOrder_USCOREListResponse);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _tempuri__Get_USCOREOrder_USCOREListResponse ** SOAP_FMAC4 soap_in_PointerTo_tempuri__Get_USCOREOrder_USCOREListResponse(struct soap *soap, const char *tag, _tempuri__Get_USCOREOrder_USCOREListResponse **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_tempuri__Get_USCOREOrder_USCOREListResponse **)soap_malloc(soap, sizeof(_tempuri__Get_USCOREOrder_USCOREListResponse *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_tempuri__Get_USCOREOrder_USCOREListResponse *)soap_instantiate__tempuri__Get_USCOREOrder_USCOREListResponse(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_tempuri__Get_USCOREOrder_USCOREListResponse ** p = (_tempuri__Get_USCOREOrder_USCOREListResponse **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__tempuri__Get_USCOREOrder_USCOREListResponse, sizeof(_tempuri__Get_USCOREOrder_USCOREListResponse), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_tempuri__Get_USCOREOrder_USCOREListResponse(struct soap *soap, _tempuri__Get_USCOREOrder_USCOREListResponse *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTo_tempuri__Get_USCOREOrder_USCOREListResponse);
	if (soap_out_PointerTo_tempuri__Get_USCOREOrder_USCOREListResponse(soap, tag?tag:"tempuri:Get_Order_ListResponse", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _tempuri__Get_USCOREOrder_USCOREListResponse ** SOAP_FMAC4 soap_get_PointerTo_tempuri__Get_USCOREOrder_USCOREListResponse(struct soap *soap, _tempuri__Get_USCOREOrder_USCOREListResponse **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_tempuri__Get_USCOREOrder_USCOREListResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_tempuri__Get_USCOREOrder_USCOREList(struct soap *soap, _tempuri__Get_USCOREOrder_USCOREList *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE__tempuri__Get_USCOREOrder_USCOREList))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_tempuri__Get_USCOREOrder_USCOREList(struct soap *soap, const char *tag, int id, _tempuri__Get_USCOREOrder_USCOREList *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__tempuri__Get_USCOREOrder_USCOREList);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _tempuri__Get_USCOREOrder_USCOREList ** SOAP_FMAC4 soap_in_PointerTo_tempuri__Get_USCOREOrder_USCOREList(struct soap *soap, const char *tag, _tempuri__Get_USCOREOrder_USCOREList **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_tempuri__Get_USCOREOrder_USCOREList **)soap_malloc(soap, sizeof(_tempuri__Get_USCOREOrder_USCOREList *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_tempuri__Get_USCOREOrder_USCOREList *)soap_instantiate__tempuri__Get_USCOREOrder_USCOREList(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_tempuri__Get_USCOREOrder_USCOREList ** p = (_tempuri__Get_USCOREOrder_USCOREList **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__tempuri__Get_USCOREOrder_USCOREList, sizeof(_tempuri__Get_USCOREOrder_USCOREList), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_tempuri__Get_USCOREOrder_USCOREList(struct soap *soap, _tempuri__Get_USCOREOrder_USCOREList *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTo_tempuri__Get_USCOREOrder_USCOREList);
	if (soap_out_PointerTo_tempuri__Get_USCOREOrder_USCOREList(soap, tag?tag:"tempuri:Get_Order_List", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _tempuri__Get_USCOREOrder_USCOREList ** SOAP_FMAC4 soap_get_PointerTo_tempuri__Get_USCOREOrder_USCOREList(struct soap *soap, _tempuri__Get_USCOREOrder_USCOREList **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_tempuri__Get_USCOREOrder_USCOREList(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_tempuri__Get_USCOREOrderResponse(struct soap *soap, _tempuri__Get_USCOREOrderResponse *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE__tempuri__Get_USCOREOrderResponse))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_tempuri__Get_USCOREOrderResponse(struct soap *soap, const char *tag, int id, _tempuri__Get_USCOREOrderResponse *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__tempuri__Get_USCOREOrderResponse);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _tempuri__Get_USCOREOrderResponse ** SOAP_FMAC4 soap_in_PointerTo_tempuri__Get_USCOREOrderResponse(struct soap *soap, const char *tag, _tempuri__Get_USCOREOrderResponse **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_tempuri__Get_USCOREOrderResponse **)soap_malloc(soap, sizeof(_tempuri__Get_USCOREOrderResponse *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_tempuri__Get_USCOREOrderResponse *)soap_instantiate__tempuri__Get_USCOREOrderResponse(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_tempuri__Get_USCOREOrderResponse ** p = (_tempuri__Get_USCOREOrderResponse **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__tempuri__Get_USCOREOrderResponse, sizeof(_tempuri__Get_USCOREOrderResponse), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_tempuri__Get_USCOREOrderResponse(struct soap *soap, _tempuri__Get_USCOREOrderResponse *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTo_tempuri__Get_USCOREOrderResponse);
	if (soap_out_PointerTo_tempuri__Get_USCOREOrderResponse(soap, tag?tag:"tempuri:Get_OrderResponse", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _tempuri__Get_USCOREOrderResponse ** SOAP_FMAC4 soap_get_PointerTo_tempuri__Get_USCOREOrderResponse(struct soap *soap, _tempuri__Get_USCOREOrderResponse **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_tempuri__Get_USCOREOrderResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_tempuri__Get_USCOREOrder(struct soap *soap, _tempuri__Get_USCOREOrder *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE__tempuri__Get_USCOREOrder))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_tempuri__Get_USCOREOrder(struct soap *soap, const char *tag, int id, _tempuri__Get_USCOREOrder *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__tempuri__Get_USCOREOrder);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _tempuri__Get_USCOREOrder ** SOAP_FMAC4 soap_in_PointerTo_tempuri__Get_USCOREOrder(struct soap *soap, const char *tag, _tempuri__Get_USCOREOrder **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_tempuri__Get_USCOREOrder **)soap_malloc(soap, sizeof(_tempuri__Get_USCOREOrder *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_tempuri__Get_USCOREOrder *)soap_instantiate__tempuri__Get_USCOREOrder(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_tempuri__Get_USCOREOrder ** p = (_tempuri__Get_USCOREOrder **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__tempuri__Get_USCOREOrder, sizeof(_tempuri__Get_USCOREOrder), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_tempuri__Get_USCOREOrder(struct soap *soap, _tempuri__Get_USCOREOrder *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTo_tempuri__Get_USCOREOrder);
	if (soap_out_PointerTo_tempuri__Get_USCOREOrder(soap, tag?tag:"tempuri:Get_Order", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _tempuri__Get_USCOREOrder ** SOAP_FMAC4 soap_get_PointerTo_tempuri__Get_USCOREOrder(struct soap *soap, _tempuri__Get_USCOREOrder **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_tempuri__Get_USCOREOrder(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_tempuri__Book_USCOREApplyResponse(struct soap *soap, _tempuri__Book_USCOREApplyResponse *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE__tempuri__Book_USCOREApplyResponse))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_tempuri__Book_USCOREApplyResponse(struct soap *soap, const char *tag, int id, _tempuri__Book_USCOREApplyResponse *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__tempuri__Book_USCOREApplyResponse);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _tempuri__Book_USCOREApplyResponse ** SOAP_FMAC4 soap_in_PointerTo_tempuri__Book_USCOREApplyResponse(struct soap *soap, const char *tag, _tempuri__Book_USCOREApplyResponse **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_tempuri__Book_USCOREApplyResponse **)soap_malloc(soap, sizeof(_tempuri__Book_USCOREApplyResponse *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_tempuri__Book_USCOREApplyResponse *)soap_instantiate__tempuri__Book_USCOREApplyResponse(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_tempuri__Book_USCOREApplyResponse ** p = (_tempuri__Book_USCOREApplyResponse **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__tempuri__Book_USCOREApplyResponse, sizeof(_tempuri__Book_USCOREApplyResponse), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_tempuri__Book_USCOREApplyResponse(struct soap *soap, _tempuri__Book_USCOREApplyResponse *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTo_tempuri__Book_USCOREApplyResponse);
	if (soap_out_PointerTo_tempuri__Book_USCOREApplyResponse(soap, tag?tag:"tempuri:Book_ApplyResponse", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _tempuri__Book_USCOREApplyResponse ** SOAP_FMAC4 soap_get_PointerTo_tempuri__Book_USCOREApplyResponse(struct soap *soap, _tempuri__Book_USCOREApplyResponse **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_tempuri__Book_USCOREApplyResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_tempuri__Book_USCOREApply(struct soap *soap, _tempuri__Book_USCOREApply *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE__tempuri__Book_USCOREApply))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_tempuri__Book_USCOREApply(struct soap *soap, const char *tag, int id, _tempuri__Book_USCOREApply *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__tempuri__Book_USCOREApply);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _tempuri__Book_USCOREApply ** SOAP_FMAC4 soap_in_PointerTo_tempuri__Book_USCOREApply(struct soap *soap, const char *tag, _tempuri__Book_USCOREApply **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_tempuri__Book_USCOREApply **)soap_malloc(soap, sizeof(_tempuri__Book_USCOREApply *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_tempuri__Book_USCOREApply *)soap_instantiate__tempuri__Book_USCOREApply(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_tempuri__Book_USCOREApply ** p = (_tempuri__Book_USCOREApply **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__tempuri__Book_USCOREApply, sizeof(_tempuri__Book_USCOREApply), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_tempuri__Book_USCOREApply(struct soap *soap, _tempuri__Book_USCOREApply *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTo_tempuri__Book_USCOREApply);
	if (soap_out_PointerTo_tempuri__Book_USCOREApply(soap, tag?tag:"tempuri:Book_Apply", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _tempuri__Book_USCOREApply ** SOAP_FMAC4 soap_get_PointerTo_tempuri__Book_USCOREApply(struct soap *soap, _tempuri__Book_USCOREApply **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_tempuri__Book_USCOREApply(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_tempuri__Book_USCOREModify_USCOREPlusResponse(struct soap *soap, _tempuri__Book_USCOREModify_USCOREPlusResponse *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE__tempuri__Book_USCOREModify_USCOREPlusResponse))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_tempuri__Book_USCOREModify_USCOREPlusResponse(struct soap *soap, const char *tag, int id, _tempuri__Book_USCOREModify_USCOREPlusResponse *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__tempuri__Book_USCOREModify_USCOREPlusResponse);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _tempuri__Book_USCOREModify_USCOREPlusResponse ** SOAP_FMAC4 soap_in_PointerTo_tempuri__Book_USCOREModify_USCOREPlusResponse(struct soap *soap, const char *tag, _tempuri__Book_USCOREModify_USCOREPlusResponse **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_tempuri__Book_USCOREModify_USCOREPlusResponse **)soap_malloc(soap, sizeof(_tempuri__Book_USCOREModify_USCOREPlusResponse *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_tempuri__Book_USCOREModify_USCOREPlusResponse *)soap_instantiate__tempuri__Book_USCOREModify_USCOREPlusResponse(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_tempuri__Book_USCOREModify_USCOREPlusResponse ** p = (_tempuri__Book_USCOREModify_USCOREPlusResponse **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__tempuri__Book_USCOREModify_USCOREPlusResponse, sizeof(_tempuri__Book_USCOREModify_USCOREPlusResponse), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_tempuri__Book_USCOREModify_USCOREPlusResponse(struct soap *soap, _tempuri__Book_USCOREModify_USCOREPlusResponse *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTo_tempuri__Book_USCOREModify_USCOREPlusResponse);
	if (soap_out_PointerTo_tempuri__Book_USCOREModify_USCOREPlusResponse(soap, tag?tag:"tempuri:Book_Modify_PlusResponse", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _tempuri__Book_USCOREModify_USCOREPlusResponse ** SOAP_FMAC4 soap_get_PointerTo_tempuri__Book_USCOREModify_USCOREPlusResponse(struct soap *soap, _tempuri__Book_USCOREModify_USCOREPlusResponse **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_tempuri__Book_USCOREModify_USCOREPlusResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_tempuri__Book_USCOREModify_USCOREPlus(struct soap *soap, _tempuri__Book_USCOREModify_USCOREPlus *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE__tempuri__Book_USCOREModify_USCOREPlus))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_tempuri__Book_USCOREModify_USCOREPlus(struct soap *soap, const char *tag, int id, _tempuri__Book_USCOREModify_USCOREPlus *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__tempuri__Book_USCOREModify_USCOREPlus);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _tempuri__Book_USCOREModify_USCOREPlus ** SOAP_FMAC4 soap_in_PointerTo_tempuri__Book_USCOREModify_USCOREPlus(struct soap *soap, const char *tag, _tempuri__Book_USCOREModify_USCOREPlus **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_tempuri__Book_USCOREModify_USCOREPlus **)soap_malloc(soap, sizeof(_tempuri__Book_USCOREModify_USCOREPlus *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_tempuri__Book_USCOREModify_USCOREPlus *)soap_instantiate__tempuri__Book_USCOREModify_USCOREPlus(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_tempuri__Book_USCOREModify_USCOREPlus ** p = (_tempuri__Book_USCOREModify_USCOREPlus **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__tempuri__Book_USCOREModify_USCOREPlus, sizeof(_tempuri__Book_USCOREModify_USCOREPlus), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_tempuri__Book_USCOREModify_USCOREPlus(struct soap *soap, _tempuri__Book_USCOREModify_USCOREPlus *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTo_tempuri__Book_USCOREModify_USCOREPlus);
	if (soap_out_PointerTo_tempuri__Book_USCOREModify_USCOREPlus(soap, tag?tag:"tempuri:Book_Modify_Plus", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _tempuri__Book_USCOREModify_USCOREPlus ** SOAP_FMAC4 soap_get_PointerTo_tempuri__Book_USCOREModify_USCOREPlus(struct soap *soap, _tempuri__Book_USCOREModify_USCOREPlus **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_tempuri__Book_USCOREModify_USCOREPlus(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_tempuri__Book_USCOREModify_USCOREHotelResponse(struct soap *soap, _tempuri__Book_USCOREModify_USCOREHotelResponse *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE__tempuri__Book_USCOREModify_USCOREHotelResponse))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_tempuri__Book_USCOREModify_USCOREHotelResponse(struct soap *soap, const char *tag, int id, _tempuri__Book_USCOREModify_USCOREHotelResponse *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__tempuri__Book_USCOREModify_USCOREHotelResponse);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _tempuri__Book_USCOREModify_USCOREHotelResponse ** SOAP_FMAC4 soap_in_PointerTo_tempuri__Book_USCOREModify_USCOREHotelResponse(struct soap *soap, const char *tag, _tempuri__Book_USCOREModify_USCOREHotelResponse **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_tempuri__Book_USCOREModify_USCOREHotelResponse **)soap_malloc(soap, sizeof(_tempuri__Book_USCOREModify_USCOREHotelResponse *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_tempuri__Book_USCOREModify_USCOREHotelResponse *)soap_instantiate__tempuri__Book_USCOREModify_USCOREHotelResponse(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_tempuri__Book_USCOREModify_USCOREHotelResponse ** p = (_tempuri__Book_USCOREModify_USCOREHotelResponse **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__tempuri__Book_USCOREModify_USCOREHotelResponse, sizeof(_tempuri__Book_USCOREModify_USCOREHotelResponse), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_tempuri__Book_USCOREModify_USCOREHotelResponse(struct soap *soap, _tempuri__Book_USCOREModify_USCOREHotelResponse *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTo_tempuri__Book_USCOREModify_USCOREHotelResponse);
	if (soap_out_PointerTo_tempuri__Book_USCOREModify_USCOREHotelResponse(soap, tag?tag:"tempuri:Book_Modify_HotelResponse", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _tempuri__Book_USCOREModify_USCOREHotelResponse ** SOAP_FMAC4 soap_get_PointerTo_tempuri__Book_USCOREModify_USCOREHotelResponse(struct soap *soap, _tempuri__Book_USCOREModify_USCOREHotelResponse **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_tempuri__Book_USCOREModify_USCOREHotelResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_tempuri__Book_USCOREModify_USCOREHotel(struct soap *soap, _tempuri__Book_USCOREModify_USCOREHotel *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE__tempuri__Book_USCOREModify_USCOREHotel))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_tempuri__Book_USCOREModify_USCOREHotel(struct soap *soap, const char *tag, int id, _tempuri__Book_USCOREModify_USCOREHotel *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__tempuri__Book_USCOREModify_USCOREHotel);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _tempuri__Book_USCOREModify_USCOREHotel ** SOAP_FMAC4 soap_in_PointerTo_tempuri__Book_USCOREModify_USCOREHotel(struct soap *soap, const char *tag, _tempuri__Book_USCOREModify_USCOREHotel **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_tempuri__Book_USCOREModify_USCOREHotel **)soap_malloc(soap, sizeof(_tempuri__Book_USCOREModify_USCOREHotel *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_tempuri__Book_USCOREModify_USCOREHotel *)soap_instantiate__tempuri__Book_USCOREModify_USCOREHotel(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_tempuri__Book_USCOREModify_USCOREHotel ** p = (_tempuri__Book_USCOREModify_USCOREHotel **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__tempuri__Book_USCOREModify_USCOREHotel, sizeof(_tempuri__Book_USCOREModify_USCOREHotel), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_tempuri__Book_USCOREModify_USCOREHotel(struct soap *soap, _tempuri__Book_USCOREModify_USCOREHotel *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTo_tempuri__Book_USCOREModify_USCOREHotel);
	if (soap_out_PointerTo_tempuri__Book_USCOREModify_USCOREHotel(soap, tag?tag:"tempuri:Book_Modify_Hotel", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _tempuri__Book_USCOREModify_USCOREHotel ** SOAP_FMAC4 soap_get_PointerTo_tempuri__Book_USCOREModify_USCOREHotel(struct soap *soap, _tempuri__Book_USCOREModify_USCOREHotel **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_tempuri__Book_USCOREModify_USCOREHotel(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_tempuri__Book_USCOREAddResponse(struct soap *soap, _tempuri__Book_USCOREAddResponse *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE__tempuri__Book_USCOREAddResponse))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_tempuri__Book_USCOREAddResponse(struct soap *soap, const char *tag, int id, _tempuri__Book_USCOREAddResponse *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__tempuri__Book_USCOREAddResponse);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _tempuri__Book_USCOREAddResponse ** SOAP_FMAC4 soap_in_PointerTo_tempuri__Book_USCOREAddResponse(struct soap *soap, const char *tag, _tempuri__Book_USCOREAddResponse **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_tempuri__Book_USCOREAddResponse **)soap_malloc(soap, sizeof(_tempuri__Book_USCOREAddResponse *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_tempuri__Book_USCOREAddResponse *)soap_instantiate__tempuri__Book_USCOREAddResponse(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_tempuri__Book_USCOREAddResponse ** p = (_tempuri__Book_USCOREAddResponse **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__tempuri__Book_USCOREAddResponse, sizeof(_tempuri__Book_USCOREAddResponse), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_tempuri__Book_USCOREAddResponse(struct soap *soap, _tempuri__Book_USCOREAddResponse *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTo_tempuri__Book_USCOREAddResponse);
	if (soap_out_PointerTo_tempuri__Book_USCOREAddResponse(soap, tag?tag:"tempuri:Book_AddResponse", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _tempuri__Book_USCOREAddResponse ** SOAP_FMAC4 soap_get_PointerTo_tempuri__Book_USCOREAddResponse(struct soap *soap, _tempuri__Book_USCOREAddResponse **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_tempuri__Book_USCOREAddResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_tempuri__Book_USCOREAdd(struct soap *soap, _tempuri__Book_USCOREAdd *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE__tempuri__Book_USCOREAdd))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_tempuri__Book_USCOREAdd(struct soap *soap, const char *tag, int id, _tempuri__Book_USCOREAdd *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__tempuri__Book_USCOREAdd);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _tempuri__Book_USCOREAdd ** SOAP_FMAC4 soap_in_PointerTo_tempuri__Book_USCOREAdd(struct soap *soap, const char *tag, _tempuri__Book_USCOREAdd **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_tempuri__Book_USCOREAdd **)soap_malloc(soap, sizeof(_tempuri__Book_USCOREAdd *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_tempuri__Book_USCOREAdd *)soap_instantiate__tempuri__Book_USCOREAdd(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_tempuri__Book_USCOREAdd ** p = (_tempuri__Book_USCOREAdd **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__tempuri__Book_USCOREAdd, sizeof(_tempuri__Book_USCOREAdd), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_tempuri__Book_USCOREAdd(struct soap *soap, _tempuri__Book_USCOREAdd *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTo_tempuri__Book_USCOREAdd);
	if (soap_out_PointerTo_tempuri__Book_USCOREAdd(soap, tag?tag:"tempuri:Book_Add", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _tempuri__Book_USCOREAdd ** SOAP_FMAC4 soap_get_PointerTo_tempuri__Book_USCOREAdd(struct soap *soap, _tempuri__Book_USCOREAdd **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_tempuri__Book_USCOREAdd(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_tempuri__Get_USCOREHotel_USCORERoomStateResponse(struct soap *soap, _tempuri__Get_USCOREHotel_USCORERoomStateResponse *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE__tempuri__Get_USCOREHotel_USCORERoomStateResponse))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_tempuri__Get_USCOREHotel_USCORERoomStateResponse(struct soap *soap, const char *tag, int id, _tempuri__Get_USCOREHotel_USCORERoomStateResponse *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__tempuri__Get_USCOREHotel_USCORERoomStateResponse);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _tempuri__Get_USCOREHotel_USCORERoomStateResponse ** SOAP_FMAC4 soap_in_PointerTo_tempuri__Get_USCOREHotel_USCORERoomStateResponse(struct soap *soap, const char *tag, _tempuri__Get_USCOREHotel_USCORERoomStateResponse **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_tempuri__Get_USCOREHotel_USCORERoomStateResponse **)soap_malloc(soap, sizeof(_tempuri__Get_USCOREHotel_USCORERoomStateResponse *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_tempuri__Get_USCOREHotel_USCORERoomStateResponse *)soap_instantiate__tempuri__Get_USCOREHotel_USCORERoomStateResponse(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_tempuri__Get_USCOREHotel_USCORERoomStateResponse ** p = (_tempuri__Get_USCOREHotel_USCORERoomStateResponse **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__tempuri__Get_USCOREHotel_USCORERoomStateResponse, sizeof(_tempuri__Get_USCOREHotel_USCORERoomStateResponse), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_tempuri__Get_USCOREHotel_USCORERoomStateResponse(struct soap *soap, _tempuri__Get_USCOREHotel_USCORERoomStateResponse *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTo_tempuri__Get_USCOREHotel_USCORERoomStateResponse);
	if (soap_out_PointerTo_tempuri__Get_USCOREHotel_USCORERoomStateResponse(soap, tag?tag:"tempuri:Get_Hotel_RoomStateResponse", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _tempuri__Get_USCOREHotel_USCORERoomStateResponse ** SOAP_FMAC4 soap_get_PointerTo_tempuri__Get_USCOREHotel_USCORERoomStateResponse(struct soap *soap, _tempuri__Get_USCOREHotel_USCORERoomStateResponse **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_tempuri__Get_USCOREHotel_USCORERoomStateResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_tempuri__Get_USCOREHotel_USCORERoomState(struct soap *soap, _tempuri__Get_USCOREHotel_USCORERoomState *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE__tempuri__Get_USCOREHotel_USCORERoomState))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_tempuri__Get_USCOREHotel_USCORERoomState(struct soap *soap, const char *tag, int id, _tempuri__Get_USCOREHotel_USCORERoomState *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__tempuri__Get_USCOREHotel_USCORERoomState);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _tempuri__Get_USCOREHotel_USCORERoomState ** SOAP_FMAC4 soap_in_PointerTo_tempuri__Get_USCOREHotel_USCORERoomState(struct soap *soap, const char *tag, _tempuri__Get_USCOREHotel_USCORERoomState **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_tempuri__Get_USCOREHotel_USCORERoomState **)soap_malloc(soap, sizeof(_tempuri__Get_USCOREHotel_USCORERoomState *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_tempuri__Get_USCOREHotel_USCORERoomState *)soap_instantiate__tempuri__Get_USCOREHotel_USCORERoomState(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_tempuri__Get_USCOREHotel_USCORERoomState ** p = (_tempuri__Get_USCOREHotel_USCORERoomState **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__tempuri__Get_USCOREHotel_USCORERoomState, sizeof(_tempuri__Get_USCOREHotel_USCORERoomState), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_tempuri__Get_USCOREHotel_USCORERoomState(struct soap *soap, _tempuri__Get_USCOREHotel_USCORERoomState *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTo_tempuri__Get_USCOREHotel_USCORERoomState);
	if (soap_out_PointerTo_tempuri__Get_USCOREHotel_USCORERoomState(soap, tag?tag:"tempuri:Get_Hotel_RoomState", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _tempuri__Get_USCOREHotel_USCORERoomState ** SOAP_FMAC4 soap_get_PointerTo_tempuri__Get_USCOREHotel_USCORERoomState(struct soap *soap, _tempuri__Get_USCOREHotel_USCORERoomState **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_tempuri__Get_USCOREHotel_USCORERoomState(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_tempuri__Get_USCOREHotel_USCOREPriceResponse(struct soap *soap, _tempuri__Get_USCOREHotel_USCOREPriceResponse *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE__tempuri__Get_USCOREHotel_USCOREPriceResponse))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_tempuri__Get_USCOREHotel_USCOREPriceResponse(struct soap *soap, const char *tag, int id, _tempuri__Get_USCOREHotel_USCOREPriceResponse *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__tempuri__Get_USCOREHotel_USCOREPriceResponse);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _tempuri__Get_USCOREHotel_USCOREPriceResponse ** SOAP_FMAC4 soap_in_PointerTo_tempuri__Get_USCOREHotel_USCOREPriceResponse(struct soap *soap, const char *tag, _tempuri__Get_USCOREHotel_USCOREPriceResponse **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_tempuri__Get_USCOREHotel_USCOREPriceResponse **)soap_malloc(soap, sizeof(_tempuri__Get_USCOREHotel_USCOREPriceResponse *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_tempuri__Get_USCOREHotel_USCOREPriceResponse *)soap_instantiate__tempuri__Get_USCOREHotel_USCOREPriceResponse(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_tempuri__Get_USCOREHotel_USCOREPriceResponse ** p = (_tempuri__Get_USCOREHotel_USCOREPriceResponse **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__tempuri__Get_USCOREHotel_USCOREPriceResponse, sizeof(_tempuri__Get_USCOREHotel_USCOREPriceResponse), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_tempuri__Get_USCOREHotel_USCOREPriceResponse(struct soap *soap, _tempuri__Get_USCOREHotel_USCOREPriceResponse *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTo_tempuri__Get_USCOREHotel_USCOREPriceResponse);
	if (soap_out_PointerTo_tempuri__Get_USCOREHotel_USCOREPriceResponse(soap, tag?tag:"tempuri:Get_Hotel_PriceResponse", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _tempuri__Get_USCOREHotel_USCOREPriceResponse ** SOAP_FMAC4 soap_get_PointerTo_tempuri__Get_USCOREHotel_USCOREPriceResponse(struct soap *soap, _tempuri__Get_USCOREHotel_USCOREPriceResponse **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_tempuri__Get_USCOREHotel_USCOREPriceResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_tempuri__Get_USCOREHotel_USCOREPrice(struct soap *soap, _tempuri__Get_USCOREHotel_USCOREPrice *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE__tempuri__Get_USCOREHotel_USCOREPrice))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_tempuri__Get_USCOREHotel_USCOREPrice(struct soap *soap, const char *tag, int id, _tempuri__Get_USCOREHotel_USCOREPrice *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__tempuri__Get_USCOREHotel_USCOREPrice);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _tempuri__Get_USCOREHotel_USCOREPrice ** SOAP_FMAC4 soap_in_PointerTo_tempuri__Get_USCOREHotel_USCOREPrice(struct soap *soap, const char *tag, _tempuri__Get_USCOREHotel_USCOREPrice **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_tempuri__Get_USCOREHotel_USCOREPrice **)soap_malloc(soap, sizeof(_tempuri__Get_USCOREHotel_USCOREPrice *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_tempuri__Get_USCOREHotel_USCOREPrice *)soap_instantiate__tempuri__Get_USCOREHotel_USCOREPrice(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_tempuri__Get_USCOREHotel_USCOREPrice ** p = (_tempuri__Get_USCOREHotel_USCOREPrice **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__tempuri__Get_USCOREHotel_USCOREPrice, sizeof(_tempuri__Get_USCOREHotel_USCOREPrice), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_tempuri__Get_USCOREHotel_USCOREPrice(struct soap *soap, _tempuri__Get_USCOREHotel_USCOREPrice *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTo_tempuri__Get_USCOREHotel_USCOREPrice);
	if (soap_out_PointerTo_tempuri__Get_USCOREHotel_USCOREPrice(soap, tag?tag:"tempuri:Get_Hotel_Price", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _tempuri__Get_USCOREHotel_USCOREPrice ** SOAP_FMAC4 soap_get_PointerTo_tempuri__Get_USCOREHotel_USCOREPrice(struct soap *soap, _tempuri__Get_USCOREHotel_USCOREPrice **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_tempuri__Get_USCOREHotel_USCOREPrice(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_tempuri__Get_USCOREHotel_USCOREInfoResponse(struct soap *soap, _tempuri__Get_USCOREHotel_USCOREInfoResponse *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE__tempuri__Get_USCOREHotel_USCOREInfoResponse))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_tempuri__Get_USCOREHotel_USCOREInfoResponse(struct soap *soap, const char *tag, int id, _tempuri__Get_USCOREHotel_USCOREInfoResponse *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__tempuri__Get_USCOREHotel_USCOREInfoResponse);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _tempuri__Get_USCOREHotel_USCOREInfoResponse ** SOAP_FMAC4 soap_in_PointerTo_tempuri__Get_USCOREHotel_USCOREInfoResponse(struct soap *soap, const char *tag, _tempuri__Get_USCOREHotel_USCOREInfoResponse **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_tempuri__Get_USCOREHotel_USCOREInfoResponse **)soap_malloc(soap, sizeof(_tempuri__Get_USCOREHotel_USCOREInfoResponse *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_tempuri__Get_USCOREHotel_USCOREInfoResponse *)soap_instantiate__tempuri__Get_USCOREHotel_USCOREInfoResponse(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_tempuri__Get_USCOREHotel_USCOREInfoResponse ** p = (_tempuri__Get_USCOREHotel_USCOREInfoResponse **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__tempuri__Get_USCOREHotel_USCOREInfoResponse, sizeof(_tempuri__Get_USCOREHotel_USCOREInfoResponse), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_tempuri__Get_USCOREHotel_USCOREInfoResponse(struct soap *soap, _tempuri__Get_USCOREHotel_USCOREInfoResponse *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTo_tempuri__Get_USCOREHotel_USCOREInfoResponse);
	if (soap_out_PointerTo_tempuri__Get_USCOREHotel_USCOREInfoResponse(soap, tag?tag:"tempuri:Get_Hotel_InfoResponse", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _tempuri__Get_USCOREHotel_USCOREInfoResponse ** SOAP_FMAC4 soap_get_PointerTo_tempuri__Get_USCOREHotel_USCOREInfoResponse(struct soap *soap, _tempuri__Get_USCOREHotel_USCOREInfoResponse **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_tempuri__Get_USCOREHotel_USCOREInfoResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_tempuri__Get_USCOREHotel_USCOREInfo(struct soap *soap, _tempuri__Get_USCOREHotel_USCOREInfo *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE__tempuri__Get_USCOREHotel_USCOREInfo))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_tempuri__Get_USCOREHotel_USCOREInfo(struct soap *soap, const char *tag, int id, _tempuri__Get_USCOREHotel_USCOREInfo *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__tempuri__Get_USCOREHotel_USCOREInfo);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _tempuri__Get_USCOREHotel_USCOREInfo ** SOAP_FMAC4 soap_in_PointerTo_tempuri__Get_USCOREHotel_USCOREInfo(struct soap *soap, const char *tag, _tempuri__Get_USCOREHotel_USCOREInfo **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_tempuri__Get_USCOREHotel_USCOREInfo **)soap_malloc(soap, sizeof(_tempuri__Get_USCOREHotel_USCOREInfo *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_tempuri__Get_USCOREHotel_USCOREInfo *)soap_instantiate__tempuri__Get_USCOREHotel_USCOREInfo(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_tempuri__Get_USCOREHotel_USCOREInfo ** p = (_tempuri__Get_USCOREHotel_USCOREInfo **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__tempuri__Get_USCOREHotel_USCOREInfo, sizeof(_tempuri__Get_USCOREHotel_USCOREInfo), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_tempuri__Get_USCOREHotel_USCOREInfo(struct soap *soap, _tempuri__Get_USCOREHotel_USCOREInfo *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTo_tempuri__Get_USCOREHotel_USCOREInfo);
	if (soap_out_PointerTo_tempuri__Get_USCOREHotel_USCOREInfo(soap, tag?tag:"tempuri:Get_Hotel_Info", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _tempuri__Get_USCOREHotel_USCOREInfo ** SOAP_FMAC4 soap_get_PointerTo_tempuri__Get_USCOREHotel_USCOREInfo(struct soap *soap, _tempuri__Get_USCOREHotel_USCOREInfo **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_tempuri__Get_USCOREHotel_USCOREInfo(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_tempuri__Get_USCOREHotel_USCOREListResponse(struct soap *soap, _tempuri__Get_USCOREHotel_USCOREListResponse *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE__tempuri__Get_USCOREHotel_USCOREListResponse))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_tempuri__Get_USCOREHotel_USCOREListResponse(struct soap *soap, const char *tag, int id, _tempuri__Get_USCOREHotel_USCOREListResponse *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__tempuri__Get_USCOREHotel_USCOREListResponse);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _tempuri__Get_USCOREHotel_USCOREListResponse ** SOAP_FMAC4 soap_in_PointerTo_tempuri__Get_USCOREHotel_USCOREListResponse(struct soap *soap, const char *tag, _tempuri__Get_USCOREHotel_USCOREListResponse **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_tempuri__Get_USCOREHotel_USCOREListResponse **)soap_malloc(soap, sizeof(_tempuri__Get_USCOREHotel_USCOREListResponse *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_tempuri__Get_USCOREHotel_USCOREListResponse *)soap_instantiate__tempuri__Get_USCOREHotel_USCOREListResponse(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_tempuri__Get_USCOREHotel_USCOREListResponse ** p = (_tempuri__Get_USCOREHotel_USCOREListResponse **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__tempuri__Get_USCOREHotel_USCOREListResponse, sizeof(_tempuri__Get_USCOREHotel_USCOREListResponse), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_tempuri__Get_USCOREHotel_USCOREListResponse(struct soap *soap, _tempuri__Get_USCOREHotel_USCOREListResponse *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTo_tempuri__Get_USCOREHotel_USCOREListResponse);
	if (soap_out_PointerTo_tempuri__Get_USCOREHotel_USCOREListResponse(soap, tag?tag:"tempuri:Get_Hotel_ListResponse", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _tempuri__Get_USCOREHotel_USCOREListResponse ** SOAP_FMAC4 soap_get_PointerTo_tempuri__Get_USCOREHotel_USCOREListResponse(struct soap *soap, _tempuri__Get_USCOREHotel_USCOREListResponse **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_tempuri__Get_USCOREHotel_USCOREListResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_tempuri__Get_USCOREHotel_USCOREList(struct soap *soap, _tempuri__Get_USCOREHotel_USCOREList *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE__tempuri__Get_USCOREHotel_USCOREList))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_tempuri__Get_USCOREHotel_USCOREList(struct soap *soap, const char *tag, int id, _tempuri__Get_USCOREHotel_USCOREList *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__tempuri__Get_USCOREHotel_USCOREList);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _tempuri__Get_USCOREHotel_USCOREList ** SOAP_FMAC4 soap_in_PointerTo_tempuri__Get_USCOREHotel_USCOREList(struct soap *soap, const char *tag, _tempuri__Get_USCOREHotel_USCOREList **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_tempuri__Get_USCOREHotel_USCOREList **)soap_malloc(soap, sizeof(_tempuri__Get_USCOREHotel_USCOREList *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_tempuri__Get_USCOREHotel_USCOREList *)soap_instantiate__tempuri__Get_USCOREHotel_USCOREList(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_tempuri__Get_USCOREHotel_USCOREList ** p = (_tempuri__Get_USCOREHotel_USCOREList **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__tempuri__Get_USCOREHotel_USCOREList, sizeof(_tempuri__Get_USCOREHotel_USCOREList), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_tempuri__Get_USCOREHotel_USCOREList(struct soap *soap, _tempuri__Get_USCOREHotel_USCOREList *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTo_tempuri__Get_USCOREHotel_USCOREList);
	if (soap_out_PointerTo_tempuri__Get_USCOREHotel_USCOREList(soap, tag?tag:"tempuri:Get_Hotel_List", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _tempuri__Get_USCOREHotel_USCOREList ** SOAP_FMAC4 soap_get_PointerTo_tempuri__Get_USCOREHotel_USCOREList(struct soap *soap, _tempuri__Get_USCOREHotel_USCOREList **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_tempuri__Get_USCOREHotel_USCOREList(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToxsd__unsignedByte(struct soap *soap, unsigned char *const*a)
{
#ifndef WITH_NOIDREF
	soap_reference(soap, *a, SOAP_TYPE_xsd__unsignedByte);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToxsd__unsignedByte(struct soap *soap, const char *tag, int id, unsigned char *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_xsd__unsignedByte);
	if (id < 0)
		return soap->error;
	return soap_out_xsd__unsignedByte(soap, tag, id, *a, type);
}

SOAP_FMAC3 unsigned char ** SOAP_FMAC4 soap_in_PointerToxsd__unsignedByte(struct soap *soap, const char *tag, unsigned char **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (unsigned char **)soap_malloc(soap, sizeof(unsigned char *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_xsd__unsignedByte(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (unsigned char **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_xsd__unsignedByte, sizeof(unsigned char), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToxsd__unsignedByte(struct soap *soap, unsigned char *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerToxsd__unsignedByte);
	if (soap_out_PointerToxsd__unsignedByte(soap, tag?tag:"xsd:unsignedByte", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 unsigned char ** SOAP_FMAC4 soap_get_PointerToxsd__unsignedByte(struct soap *soap, unsigned char **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToxsd__unsignedByte(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToint(struct soap *soap, int *const*a)
{
#ifndef WITH_NOIDREF
	soap_reference(soap, *a, SOAP_TYPE_int);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToint(struct soap *soap, const char *tag, int id, int *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_int);
	if (id < 0)
		return soap->error;
	return soap_out_int(soap, tag, id, *a, type);
}

SOAP_FMAC3 int ** SOAP_FMAC4 soap_in_PointerToint(struct soap *soap, const char *tag, int **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (int **)soap_malloc(soap, sizeof(int *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_int(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (int **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_int, sizeof(int), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToint(struct soap *soap, int *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerToint);
	if (soap_out_PointerToint(soap, tag?tag:"int", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int ** SOAP_FMAC4 soap_get_PointerToint(struct soap *soap, int **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToint(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTostd__wstring(struct soap *soap, std::wstring *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_std__wstring))
		soap_serialize_std__wstring(soap, *a);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTostd__wstring(struct soap *soap, const char *tag, int id, std::wstring *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_std__wstring);
	if (id < 0)
		return soap->error;
	return soap_out_std__wstring(soap, tag, id, *a, type);
}

SOAP_FMAC3 std::wstring ** SOAP_FMAC4 soap_in_PointerTostd__wstring(struct soap *soap, const char *tag, std::wstring **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (std::wstring **)soap_malloc(soap, sizeof(std::wstring *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_std__wstring(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (std::wstring **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_std__wstring, sizeof(std::wstring), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTostd__wstring(struct soap *soap, std::wstring *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTostd__wstring);
	if (soap_out_PointerTostd__wstring(soap, tag?tag:"string", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 std::wstring ** SOAP_FMAC4 soap_get_PointerTostd__wstring(struct soap *soap, std::wstring **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTostd__wstring(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize__QName(struct soap *soap, char *const*a)
{
#ifndef WITH_NOIDREF
	soap_reference(soap, *a, SOAP_TYPE__QName);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__QName(struct soap *soap, const char *tag, int id, char *const*a, const char *type)
{
	return soap_outstring(soap, tag, id, a, type, SOAP_TYPE__QName);
}

SOAP_FMAC3 char * * SOAP_FMAC4 soap_in__QName(struct soap *soap, const char *tag, char **a, const char *type)
{	char **p;
	p = soap_instring(soap, tag, a, type, SOAP_TYPE__QName, 2, 0, -1);
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put__QName(struct soap *soap, char *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE__QName);
	if (soap_out__QName(soap, tag?tag:"byte", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 char ** SOAP_FMAC4 soap_get__QName(struct soap *soap, char **p, const char *tag, const char *type)
{
	if ((p = soap_in__QName(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_string(struct soap *soap, char **a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_string
	*a = SOAP_DEFAULT_string;
#else
	*a = (char *)0;
#endif
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_string(struct soap *soap, char *const*a)
{
#ifndef WITH_NOIDREF
	soap_reference(soap, *a, SOAP_TYPE_string);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_string(struct soap *soap, const char *tag, int id, char *const*a, const char *type)
{
	return soap_outstring(soap, tag, id, a, type, SOAP_TYPE_string);
}

SOAP_FMAC3 char * * SOAP_FMAC4 soap_in_string(struct soap *soap, const char *tag, char **a, const char *type)
{	char **p;
	p = soap_instring(soap, tag, a, type, SOAP_TYPE_string, 1, 0, -1);
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_string(struct soap *soap, char *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_string);
	if (soap_out_string(soap, tag?tag:"byte", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 char ** SOAP_FMAC4 soap_get_string(struct soap *soap, char **p, const char *tag, const char *type)
{
	if ((p = soap_in_string(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#if defined(__BORLANDC__)
#pragma option pop
#pragma option pop
#endif

/* End of soapC.cpp */
